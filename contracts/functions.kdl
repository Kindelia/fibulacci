// Fpt.init : _
fun (Fpt_init) {
  (Fpt_init) =
    (Apps_Fpt_Y7Q)
}

// Apps.Fpt.Kindelia.join_lobby (subj: (U120)) (kgt: (U120)) (start: (U120)) (state: (Apps.Fpt.State)) (queue: (Data.LimitedQueue.Sorted _ (Apps.Fpt.Kindelia.State.Phase.User))) : _
fun (Apps_Fpt_HF6 subj kgt start state queue) {
  (Apps_Fpt_HF6 subj kgt start state queue) =
    dup _2 _3 = queue;
    dup _0 _1 = subj;
    let user = {Fpt_kdl_spun _0 kgt};
    let size = (U120_to_nat #10);
    dup _6 _7 = size;
    dup _8 _9 = _6;
    dup _10 _11 = _7;
    let p = (Data_Limiyl2 _8 _2 user);
    (Pair_match p @p.fst @p.snd dup _4 _5 = p.snd;
    let ~ = (Fpt_kdl_spuk p.fst);
    let cond = @x (U120_equal _1 (Fpt_kdl_spuk x));
    let find = (Data_Limiw0W _9 cond _4);
    let phase = {Fpt_kdl_splo _5};
    {SAVE {Fpt_kdl_snew phase start state} @~ (Maybe_match find let floor = (Data_LimiM1b _10 (Data_LimisQa _11 _3));
    let value = (Maybe_extMbF floor #0 @x (Fpt_kdl_spuk x));
    let result = {Fpt_res_noqu value};
    {DONE result} @find.value let result = {Fpt_res_qued find.value};
    {DONE result})})
}

// Apps.Fpt.Kindelia.Act.reset : (Apps.Fpt.Kindelia.Act)
ctr {Fpt_act_rst}

// User.Sipher.PatriciaTree.set (tree: (User.Sipher.PatriciaTree)) (key: (U120)) (value: (U120)) : (User.Sipher.PatriciaTree)
fun (PSet tree key value) {
  (PSet {PEmpty} key value) =
    {PLeaf key value}
  (PSet {PLeaf j y} key value) =
    dup _2 _3 = key;
    dup _0 _1 = j;
    (PSetLeaf (U120_equal _0 _2) value y _1 _3)
  (PSet {PBranch p m t0 t1} key value) =
    dup _4 _5 = key;
    dup _2 _3 = m;
    dup _0 _1 = p;
    (PSetBrnch (PMatPref _4 _0 _2) _1 _3 t0 t1 _5 value)
}

// User.Sipher.PatriciaTree.set.branch0 (b: (Bool)) (p: (U120)) (m: (U120)) (t0: (User.Sipher.PatriciaTree)) (t1: (User.Sipher.PatriciaTree)) (key: (U120)) (value: (U120)) : (User.Sipher.PatriciaTree)
fun (PSetBrnch b p m t0 t1 key value) {
  (PSetBrnch {Bool_false} p m t0 t1 key value) =
    dup _2 _3 = key;
    dup _0 _1 = p;
    (PJoin _2 {PLeaf _3 value} _0 {PBranch _1 m t0 t1})
  (PSetBrnch {Bool_true} p m t0 t1 key value) =
    dup _2 _3 = key;
    dup _0 _1 = m;
    (PSetBrnch1 (PZeroBit _2 _0) p _1 t0 t1 _3 value)
}

// User.Sipher.PatriciaTree.set.branch1 (b: (Bool)) (p: (U120)) (m: (U120)) (t0: (User.Sipher.PatriciaTree)) (t1: (User.Sipher.PatriciaTree)) (key: (U120)) (value: (U120)) : (User.Sipher.PatriciaTree)
fun (PSetBrnch1 b p m t0 t1 key value) {
  (PSetBrnch1 {Bool_true} p m t0 t1 key value) =
    {PBranch p m (PSet t0 key value) t1}
  (PSetBrnch1 {Bool_false} p m t0 t1 key value) =
    {PBranch p m t0 (PSet t1 key value)}
}

// User.Sipher.PatriciaTree.set.leaf (b: (Bool)) (value: (U120)) (y: (U120)) (j: (U120)) (key: (U120)) : (User.Sipher.PatriciaTree)
fun (PSetLeaf b value y j key) {
  (PSetLeaf {Bool_true} value ~ ~ key) =
    {PLeaf key value}
  (PSetLeaf {Bool_false} value y j key) =
    dup _2 _3 = key;
    dup _0 _1 = j;
    (PJoin _2 {PLeaf _3 value} _0 {PLeaf _1 y})
}

// U120.equal (a: (U120)) (b: (U120)) : (Bool)
fun (U120_equal a b) {
  (U120_equal a b) =
    (U120_tbool (== a b))
}

// U120.new (hi: U60) (lo: U60) : (U120)
fun (U120_new hi lo) {
  (U120_new hi lo) =
    (+ (<< hi #60) (>> (<< lo #60) #60))
}

// U120.to_bool (n: (U120)) : (Bool)
fun (U120_tbool n) {
  (U120_tbool #0) =
    {Bool_false}
  (U120_tbool ~) =
    {Bool_true}
}

// Bool.false : (Bool)
ctr {Bool_false}

// Bool.true : (Bool)
ctr {Bool_true}

// User.Sipher.PatriciaTree.matchprefix (k: (U120)) (p: (U120)) (m: (U120)) : (Bool)
fun (PMatPref k p m) {
  (PMatPref k p m) =
    (U120_equal (PMask k m) p)
}

// User.Sipher.PatriciaTree.mask (k: (U120)) (m: (U120)) : (U120)
fun (PMask k m) {
  (PMask k m) =
    (& k (- m (U120_1)))
}

// U60.greater_than (a: U60) (b: U60) : (Bool)
fun (U60_gtn a b) {
  (U60_gtn a b) =
    (U60_tbool (> a b))
}

// U60.to_bool (n: U60) : (Bool)
fun (U60_tbool n) {
  (U60_tbool #0) =
    {Bool_false}
  (U60_tbool ~) =
    {Bool_true}
}

// Bool.if -(a: Type) (b: (Bool)) (t: a) (f: a) : a
fun (Bool_if b t f) {
  (Bool_if {Bool_true} t ~) =
    t
  (Bool_if {Bool_false} ~ f) =
    f
}

// U120.1 : (U120)
fun (U120_1) {
  (U120_1) =
    #1
}

// User.Sipher.PatriciaTree.zerobit (x: (U120)) (y: (U120)) : (Bool)
fun (PZeroBit x y) {
  (PZeroBit x y) =
    (U120_equal (& x y) (U120_0))
}

// U120.0 : (U120)
fun (U120_0) {
  (U120_0) =
    #0
}

// User.Sipher.PatriciaTree.leaf (key: (U120)) (value: (U120)) : (User.Sipher.PatriciaTree)
ctr {PLeaf key value}

// User.Sipher.PatriciaTree.join (p0: (U120)) (t0: (User.Sipher.PatriciaTree)) (p1: (U120)) (t1: (User.Sipher.PatriciaTree)) : (User.Sipher.PatriciaTree)
fun (PJoin p0 t0 p1 t1) {
  (PJoin p0 t0 p1 t1) =
    dup _0 _1 = p0;
    (PJoinAux (PBrnchBit _0 p1) _1 t0 t1)
}

// User.Sipher.PatriciaTree.joinAux0 (m: (U120)) (p0: (U120)) (t0: (User.Sipher.PatriciaTree)) (t1: (User.Sipher.PatriciaTree)) : (User.Sipher.PatriciaTree)
fun (PJoinAux m p0 t0 t1) {
  (PJoinAux m p0 t0 t1) =
    dup _2 _3 = m;
    dup _0 _1 = p0;
    (PJoinAux1 (PZeroBit _2 _0) _3 _1 t0 t1)
}

// User.Sipher.PatriciaTree.joinAux1 (b: (Bool)) (m: (U120)) (p0: (U120)) (t0: (User.Sipher.PatriciaTree)) (t1: (User.Sipher.PatriciaTree)) : (User.Sipher.PatriciaTree)
fun (PJoinAux1 b m p0 t0 t1) {
  (PJoinAux1 {Bool_true} m p0 t0 t1) =
    dup _0 _1 = m;
    {PBranch (PMask p0 _0) _1 t0 t1}
  (PJoinAux1 {Bool_false} m p0 t0 t1) =
    dup _0 _1 = m;
    {PBranch (PMask p0 _0) _1 t1 t0}
}

// User.Sipher.PatriciaTree.branchingbit (p0: (U120)) (p1: (U120)) : (U120)
fun (PBrnchBit p0 p1) {
  (PBrnchBit p0 p1) =
    (PLowstBit (^ p0 p1))
}

// User.Sipher.PatriciaTree.lowestbit (x: (U120)) : (U120)
fun (PLowstBit x) {
  (PLowstBit x) =
    dup _0 _1 = x;
    (PLowstBit1 (% _0 #2) _1)
}

// User.Sipher.PatriciaTree.lowestbitAux0 (b: (U120)) (x: (U120)) : (U120)
fun (PLowstBit1 b x) {
  (PLowstBit1 #0 x) =
    (* #2 (PLowstBit (/ x #2)))
  (PLowstBit1 #1 ~) =
    (U120_1)
}

// U60.mul.carrying (a: U60) (b: U60) : (U120)
fun (U60_mul_car a b) {
  (U60_mul_car a b) =
    dup _2 _3 = a;
    dup _0 _1 = b;
    let alo = (>> (<< _2 #30) #30);
    dup _18 _19 = alo;
    let ahi = (>> _3 #30);
    dup _16 _17 = ahi;
    let blo = (>> (<< _0 #30) #30);
    dup _14 _15 = blo;
    let bhi = (>> _1 #30);
    dup _12 _13 = bhi;
    let mul0 = (* _18 _14);
    let mul1 = (* _19 _12);
    dup _10 _11 = mul1;
    let mul2 = (* _16 _15);
    dup _8 _9 = mul2;
    let mul3 = (* _17 _13);
    let mul1.lo = (<< _10 #30);
    let mul2.lo = (<< _8 #30);
    let add.lo1 = (U60_add_ow mul0 mul1.lo);
    dup _6 _7 = add.lo1;
    let add.lo2 = (U60_add_ow (Pair_snd _6) mul2.lo);
    dup _4 _5 = add.lo2;
    let car.lo1 = (Bool_tu60 (Pair_fst _7));
    let car.lo2 = (Bool_tu60 (Pair_fst _4));
    let carry = (+ car.lo1 car.lo2);
    let c.lo = (Pair_snd _5);
    let mul1.hi = (>> _11 #30);
    let mul2.hi = (>> _9 #30);
    let c.hi = (+ mul1.hi (+ mul2.hi (+ mul3 carry)));
    (U120_new c.hi c.lo)
}

// Pair.fst -(a: Type) -(b: Type) (pair: (Pair a b)) : a
fun (Pair_fst pair) {
  (Pair_fst {T2 fst ~}) =
    fst
}

// Pair.snd -(a: Type) -(b: Type) (pair: (Pair a b)) : b
fun (Pair_snd pair) {
  (Pair_snd {T2 ~ snd}) =
    snd
}

// U60.add.overflowing (a: U60) (b: U60) : (Pair (Bool) U60)
fun (U60_add_ow a b) {
  (U60_add_ow a b) =
    dup _0 _1 = a;
    let res = (+ _0 b);
    dup _2 _3 = res;
    let ovr = (U60_ltn _2 _1);
    {T2 ovr _3}
}

// U60.less_than (a: U60) (b: U60) : (Bool)
fun (U60_ltn a b) {
  (U60_ltn a b) =
    (U60_tbool (< a b))
}

// Bool.to_u60 (b: (Bool)) : U60
fun (Bool_tu60 b) {
  (Bool_tu60 {Bool_false}) =
    #0
  (Bool_tu60 {Bool_true}) =
    #1
}

// U120.high (n: (U120)) : U60
fun (U120_highs n) {
  (U120_highs n) =
    (>> n #60)
}

// U120.low (n: (U120)) : U60
fun (U120_low n) {
  (U120_low n) =
    (>> (<< n #60) #60)
}

// U120.div_mod (num: (U120)) (den: (U120)) : (Pair (U120) (U120))
fun (U120_dms num den) {
  (U120_dms ~ #0) =
    {T2 (U60_tu120 (/ #0 #0)) (U60_tu120 (% #0 #0))}
  (U120_dms num den) =
    dup _0 _1 = num;
    (Maybe_match (U120_msb _0) {T2 #0 #0} @msb.value let qr = {T2 #0 #0};
    let idx = (U120_inc msb.value);
    (U120_dm_go idx qr _1 den))
}

// U120.div_mod.go (idx: (U120)) (qr: (Pair (U120) (U120))) (num: (U120)) (den: (U120)) : (Pair (U120) (U120))
fun (U120_dm_go idx qr num den) {
  (U120_dm_go #0 qr ~ ~) =
    qr
  (U120_dm_go idx qr num den) =
    dup _8 _9 = qr;
    dup _4 _5 = den;
    dup _6 _7 = _4;
    dup _2 _3 = num;
    dup _0 _1 = idx;
    let quo = (Pair_fst _8);
    dup _16 _17 = quo;
    let rem = (Pair_snd _9);
    let rem = (<< rem #1);
    let bit = (U120_decs _0);
    dup _14 _15 = bit;
    let rem = (+ rem (U120_getb _2 _14));
    dup _10 _11 = rem;
    dup _12 _13 = _10;
    let qr = (Bool_if (U120_gte _11 _5) let quo = (U120_setb _16 _15);
    let rem = (- _12 _6);
    {T2 quo rem} {T2 _17 _13});
    (U120_dm_go (U120_decs _1) qr _3 _7)
}

// U120.msb (n: (U120)) : (Maybe (U120))
fun (U120_msb n) {
  (U120_msb #0) =
    {Maybe_none}
  (U120_msb n) =
    {Maybe_some (- (U120_msb_go n) #1)}
}

// U120.msb.go (n: (U120)) : (U120)
fun (U120_msb_go n) {
  (U120_msb_go #0) =
    #0
  (U120_msb_go n) =
    (+ #1 (U120_msb_go (>> n #1)))
}

// Maybe.some -(t: Type) (value: t) : (Maybe t)
ctr {Maybe_some value}

// Maybe.none -(t: Type) : (Maybe t)
ctr {Maybe_none}

// Bool.or (a: (Bool)) (b: (Bool)) : (Bool)
fun (Bool_or a b) {
  (Bool_or {Bool_true} ~) =
    {Bool_true}
  (Bool_or {Bool_false} b) =
    b
}

// U120.dec (num: (U120)) : (U120)
fun (U120_decs num) {
  (U120_decs num) =
    (- num #1)
}

// Maybe.match -(t: Type) (x: (Maybe t)) -(p: (x: (Maybe t)) Type) (none: (p (Maybe.none t))) (some: (value: t) (p (Maybe.some t value))) : (p x)
fun (Maybe_match x none some) {
  (Maybe_match {Maybe_none} none ~) =
    none
  (Maybe_match {Maybe_some value_} ~ some) =
    (!some value_)
}

// U120.inc (n: (U120)) : (U120)
fun (U120_inc n) {
  (U120_inc n) =
    (+ n #1)
}

// U120.greater_equal (a: (U120)) (b: (U120)) : (Bool)
fun (U120_gte a b) {
  (U120_gte a b) =
    (U120_tbool (>= a b))
}

// U60.to_u120 (num: U60) : (U120)
fun (U60_tu120 num) {
  (U60_tu120 num) =
    (U120_new #0 num)
}

// U120.set_bit (num: (U120)) (bit: (U120)) : (U120)
fun (U120_setb num bit) {
  (U120_setb num bit) =
    let bit = (<< #1 bit);
    (| num bit)
}

// U120.get_bit (num: (U120)) (bit: (U120)) : (U120)
fun (U120_getb num bit) {
  (U120_getb num bit) =
    (& (>> num bit) #1)
}

// User.Sipher.PatriciaTree.branch (prefix: (U120)) (branchingbit: (U120)) (left: (User.Sipher.PatriciaTree)) (right: (User.Sipher.PatriciaTree)) : (User.Sipher.PatriciaTree)
ctr {PBranch prefix branchingbit left right}

// User.Sipher.PatriciaTree.empty : (User.Sipher.PatriciaTree)
ctr {PEmpty}

// Apps.Fpt.Kindelia.State.Phase.User.new (wallet: (U120)) (kgt: (U120)) : (Apps.Fpt.Kindelia.State.Phase.User)
ctr {Fpt_kdl_spun wallet kgt}

// Apps.Fpt.Kindelia.Response.queue_fail (floor: (U120)) : (Apps.Fpt.Kindelia.Response)
ctr {Fpt_res_noqu floor}

// Apps.Fpt.Kindelia.Response.joined (id: (U120)) : (Apps.Fpt.Kindelia.Response)
ctr {Fpt_res_join id}

// Apps.Fpt.Kindelia.State.new (phase: (Apps.Fpt.Kindelia.State.Phase)) (start: (U120)) (state: (Apps.Fpt.State)) : (Apps.Fpt.Kindelia.State)
ctr {Fpt_kdl_snew phase start state}

// Apps.Fpt.State.Build : (Apps.Fpt.State)
fun (Fpt_stt_buil) {
  (Fpt_stt_buil) =
    {Fpt_st_new (Fpt_map_buld) (Fpt_tab_buld)}
}

// Apps.Fpt.State.new (map: (Apps.Fpt.Map)) (tab: (Apps.Fpt.Table)) : (Apps.Fpt.State)
ctr {Fpt_st_new map tab}

// Apps.Fpt.Map.Bases : (List (Data.BaseTree.Base))
fun (Fpt_map_base) {
  (Fpt_map_base) =
    {List_cons {Bt_base5} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_nil}}}}}}}}}}}
}

// Data.BaseTree.Base.5 : (Data.BaseTree.Base)
ctr {Bt_base5}

// Data.BaseTree.Base.2 : (Data.BaseTree.Base)
ctr {Bt_base2}

// List.nil -(t: Type) : (List t)
ctr {List_nil}

// List.cons -(t: Type) (head: t) (tail: (List t)) : (List t)
ctr {List_cons head tail}

// Apps.Fpt.Table.Bases : (List (Data.BaseTree.Base))
fun (Fpt_tbl_bses) {
  (Fpt_tbl_bses) =
    {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_nil}}}}}}}}}}}}}
}

// Apps.Fpt.Map.Build : (Apps.Fpt.Map)
fun (Fpt_map_buld) {
  (Fpt_map_buld) =
    {Bt_qui_tie (Fpt_map_bq00) (Fpt_map_bq01) (Fpt_map_bq02) (Fpt_map_bq03) (Fpt_map_bq04)}
}

// Apps.Fpt.Map.Build.qui_00 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))))))) (U120))
fun (Fpt_map_bq00) {
  (Fpt_map_bq00) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_map_p00) (Fpt_map_p01)} {Bt_bin_tie (Fpt_map_p02) (Fpt_map_p03)}} {Bt_bin_tie {Bt_bin_tie (Fpt_map_p04) (Fpt_map_p05)} {Bt_bin_tie (Fpt_map_p06) (Fpt_map_p07)}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_map_p08) (Fpt_map_p09)} {Bt_bin_tie (Fpt_map_p10) (Fpt_map_p11)}} {Bt_bin_tie {Bt_bin_tie (Fpt_map_p12) (Fpt_map_p13)} {Bt_bin_tie (Fpt_map_p14) (Fpt_map_p15)}}}}
}

// Apps.Fpt.Map.Build.qui_01 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))))))) (U120))
fun (Fpt_map_bq01) {
  (Fpt_map_bq01) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_map_p16) (Fpt_map_p17)} {Bt_bin_tie (Fpt_map_p18) (Fpt_map_p19)}} {Bt_bin_tie {Bt_bin_tie (Fpt_map_p20) (Fpt_map_p21)} {Bt_bin_tie (Fpt_map_p22) (Fpt_map_p23)}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_map_p24) (Fpt_map_p25)} {Bt_bin_tie (Fpt_map_p26) (Fpt_map_p27)}} {Bt_bin_tie {Bt_bin_tie (Fpt_map_p28) (Fpt_map_p29)} {Bt_bin_tie (Fpt_map_p30) (Fpt_map_p31)}}}}
}

// Apps.Fpt.Map.Build.qui_02 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))))))) (U120))
fun (Fpt_map_bq02) {
  (Fpt_map_bq02) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_map_p32) (Fpt_map_p33)} {Bt_bin_tie (Fpt_map_p34) (Fpt_map_p35)}} {Bt_bin_tie {Bt_bin_tie (Fpt_map_p36) (Fpt_map_p37)} {Bt_bin_tie (Fpt_map_p38) (Fpt_map_p39)}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_map_p40) (Fpt_map_p41)} {Bt_bin_tie (Fpt_map_p42) (Fpt_map_p43)}} {Bt_bin_tie {Bt_bin_tie (Fpt_map_p44) (Fpt_map_p45)} {Bt_bin_tie (Fpt_map_p46) (Fpt_map_p47)}}}}
}

// Apps.Fpt.Map.Build.qui_03 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))))))) (U120))
fun (Fpt_map_bq03) {
  (Fpt_map_bq03) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_map_p48) (Fpt_map_p49)} {Bt_bin_tie (Fpt_map_p50) (Fpt_map_p51)}} {Bt_bin_tie {Bt_bin_tie (Fpt_map_p52) (Fpt_map_p53)} {Bt_bin_tie (Fpt_map_p54) (Fpt_map_p55)}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_map_p56) (Fpt_map_p57)} {Bt_bin_tie (Fpt_map_p58) (Fpt_map_p59)}} {Bt_bin_tie {Bt_bin_tie (Fpt_map_p60) (Fpt_map_p61)} {Bt_bin_tie (Fpt_map_p62) (Fpt_map_p63)}}}}
}

// Apps.Fpt.Map.Build.qui_04 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))))))) (U120))
fun (Fpt_map_bq04) {
  (Fpt_map_bq04) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_map_p64) (Fpt_map_p65)} {Bt_bin_tie (Fpt_map_p66) (Fpt_map_p67)}} {Bt_bin_tie {Bt_bin_tie (Fpt_map_p68) (Fpt_map_p69)} {Bt_bin_tie (Fpt_map_p70) (Fpt_map_p71)}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_map_p72) (Fpt_map_p73)} {Bt_bin_tie (Fpt_map_p74) (Fpt_map_p75)}} {Bt_bin_tie {Bt_bin_tie (Fpt_map_p76) (Fpt_map_p77)} {Bt_bin_tie (Fpt_map_p78) (Fpt_map_p79)}}}}
}

// Apps.Fpt.Map.Build.full_32 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_f32) {
  (Fpt_map_f32) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755} {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755} {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755} {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755} {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755}}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755} {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755} {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755} {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755} {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755}}}}}
}

// Apps.Fpt.Map.Build.full_16 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _))))) (U120))
fun (Fpt_map_f16) {
  (Fpt_map_f16) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755} {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755} {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755} {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755} {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755}}}}
}

// Apps.Fpt.Map.Build.full_08 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))) (U120))
fun (Fpt_map_f08) {
  (Fpt_map_f08) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755} {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755} {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755}}}
}

// Apps.Fpt.Map.Build.full_04 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _))) (U120))
fun (Fpt_map_f04) {
  (Fpt_map_f04) =
    {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755} {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755}}
}

// Apps.Fpt.Map.Build.full_02 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.nil _)) (U120))
fun (Fpt_map_f02) {
  (Fpt_map_f02) =
    {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575968755755}
}

// Apps.Fpt.Map.Build.bin_00 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p00) {
  (Fpt_map_p00) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_01 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p01) {
  (Fpt_map_p01) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_02 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p02) {
  (Fpt_map_p02) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_03 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p03) {
  (Fpt_map_p03) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_04 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p04) {
  (Fpt_map_p04) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_05 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p05) {
  (Fpt_map_p05) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_06 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p06) {
  (Fpt_map_p06) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_07 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p07) {
  (Fpt_map_p07) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_08 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p08) {
  (Fpt_map_p08) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_09 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p09) {
  (Fpt_map_p09) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_10 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p10) {
  (Fpt_map_p10) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_11 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p11) {
  (Fpt_map_p11) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_12 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p12) {
  (Fpt_map_p12) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_13 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p13) {
  (Fpt_map_p13) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_14 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p14) {
  (Fpt_map_p14) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_15 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p15) {
  (Fpt_map_p15) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_16 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p16) {
  (Fpt_map_p16) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_17 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p17) {
  (Fpt_map_p17) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_18 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p18) {
  (Fpt_map_p18) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_19 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p19) {
  (Fpt_map_p19) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_20 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p20) {
  (Fpt_map_p20) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_21 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p21) {
  (Fpt_map_p21) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_22 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p22) {
  (Fpt_map_p22) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_23 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p23) {
  (Fpt_map_p23) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_24 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p24) {
  (Fpt_map_p24) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_25 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p25) {
  (Fpt_map_p25) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_26 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p26) {
  (Fpt_map_p26) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_27 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p27) {
  (Fpt_map_p27) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_28 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p28) {
  (Fpt_map_p28) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_29 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p29) {
  (Fpt_map_p29) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_30 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p30) {
  (Fpt_map_p30) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_31 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p31) {
  (Fpt_map_p31) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_32 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p32) {
  (Fpt_map_p32) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_33 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p33) {
  (Fpt_map_p33) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_34 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p34) {
  (Fpt_map_p34) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_35 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p35) {
  (Fpt_map_p35) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_36 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p36) {
  (Fpt_map_p36) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_37 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p37) {
  (Fpt_map_p37) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_38 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p38) {
  (Fpt_map_p38) =
    (Fpt_map_f32)
}

// Apps.Fpt.Map.Build.bin_39 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p39) {
  (Fpt_map_p39) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859548620309835819 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)} (Fpt_map_f08)} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101440 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)} (Fpt_map_f08)}}
}

// Apps.Fpt.Map.Build.bin_40 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p40) {
  (Fpt_map_p40) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859551575968579584} (Fpt_map_f02)} (Fpt_map_f04)} (Fpt_map_f08)} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859551575247159296} (Fpt_map_f02)} (Fpt_map_f04)} (Fpt_map_f08)}}
}

// Apps.Fpt.Map.Build.bin_41 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p41) {
  (Fpt_map_p41) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859551575247159296} (Fpt_map_f02)} (Fpt_map_f04)} (Fpt_map_f08)} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859548620309659648} {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244488283926877874335787}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579584 #13957705450244537859551575968755755} (Fpt_map_f02)}} (Fpt_map_f08)}}
}

// Apps.Fpt.Map.Build.bin_42 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p42) {
  (Fpt_map_p42) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957704618300512193816929369063424} {Bt_bin_tie #13957705450244537859551575247335467 #13957705450244488271823453875777579}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957705450244537859551575968755755} (Fpt_map_f02)}} (Fpt_map_f08)} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957704618300462618192231274643456} {Bt_bin_tie #13957705450244537859548620309835819 #3407642932139020144790053322795}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957705450244537859551575968755755} (Fpt_map_f02)}} (Fpt_map_f08)}}
}

// Apps.Fpt.Map.Build.bin_43 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p43) {
  (Fpt_map_p43) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450041426513057103472492544} {Bt_bin_tie #13957705450041476088681801567088683 #831740963894864872197849131}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957705450244537859551575968755755} (Fpt_map_f02)}} (Fpt_map_f08)} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244488271820498216681472} {Bt_bin_tie #3407642729077261381394587889707 #43}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957705450244537859551575968755755} (Fpt_map_f02)}} (Fpt_map_f08)}}
}

// Apps.Fpt.Map.Build.bin_44 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p44) {
  (Fpt_map_p44) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244488271820498216681472} {Bt_bin_tie #3406810988113366516522390040619 #0}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957705450244537859551575968755755} (Fpt_map_f02)}} (Fpt_map_f08)} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244488271820498216681472} {Bt_bin_tie #43 #0}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #3407642729126849112472339787819} {Bt_bin_tie #13957705450244537859551575968755712 #13957705450244537859551575968755755}}} (Fpt_map_f08)}}
}

// Apps.Fpt.Map.Build.bin_45 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p45) {
  (Fpt_map_p45) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13954297807312349251675708884779008} {Bt_bin_tie #43 #0}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #49587728122814574635} {Bt_bin_tie #13957705450244537859551575968755712 #13957705450244537859551575968755755}}} (Fpt_map_f08)} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #0} {Bt_bin_tie #203111346494471774666752 #831944075241356389035016192}} {Bt_bin_tie {Bt_bin_tie #13954298639256424493032097919795200 #49575624698094596139} {Bt_bin_tie #13957705450041426513057104193912832 #13957705450244537859551575968755755}}} (Fpt_map_f08)}}
}

// Apps.Fpt.Map.Build.bin_46 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p46) {
  (Fpt_map_p46) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #0} {Bt_bin_tie #203111346494472496263168 #831944075241359343972515840}} {Bt_bin_tie {Bt_bin_tie #831944075229252965036457984 #176171} {Bt_bin_tie #13954298639053313146540581082628096 #13957705450244537859551575968755755}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247335467 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #0} {Bt_bin_tie #203111346494472496263211 #831944075241359343972515840}} {Bt_bin_tie {Bt_bin_tie #0 #0} {Bt_bin_tie #0 #13957705450041426525163483129970688}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859548620309835819 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_47 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p47) {
  (Fpt_map_p47) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244488271820498216681472 #13957704618300462618195186933739520} {Bt_bin_tie #2955659096107 #831944075241359343972515840}} {Bt_bin_tie {Bt_bin_tie #0 #0} {Bt_bin_tie #0 #13957704618300462618192231274643456}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859548620309659691 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244488271820498216681472 #13957704618300462618195186933739563} {Bt_bin_tie #2955659096107 #203111334388093560029184}} {Bt_bin_tie {Bt_bin_tie #0 #203061758763394744188928} {Bt_bin_tie #0 #13954297807312349251675708884779008}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859548620309659648 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_48 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p48) {
  (Fpt_map_p48) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244488271820498216681472 #13957704618300462618195186933739563} {Bt_bin_tie #176171 #0}} {Bt_bin_tie {Bt_bin_tie #49575624698094419968 #49575624698094419968} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101440 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244488271820498216681472 #13957704618300462618195186933739563} {Bt_bin_tie #43 #49575624698094419968}} {Bt_bin_tie {Bt_bin_tie #0 #12103423998558208} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101440 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_49 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p49) {
  (Fpt_map_p49) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101483 #3406810988113366519478048960555} {Bt_bin_tie #0 #0}} {Bt_bin_tie {Bt_bin_tie #3406810988113366516522389864448 #0} {Bt_bin_tie #43 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101440 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159339 #831740963894864872197849088} {Bt_bin_tie #0 #0}} {Bt_bin_tie {Bt_bin_tie #43 #43} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101440 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_50 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p50) {
  (Fpt_map_p50) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159339 #43} {Bt_bin_tie #0 #0}} {Bt_bin_tie {Bt_bin_tie #0 #0} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101440 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159339 #49587731077752074283} {Bt_bin_tie #721420288 #0}} {Bt_bin_tie {Bt_bin_tie #0 #2954937499648} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101440 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_51 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p51) {
  (Fpt_map_p51) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159339 #49587731077752074283} {Bt_bin_tie #0 #0}} {Bt_bin_tie {Bt_bin_tie #203061758763394744188928 #0} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159339 #49587731077752959019} {Bt_bin_tie #0 #13957705450244537847445196311101440}} {Bt_bin_tie {Bt_bin_tie #0 #0} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_52 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p52) {
  (Fpt_map_p52) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #831944075241359343972515883 #49587731077030477824} {Bt_bin_tie #831740963894864872197849088 #13957705450244537859551575968579584}} {Bt_bin_tie {Bt_bin_tie #43 #0} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #3406811191224713010994164531243 #0} {Bt_bin_tie #13957705450041426513060059131412480 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579627 #0} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_53 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p53) {
  (Fpt_map_p53) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #203111346494471774666795 #3407642932188607872911424880640} {Bt_bin_tie #13957705450244488271823453875777536 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #43} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #203111346494471774666795 #13957705450041476100788180503146496} {Bt_bin_tie #13957705450244537847448151970197547 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13957705450244537920631645914968107 #43} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859548620309659648 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_54 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p54) {
  (Fpt_map_p54) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #12106378936057856 #13954297807312349263782088542257152} {Bt_bin_tie #13957705450244537847448151970197547 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13957705450244537847445197032697899 #43} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859548620309659648 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13954297807312349251678664543875072} {Bt_bin_tie #13957705450244537847448151970197547 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13954297807312349251675709606375467 #176128} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579584 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_55 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p55) {
  (Fpt_map_p55) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13954297807312349251678664543875115} {Bt_bin_tie #13957705450244537847448151970197547 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #721596459 #0} {Bt_bin_tie #12103423998558208 #2954937499648}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579584 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859548620309659648 #13954297807312349263782088542433323} {Bt_bin_tie #13957705450244537847448151970197547 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #721596459 #0} {Bt_bin_tie #721420288 #721420288}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579584 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_56 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p56) {
  (Fpt_map_p56) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859548620309659648 #13957704618300512205923309026717739} {Bt_bin_tie #13957705450244537847448151970197547 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #721596459 #0} {Bt_bin_tie #43 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957704618300512205923309026717739} {Bt_bin_tie #13957705450244537847448151970197547 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13957705450041426513057104194089003 #0} {Bt_bin_tie #49575624698094419968 #831740963894864872197849088}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_57 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p57) {
  (Fpt_map_p57) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159339 #13957704618300512205923309026717739} {Bt_bin_tie #13957705450244537847448151970197547 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13957705450244488271820498938277931 #203111346491516837167104} {Bt_bin_tie #2954937499648 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859548620309659648 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579627 #13957704618300512205923309026717739} {Bt_bin_tie #13957705450244537847448151970197547 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13957705450041426513060059131588651 #831944075241356389035016192} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957704618300462618192231274643456 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_58 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p58) {
  (Fpt_map_p58) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579627 #13957704618300512205923309026717739} {Bt_bin_tie #13957705450244537847448151970197547 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13957704618300462618192231996239915 #203111346491516837167104} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13954297807312349251675708884779008 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579627 #13957704618300512205923309026717739} {Bt_bin_tie #13957705450244537847448151970197547 #13957705450244537859548620309835819}} {Bt_bin_tie {Bt_bin_tie #13954297807515411010439103629144107 #203111346491516837167104} {Bt_bin_tie #2954937499648 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13954297807312349251675708884779008 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_59 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p59) {
  (Fpt_map_p59) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579627 #13957704618300512205923309026717739} {Bt_bin_tie #13957705450244537847448151970197547 #13957705450244537847445196311101483}} {Bt_bin_tie {Bt_bin_tie #721420331 #203061758766349681688576} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579627 #13957704618300512205923309026717739} {Bt_bin_tie #13957705450244537847448151970197547 #13957705450244537847445196311101483}} {Bt_bin_tie {Bt_bin_tie #43 #0} {Bt_bin_tie #176128 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_60 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p60) {
  (Fpt_map_p60) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579627 #13957704618300512205923309026717739} {Bt_bin_tie #13957705450244537847448151970197547 #13957705450244537847445196311277611}} {Bt_bin_tie {Bt_bin_tie #43 #0} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579627 #13957704618300512205923309026717739} {Bt_bin_tie #13957705450244537847448151970197547 #13957705450244537884599893237084203}} {Bt_bin_tie {Bt_bin_tie #12103423998558341 #0} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859551575968755712} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_61 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p61) {
  (Fpt_map_p61) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579627 #13957704618300512205923309026717739} {Bt_bin_tie #13957705450244488271823453875777579 #43171507554779345571769970877181995}} {Bt_bin_tie {Bt_bin_tie #831944025653628266942038149 #0} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450041426513057103472492544 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579627 #13957704618300462618195186933739563} {Bt_bin_tie #13957705450244488271820498938277931 #2572797358121487583548715051}} {Bt_bin_tie {Bt_bin_tie #3407642932188595769487426322565 #0} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450041426513057103472492544 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_62 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p62) {
  (Fpt_map_p62) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #203111346494472496087083 #13957704618300462618192231274643456} {Bt_bin_tie #13954298639256374905303976548413483 #152185638608103977003}} {Bt_bin_tie {Bt_bin_tie #3407642932188595769487426322432 #0} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450041426513057103472492544 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244488271820498216681472} {Bt_bin_tie #13954298639256424480928674642833451 #176171}} {Bt_bin_tie {Bt_bin_tie #3407642932188595769487426322432 #0} {Bt_bin_tie #12103423998558208 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450041426513057103472668672 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_63 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p63) {
  (Fpt_map_p63) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537847445196311101440} {Bt_bin_tie #13957704618503573952580324834848811 #721596459}} {Bt_bin_tie {Bt_bin_tie #831944075241356389035016192 #831740963894864872197849088} {Bt_bin_tie #2955659096107 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13954297807312349251675708884779008 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #49587731077030477824 #13957705450244537859548620309659648} {Bt_bin_tie #13957704618503573952580324834848811 #721596459}} {Bt_bin_tie {Bt_bin_tie #203111346491516837167104 #13957705450244537847445196311101440} {Bt_bin_tie #831741013482595949949923371 #831740963894864872197849088}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_64 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p64) {
  (Fpt_map_p64) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755712 #13957705450244537859551575968755755} {Bt_bin_tie #13957704618503573952580324834848811 #43}} {Bt_bin_tie {Bt_bin_tie #49587731077030477824 #13957705450244537847445196311101440} {Bt_bin_tie #49587731077752074283 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_map_f02) {Bt_bin_tie #203061758763395465609259 #0}} {Bt_bin_tie {Bt_bin_tie #49587731077751898112 #13957705450244537847445196311101440} {Bt_bin_tie #49587731077752074283 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #43 #13957705450244537859551575968755712} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_65 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p65) {
  (Fpt_map_p65) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_map_f02) {Bt_bin_tie #43 #3406810988113366516522389864448}} {Bt_bin_tie {Bt_bin_tie #49587731077752074240 #13957705450244537847445196311101440} {Bt_bin_tie #49587731077752074283 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859551575968755712} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #3407642729126837009048341229611} {Bt_bin_tie #0 #13957705450041426513057103472492544}} {Bt_bin_tie {Bt_bin_tie #49587731077752074283 #13957705450244537847445196311101440} {Bt_bin_tie #49587731077752074283 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859551575968755712} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_66 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p66) {
  (Fpt_map_p66) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #2955659096107} {Bt_bin_tie #0 #13957707113523354314890271866748928}} {Bt_bin_tie {Bt_bin_tie #49587731077752074283 #13957705450244537847445196311101440} {Bt_bin_tie #49587731077752074283 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859551575968755712} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #2955659096107} {Bt_bin_tie #0 #13957707113523354302786847868190720}} {Bt_bin_tie {Bt_bin_tie #13954297807312398839406786636853291 #13957705450244488271823453875777579} {Bt_bin_tie #49587731077752074283 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859551575968579584} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_67 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p67) {
  (Fpt_map_p67) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #831740963894864876526546987} {Bt_bin_tie #0 #13957704618300462618192231274643458}} {Bt_bin_tie {Bt_bin_tie #13954297807312349263782088542433280 #13957705450244537847445197032697899} {Bt_bin_tie #203061770869774401843243 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859551575968755712} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #721596459} {Bt_bin_tie #0 #0}} {Bt_bin_tie {Bt_bin_tie #13954297807312349263782088542433280 #13957705450041426513057104194089003} {Bt_bin_tie #12106379657654315 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859551575968755712} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_68 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p68) {
  (Fpt_map_p68) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #831944326578247348986753067} {Bt_bin_tie #49575624698094419968 #721420288}} {Bt_bin_tie {Bt_bin_tie #12106379657478144 #13957705450041426513057104194445442} {Bt_bin_tie #49587731077752074283 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #0 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #831944075241359344694112299} {Bt_bin_tie #2 #0}} {Bt_bin_tie {Bt_bin_tie #3406810988113366519478048784384 #13957704618300462618192231274643456} {Bt_bin_tie #12106379657654315 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #831740963894864872197849088 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_69 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p69) {
  (Fpt_map_p69) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450041476100788181224566827 #3407642932188607872911424880683} {Bt_bin_tie #0 #158456325028528675187087900672}} {Bt_bin_tie {Bt_bin_tie #2955659096064 #43} {Bt_bin_tie #12103424720154667 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101440 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #176171 #3411879008260525430115596763136} {Bt_bin_tie #43496102764006092822283865645121536 #13957704618300462618192231274643590}} {Bt_bin_tie {Bt_bin_tie #12106379657654315 #0} {Bt_bin_tie #13954297807312349251675708884955136 #12106379657654315}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859548620309659648 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_70 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p70) {
  (Fpt_map_p70) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450041426513057103472492587 #3407642932188607875867083976747} {Bt_bin_tie #13964914381089260672913243774124032 #134}} {Bt_bin_tie {Bt_bin_tie #0 #0} {Bt_bin_tie #13954297807312349251675708884779008 #203111346494472496263211}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579584 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101483 #831944075241359344694112299} {Bt_bin_tie #43496102764006092810180441646563328 #134}} {Bt_bin_tie {Bt_bin_tie #1180591620717411303424 #0} {Bt_bin_tie #13954297807312349251675708884779008 #831944075241359344694112299}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755712 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_71 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p71) {
  (Fpt_map_p71) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101483 #2954937675819} {Bt_bin_tie #0 #13954297807312349251678663822278656}} {Bt_bin_tie {Bt_bin_tie #1181756648601675804715 #2955658919936} {Bt_bin_tie #0 #831944075241356389035016192}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755712 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #43 #0} {Bt_bin_tie #49575624698094419968 #3406810988113366516523111284736}} {Bt_bin_tie {Bt_bin_tie #49587728122093154347 #2955658919936} {Bt_bin_tie #2954937499648 #831944075229255919973957632}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579584 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_72 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p72) {
  (Fpt_map_p72) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311277611 #721596459} {Bt_bin_tie #158456325028528678142025400320 #0}} {Bt_bin_tie {Bt_bin_tie #721596459 #2955658919936} {Bt_bin_tie #0 #831944075229252965036457984}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579584 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244488271820498938277931} {Bt_bin_tie #721420331 #0}} {Bt_bin_tie {Bt_bin_tie #13957705450244488271823453154357291 #2955658919936} {Bt_bin_tie #203061758763394744188928 #831944075229252965036457984}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968579584 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_73 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p73) {
  (Fpt_map_p73) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244488271820498938277931} {Bt_bin_tie #176171 #13957705450244537847445196311101440}} {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311277611 #12106379657478187} {Bt_bin_tie #0 #831944075241359343972515840}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244488271820498216857643} {Bt_bin_tie #831740963894864872198025259 #0}} {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101440 #831944075241359344693936171} {Bt_bin_tie #0 #203111346494472496263211}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_74 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p74) {
  (Fpt_map_p74) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244488271820498216857643} {Bt_bin_tie #176171 #0}} {Bt_bin_tie {Bt_bin_tie #13954297807312349251675708884779008 #13957705450244537859551575968579627} {Bt_bin_tie #176171 #203111346494472496263211}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244488271820498216857643} {Bt_bin_tie #43 #13957705450244537847445196311101440}} {Bt_bin_tie {Bt_bin_tie #13954297807312349251678664543875115 #13957705450244537859551575968579627} {Bt_bin_tie #12103424720154667 #49587731077752074283}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575247159296 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_75 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p75) {
  (Fpt_map_p75) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244488271820498216857643} {Bt_bin_tie #256 #13957705450041476088681801566912512}} {Bt_bin_tie {Bt_bin_tie #13954297807515411010439103628967979 #13957705450244537859551575968579627} {Bt_bin_tie #721596459 #203061758766350403285035}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859548620309659648 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244488271820498216681515} {Bt_bin_tie #49649655571906822187 #13957705450244488283924059654193152}} {Bt_bin_tie {Bt_bin_tie #13957704618300462618192231274819627 #13957705450244537859551575968579627} {Bt_bin_tie #13954297807312349251675709606375467 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101440 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_76 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p76) {
  (Fpt_map_p76) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537847445196311277611} {Bt_bin_tie #49587731077752074283 #13957705450244537859551575247159296}} {Bt_bin_tie {Bt_bin_tie #13957704618300512205923308305297451 #13957705450244537859551575247159296} {Bt_bin_tie #721596459 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244488271820498216681472 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859548620309659691} {Bt_bin_tie #12106379657654315 #13957705450244537859551575968579584}} {Bt_bin_tie {Bt_bin_tie #13957704618300512205923309026717739 #13957705450244488271820498938101760} {Bt_bin_tie #13957705450041426513057104194089003 #203111346491516837167104}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244488271820498216681472 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_77 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p77) {
  (Fpt_map_p77) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575247159339} {Bt_bin_tie #13954297807312496837734678218846251 #13957705451255124286885680044486920}} {Bt_bin_tie {Bt_bin_tie #12106379657654315 #13957705450244537847445196311101440} {Bt_bin_tie #13957705450041426513057104194089003 #3407642932188607872911424880683}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101440 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244537859551575247159296} {Bt_bin_tie #147586058969334067243 #13957705450041426525163483130146859}} {Bt_bin_tie {Bt_bin_tie #13954297807312349251675708884779051 #13957705450244488271820498216681472} {Bt_bin_tie #3407642729077261381394587889707 #3407642932188607872911424880640}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101440 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_78 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p78) {
  (Fpt_map_p78) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #13957705450244488271820498216681472} {Bt_bin_tie #203111346494472496263211 #49575624698094419968}} {Bt_bin_tie {Bt_bin_tie #0 #0} {Bt_bin_tie #721420288 #831740963894864872197849088}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101440 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #2954937675819 #13957705450041426513057103472492544} {Bt_bin_tie #203111346494472496263211 #2955659096107}} {Bt_bin_tie {Bt_bin_tie #2955658919936 #3406811191175125279917134053376} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101440 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Apps.Fpt.Map.Build.bin_79 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_map_p79) {
  (Fpt_map_p79) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #43 #13957705450244537859551575968579584} {Bt_bin_tie #13957704618503573964686703770906624 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #49587731077752074283 #0} {Bt_bin_tie #0 #0}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101440 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244488271820498216681515 #13957705450244537859551575968755755} {Bt_bin_tie #13954297807312349251675708884779008 #13957705450244537859551575968755755}} {Bt_bin_tie {Bt_bin_tie #13957705450244537859551575968755755 #721420288} {Bt_bin_tie #3407642932188607875866362380288 #13957705450244537847445196311101440}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie #13957705450244537847445196311101440 #13957705450244537859551575968755755} (Fpt_map_f02)} (Fpt_map_f04)}}}
}

// Data.BaseTree.Bin.tie -(r: Type) (b0: r) (b1: r) : (Data.BaseTree.Bin r)
ctr {Bt_bin_tie b0 b1}

// Data.BaseTree.Qui.tie -(r: Type) (b0: r) (b1: r) (b2: r) (b3: r) (b4: r) : (Data.BaseTree.Qui r)
ctr {Bt_qui_tie b0 b1 b2 b3 b4}

// Apps.Fpt.Table.Build : (Apps.Fpt.Table)
fun (Fpt_tab_buld) {
  (Fpt_tab_buld) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_gb00) (Fpt_tab_gb01)} {Bt_bin_tie (Fpt_tab_gb02) (Fpt_tab_gb03)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_gb04) (Fpt_tab_gb05)} {Bt_bin_tie (Fpt_tab_gb06) (Fpt_tab_gb07)}}}
}

// Apps.Fpt.Table.Build.bin.empty_32 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_pe) {
  (Fpt_tab_pe) =
    {Bt_bin_tie (Apps_Fpt_Ypj) (Apps_Fpt_Ypj)}
}

// Apps.Fpt.Table.Build.bin.empty_16 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _))))) (U120))
fun (Apps_Fpt_Ypj) {
  (Apps_Fpt_Ypj) =
    {Bt_bin_tie (Apps_Fpt_O_k) (Apps_Fpt_O_k)}
}

// Apps.Fpt.Table.Build.bin.empty_8 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))) (U120))
fun (Apps_Fpt_O_k) {
  (Apps_Fpt_O_k) =
    {Bt_bin_tie (Apps_Fpt_RIB) (Apps_Fpt_RIB)}
}

// Apps.Fpt.Table.Build.bin.empty_4 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _))) (U120))
fun (Apps_Fpt_RIB) {
  (Apps_Fpt_RIB) =
    {Bt_bin_tie (Apps_Fpt_qYI) (Apps_Fpt_qYI)}
}

// Apps.Fpt.Table.Build.bin.empty_2 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.nil _)) (U120))
fun (Apps_Fpt_qYI) {
  (Apps_Fpt_qYI) =
    {Bt_bin_tie #0 #0}
}

// Apps.Fpt.Table.Build.gbin_00 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))))))) (U120))
fun (Fpt_tab_gb00) {
  (Fpt_tab_gb00) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p00) (Fpt_tab_p01)} {Bt_bin_tie (Fpt_tab_p02) (Fpt_tab_p03)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p04) (Fpt_tab_p05)} {Bt_bin_tie (Fpt_tab_p06) (Fpt_tab_p07)}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p08) (Fpt_tab_p09)} {Bt_bin_tie (Fpt_tab_p10) (Fpt_tab_p11)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p12) (Fpt_tab_p13)} {Bt_bin_tie (Fpt_tab_p14) (Fpt_tab_p15)}}}}
}

// Apps.Fpt.Table.Build.gbin_01 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))))))) (U120))
fun (Fpt_tab_gb01) {
  (Fpt_tab_gb01) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p16) (Fpt_tab_p17)} {Bt_bin_tie (Fpt_tab_p18) (Fpt_tab_p19)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p20) (Fpt_tab_p21)} {Bt_bin_tie (Fpt_tab_p22) (Fpt_tab_p23)}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p24) (Fpt_tab_p25)} {Bt_bin_tie (Fpt_tab_p26) (Fpt_tab_p27)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p28) (Fpt_tab_p29)} {Bt_bin_tie (Fpt_tab_p30) (Fpt_tab_p31)}}}}
}

// Apps.Fpt.Table.Build.gbin_02 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))))))) (U120))
fun (Fpt_tab_gb02) {
  (Fpt_tab_gb02) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p32) (Fpt_tab_p33)} {Bt_bin_tie (Fpt_tab_p34) (Fpt_tab_p35)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p36) (Fpt_tab_p37)} {Bt_bin_tie (Fpt_tab_p38) (Fpt_tab_p39)}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p40) (Fpt_tab_p41)} {Bt_bin_tie (Fpt_tab_p42) (Fpt_tab_p43)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p44) (Fpt_tab_p45)} {Bt_bin_tie (Fpt_tab_p46) (Fpt_tab_p47)}}}}
}

// Apps.Fpt.Table.Build.gbin_03 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))))))) (U120))
fun (Fpt_tab_gb03) {
  (Fpt_tab_gb03) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p48) (Fpt_tab_p49)} {Bt_bin_tie (Fpt_tab_p50) (Fpt_tab_p51)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p52) (Fpt_tab_p53)} {Bt_bin_tie (Fpt_tab_p54) (Fpt_tab_p55)}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p56) (Fpt_tab_p57)} {Bt_bin_tie (Fpt_tab_p58) (Fpt_tab_p59)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p60) (Fpt_tab_p61)} {Bt_bin_tie (Fpt_tab_p62) (Fpt_tab_p63)}}}}
}

// Apps.Fpt.Table.Build.gbin_04 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))))))) (U120))
fun (Fpt_tab_gb04) {
  (Fpt_tab_gb04) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p64) (Fpt_tab_p65)} {Bt_bin_tie (Fpt_tab_p66) (Fpt_tab_p67)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p68) (Fpt_tab_p69)} {Bt_bin_tie (Fpt_tab_p70) (Fpt_tab_p71)}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p72) (Fpt_tab_p73)} {Bt_bin_tie (Fpt_tab_p74) (Fpt_tab_p75)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p76) (Fpt_tab_p77)} {Bt_bin_tie (Fpt_tab_p78) (Fpt_tab_p79)}}}}
}

// Apps.Fpt.Table.Build.gbin_05 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))))))) (U120))
fun (Fpt_tab_gb05) {
  (Fpt_tab_gb05) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p80) (Fpt_tab_p81)} {Bt_bin_tie (Fpt_tab_p82) (Fpt_tab_p83)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p84) (Fpt_tab_p85)} {Bt_bin_tie (Fpt_tab_p86) (Fpt_tab_p87)}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p88) (Fpt_tab_p89)} {Bt_bin_tie (Fpt_tab_p90) (Fpt_tab_p91)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p92) (Fpt_tab_p93)} {Bt_bin_tie (Fpt_tab_p94) (Fpt_tab_p95)}}}}
}

// Apps.Fpt.Table.Build.gbin_06 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))))))) (U120))
fun (Fpt_tab_gb06) {
  (Fpt_tab_gb06) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p96) (Fpt_tab_p97)} {Bt_bin_tie (Fpt_tab_p98) (Fpt_tab_p99)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p100) (Fpt_tab_p101)} {Bt_bin_tie (Fpt_tab_p102) (Fpt_tab_p103)}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p104) (Fpt_tab_p105)} {Bt_bin_tie (Fpt_tab_p106) (Fpt_tab_p107)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p108) (Fpt_tab_p109)} {Bt_bin_tie (Fpt_tab_p110) (Fpt_tab_p111)}}}}
}

// Apps.Fpt.Table.Build.gbin_07 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))))))) (U120))
fun (Fpt_tab_gb07) {
  (Fpt_tab_gb07) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p112) (Fpt_tab_p113)} {Bt_bin_tie (Fpt_tab_p114) (Fpt_tab_p115)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p116) (Fpt_tab_p117)} {Bt_bin_tie (Fpt_tab_p118) (Fpt_tab_p119)}}} {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p120) (Fpt_tab_p121)} {Bt_bin_tie (Fpt_tab_p122) (Fpt_tab_p123)}} {Bt_bin_tie {Bt_bin_tie (Fpt_tab_p124) (Fpt_tab_p125)} {Bt_bin_tie (Fpt_tab_p126) (Fpt_tab_p127)}}}}
}

// Apps.Fpt.Table.Build.bin_00 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p00) {
  (Fpt_tab_p00) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Apps_Fpt_qYI) {Bt_bin_tie #2361183241984621382957 #0}} (Apps_Fpt_RIB)} (Apps_Fpt_O_k)} (Apps_Fpt_Ypj)}
}

// Apps.Fpt.Table.Build.bin_01 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p01) {
  (Fpt_tab_p01) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_02 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p02) {
  (Fpt_tab_p02) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_03 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p03) {
  (Fpt_tab_p03) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_04 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p04) {
  (Fpt_tab_p04) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_05 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p05) {
  (Fpt_tab_p05) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_06 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p06) {
  (Fpt_tab_p06) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_07 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p07) {
  (Fpt_tab_p07) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_08 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p08) {
  (Fpt_tab_p08) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_09 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p09) {
  (Fpt_tab_p09) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_10 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p10) {
  (Fpt_tab_p10) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_11 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p11) {
  (Fpt_tab_p11) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_12 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p12) {
  (Fpt_tab_p12) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_13 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p13) {
  (Fpt_tab_p13) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_14 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p14) {
  (Fpt_tab_p14) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_15 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p15) {
  (Fpt_tab_p15) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_16 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p16) {
  (Fpt_tab_p16) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_17 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p17) {
  (Fpt_tab_p17) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_18 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p18) {
  (Fpt_tab_p18) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_19 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p19) {
  (Fpt_tab_p19) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_20 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p20) {
  (Fpt_tab_p20) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_21 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p21) {
  (Fpt_tab_p21) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_22 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p22) {
  (Fpt_tab_p22) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_23 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p23) {
  (Fpt_tab_p23) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_24 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p24) {
  (Fpt_tab_p24) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_25 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p25) {
  (Fpt_tab_p25) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_26 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p26) {
  (Fpt_tab_p26) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_27 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p27) {
  (Fpt_tab_p27) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_28 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p28) {
  (Fpt_tab_p28) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_29 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p29) {
  (Fpt_tab_p29) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_30 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p30) {
  (Fpt_tab_p30) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_31 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p31) {
  (Fpt_tab_p31) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_32 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p32) {
  (Fpt_tab_p32) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_33 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p33) {
  (Fpt_tab_p33) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_34 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p34) {
  (Fpt_tab_p34) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_35 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p35) {
  (Fpt_tab_p35) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_36 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p36) {
  (Fpt_tab_p36) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_37 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p37) {
  (Fpt_tab_p37) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_38 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p38) {
  (Fpt_tab_p38) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_39 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p39) {
  (Fpt_tab_p39) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_40 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p40) {
  (Fpt_tab_p40) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_41 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p41) {
  (Fpt_tab_p41) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_42 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p42) {
  (Fpt_tab_p42) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_43 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p43) {
  (Fpt_tab_p43) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_44 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p44) {
  (Fpt_tab_p44) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_45 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p45) {
  (Fpt_tab_p45) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_46 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p46) {
  (Fpt_tab_p46) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_47 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p47) {
  (Fpt_tab_p47) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_48 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p48) {
  (Fpt_tab_p48) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_49 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p49) {
  (Fpt_tab_p49) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_50 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p50) {
  (Fpt_tab_p50) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_51 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p51) {
  (Fpt_tab_p51) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_52 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p52) {
  (Fpt_tab_p52) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_53 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p53) {
  (Fpt_tab_p53) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_54 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p54) {
  (Fpt_tab_p54) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_55 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p55) {
  (Fpt_tab_p55) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_56 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p56) {
  (Fpt_tab_p56) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_57 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p57) {
  (Fpt_tab_p57) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_58 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p58) {
  (Fpt_tab_p58) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_59 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p59) {
  (Fpt_tab_p59) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_60 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p60) {
  (Fpt_tab_p60) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_61 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p61) {
  (Fpt_tab_p61) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_62 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p62) {
  (Fpt_tab_p62) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_63 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p63) {
  (Fpt_tab_p63) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_64 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p64) {
  (Fpt_tab_p64) =
    {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie {Bt_bin_tie (Apps_Fpt_qYI) {Bt_bin_tie #2361183241984621383213 #0}} (Apps_Fpt_RIB)} (Apps_Fpt_O_k)} (Apps_Fpt_Ypj)}
}

// Apps.Fpt.Table.Build.bin_65 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p65) {
  (Fpt_tab_p65) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_66 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p66) {
  (Fpt_tab_p66) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_67 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p67) {
  (Fpt_tab_p67) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_68 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p68) {
  (Fpt_tab_p68) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_69 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p69) {
  (Fpt_tab_p69) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_70 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p70) {
  (Fpt_tab_p70) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_71 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p71) {
  (Fpt_tab_p71) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_72 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p72) {
  (Fpt_tab_p72) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_73 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p73) {
  (Fpt_tab_p73) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_74 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p74) {
  (Fpt_tab_p74) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_75 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p75) {
  (Fpt_tab_p75) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_76 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p76) {
  (Fpt_tab_p76) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_77 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p77) {
  (Fpt_tab_p77) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_78 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p78) {
  (Fpt_tab_p78) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_79 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p79) {
  (Fpt_tab_p79) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_80 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p80) {
  (Fpt_tab_p80) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_81 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p81) {
  (Fpt_tab_p81) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_82 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p82) {
  (Fpt_tab_p82) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_83 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p83) {
  (Fpt_tab_p83) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_84 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p84) {
  (Fpt_tab_p84) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_85 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p85) {
  (Fpt_tab_p85) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_86 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p86) {
  (Fpt_tab_p86) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_87 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p87) {
  (Fpt_tab_p87) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_88 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p88) {
  (Fpt_tab_p88) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_89 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p89) {
  (Fpt_tab_p89) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_90 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p90) {
  (Fpt_tab_p90) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_91 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p91) {
  (Fpt_tab_p91) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_92 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p92) {
  (Fpt_tab_p92) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_93 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p93) {
  (Fpt_tab_p93) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_94 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p94) {
  (Fpt_tab_p94) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_95 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p95) {
  (Fpt_tab_p95) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_96 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p96) {
  (Fpt_tab_p96) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_97 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p97) {
  (Fpt_tab_p97) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_98 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p98) {
  (Fpt_tab_p98) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_99 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p99) {
  (Fpt_tab_p99) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_100 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p100) {
  (Fpt_tab_p100) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_101 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p101) {
  (Fpt_tab_p101) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_102 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p102) {
  (Fpt_tab_p102) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_103 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p103) {
  (Fpt_tab_p103) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_104 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p104) {
  (Fpt_tab_p104) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_105 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p105) {
  (Fpt_tab_p105) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_106 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p106) {
  (Fpt_tab_p106) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_107 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p107) {
  (Fpt_tab_p107) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_108 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p108) {
  (Fpt_tab_p108) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_109 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p109) {
  (Fpt_tab_p109) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_110 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p110) {
  (Fpt_tab_p110) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_111 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p111) {
  (Fpt_tab_p111) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_112 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p112) {
  (Fpt_tab_p112) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_113 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p113) {
  (Fpt_tab_p113) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_114 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p114) {
  (Fpt_tab_p114) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_115 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p115) {
  (Fpt_tab_p115) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_116 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p116) {
  (Fpt_tab_p116) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_117 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p117) {
  (Fpt_tab_p117) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_118 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p118) {
  (Fpt_tab_p118) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_119 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p119) {
  (Fpt_tab_p119) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_120 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p120) {
  (Fpt_tab_p120) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_121 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p121) {
  (Fpt_tab_p121) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_122 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p122) {
  (Fpt_tab_p122) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_123 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p123) {
  (Fpt_tab_p123) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_124 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p124) {
  (Fpt_tab_p124) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_125 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p125) {
  (Fpt_tab_p125) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_126 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p126) {
  (Fpt_tab_p126) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Table.Build.bin_127 : (Data.BaseTree (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.cons _ (Data.BaseTree.Base.2) (List.nil _)))))) (U120))
fun (Fpt_tab_p127) {
  (Fpt_tab_p127) =
    (Fpt_tab_pe)
}

// Apps.Fpt.Kindelia.State.Phase.User.wallet (user: (Apps.Fpt.Kindelia.State.Phase.User)) : (U120)
fun (Fpt_kdl_spuk user) {
  (Fpt_kdl_spuk {Fpt_kdl_spun wallet ~}) =
    wallet
}

// Data.BraunTree.is_empty -(t: Type) (tree: (Data.BraunTree t)) : (Bool)
fun (Data_Brau24H tree) {
  (Data_Brau24H {BrTree_leaf}) =
    {Bool_true}
  (Data_Brau24H ~) =
    {Bool_false}
}

// Data.BraunTree.leaf -(a: Type) : (Data.BraunTree a)
ctr {BrTree_leaf}

// Apps.Fpt.Kindelia.Response.started (block: (U120)) : (Apps.Fpt.Kindelia.Response)
ctr {Fpt_res_star block}

// Maybe.extract -(a: Type) -(b: Type) (m: (Maybe a)) (dflt: b) (f: (_: a) b) : b
fun (Maybe_extMbF m dflt f) {
  (Maybe_extMbF {Maybe_none} dflt ~) =
    dflt
  (Maybe_extMbF {Maybe_some val} ~ f) =
    (!f val)
}

// Pair.match -(a: Type) -(b: Type) (x: (Pair a b)) -(p: (x: (Pair a b)) Type) (new: (fst: a) (snd: b) (p (Pair.new a b fst snd))) : (p x)
fun (Pair_match x new) {
  (Pair_match {T2 fst_ snd_} new) =
    (!(!new fst_) snd_)
}

// Apps.Fpt.Kindelia.Response.state (state: (Apps.Fpt.Kindelia.State)) : (Apps.Fpt.Kindelia.Response)
ctr {Fpt_res_stat state}

// Apps.Fpt.Kindelia.State.update (kdl_state: (Apps.Fpt.Kindelia.State)) (code: (U120)) (current_blk: (U120)) : (Pair (Apps.Fpt.Kindelia.State) (Data.BraunTree (Apps.Fpt.Event)))
fun (Fpt_kdl_supd kdl_state code current_blk) {
  (Fpt_kdl_supd {Fpt_kdl_snew phase start_blk state} code current_blk) =
    dup _0 _1 = start_blk;
    let pair = (Fpt_st_upd state code (U120_sub_YzU current_blk _0));
    dup _2 _3 = pair;
    let state = {T2 {Fpt_kdl_snew phase _1 (Pair_fst _2)} (Pair_snd _3)};
    state
}

// Apps.Fpt.State.Update (state: (Apps.Fpt.State)) (action: (U120)) (frame: (U120)) : (Pair (Apps.Fpt.State) (Data.BraunTree (Apps.Fpt.Event)))
fun (Fpt_st_upd state action frame) {
  (Fpt_st_upd {Fpt_st_new map tab} action frame) =
    dup _2 _3 = action;
    dup _4 _5 = _2;
    dup _0 _1 = tab;
    let data = (Fpt_ac_gdata _3);
    let comm = (Fpt_ac_gcomm _4);
    let id = (Fpt_ac_gid _5);
    dup _8 _9 = id;
    let ent = (Fpt_tbl_get _0 _8);
    let pair = (Fpt_st_updcm {Fpt_st_new map _1} comm data _9 ent frame);
    dup _6 _7 = pair;
    {T2 (Pair_fst _6) (BrTree_mkary (Pair_snd _7))}
}

// Apps.Fpt.Action.get_data (action: (U120)) : (U120)
fun (Fpt_ac_gdata action) {
  (Fpt_ac_gdata action) =
    (Fpt_g_u120 action #16 #8)
}

// Apps.Fpt.U120.get (chunk: (U120)) (pos: (U120)) (size: (U120)) : (U120)
fun (Fpt_g_u120 chunk pos size) {
  (Fpt_g_u120 chunk pos size) =
    let mask = (- (<< #1 size) #1);
    let num = (& (>> chunk pos) mask);
    num
}

// Apps.Fpt.Action.get_comm (action: (U120)) : (U120)
fun (Fpt_ac_gcomm action) {
  (Fpt_ac_gcomm action) =
    (Fpt_g_u120 action #12 #4)
}

// Apps.Fpt.State.Update.command (state: (Apps.Fpt.State)) (command: (U120)) (data: (U120)) (id: (Apps.Fpt.Id)) (ent: (Apps.Fpt.Entity)) (frame: (U120)) : (Pair (Apps.Fpt.State) (Apps.Fpt.Events))
fun (Fpt_st_updcm state command data id ent frame) {
  (Fpt_st_updcm state #0 data id ent frame) =
    (Fpt_st_walk state data ent id frame)
  (Fpt_st_updcm state #1 data id ent frame) =
    (Fpt_st_updit state data id ent frame)
  (Fpt_st_updcm state #2 data id ent frame) =
    (Fpt_st_updsk state id #0 data ent frame)
  (Fpt_st_updcm state #3 data id ent frame) =
    (Fpt_st_updsk state id #1 data ent frame)
  (Fpt_st_updcm state #4 data id ent frame) =
    (Fpt_st_updsk state id #2 data ent frame)
  (Fpt_st_updcm state #5 data id ent frame) =
    (Fpt_st_updsk state id #3 data ent frame)
  (Fpt_st_updcm state #6 data id ent frame) =
    (Fpt_st_updsk state id #4 data ent frame)
  (Fpt_st_updcm state #7 data id ent frame) =
    (Fpt_st_updsk state id #5 data ent frame)
  (Fpt_st_updcm state #8 data id ent frame) =
    (Fpt_st_updsk state id #6 data ent frame)
  (Fpt_st_updcm state #9 data id ent frame) =
    (Fpt_st_updsk state id #7 data ent frame)
  (Fpt_st_updcm state ~ ~ ~ ~ ~) =
    {T2 state {List_nil}}
}

// Apps.Fpt.State.Update.interact (state: (Apps.Fpt.State)) (data: (U120)) (player_id: (Apps.Fpt.Id)) (player: (Apps.Fpt.Entity)) (frame: (U120)) : (Pair (Apps.Fpt.State) (Apps.Fpt.Events))
fun (Fpt_st_updit state data player_id player frame) {
  (Fpt_st_updit state data player_id player frame) =
    dup _10 _11 = player;
    dup _8 _9 = player_id;
    dup _2 _3 = state;
    dup _4 _5 = _2;
    dup _6 _7 = _3;
    dup _0 _1 = data;
    let map = (Fpt_st_gmap _4);
    let pos = (Fpt_pos_new (Fpt_plr_pgx _10) (Fpt_plr_pgy _11));
    let delta = (Fpt_itr_gdir _0);
    let data = (Fpt_itr_gdat _1);
    let target = (Fpt_pos_mod pos delta);
    (Maybe_match target {T2 _5 {List_nil}} @target.value dup _12 _13 = target.value;
    dup _14 _15 = _12;
    let npc = (Fpt_map_get map _13);
    let int = (Fpt_itr_gnpc npc data);
    let res = (!(!(!(!int _6) _8) _14) frame);
    (Fpt_itr_rmat res @~ @res.state @~ @~ @~ @res.events {T2 res.state {List_cons {Fpt_evt_itr (Sigma_fst _15) _9} res.events}} {T2 _7 {List_nil}}))
}

// Apps.Fpt.State.get_map (state: (Apps.Fpt.State)) : (Apps.Fpt.Map)
fun (Fpt_st_gmap state) {
  (Fpt_st_gmap {Fpt_st_new map ~}) =
    map
}

// Apps.Fpt.Interaction.Result.match -(a: Type) (x: (Apps.Fpt.Interaction.Result a)) -(p: (x: (Apps.Fpt.Interaction.Result a)) Type) (new: (val: a) (state: (Apps.Fpt.State)) (player: (Apps.Fpt.Id)) (target: (Apps.Fpt.Pos)) (frame: (U120)) (events: (Apps.Fpt.Events)) (p (Apps.Fpt.Interaction.Result.new a val state player target frame events))) (err: (p (Apps.Fpt.Interaction.Result.err a))) : (p x)
fun (Fpt_itr_rmat x new err) {
  (Fpt_itr_rmat {Fpt_itr_rnew val_ state_ player_ target_ frame_ events_} new ~) =
    (!(!(!(!(!(!new val_) state_) player_) target_) frame_) events_)
  (Fpt_itr_rmat {Fpt_itr_rerr} ~ err) =
    err
}

// Apps.Fpt.Interaction.Result.new -(a: Type) (val: a) (state: (Apps.Fpt.State)) (player: (Apps.Fpt.Id)) (target: (Apps.Fpt.Pos)) (frame: (U120)) (events: (Apps.Fpt.Events)) : (Apps.Fpt.Interaction.Result a)
ctr {Fpt_itr_rnew val state player target frame events}

// Apps.Fpt.Pos.Value.get_x (val: (U120)) : (U120)
fun (Fpt_pos_vgx val) {
  (Fpt_pos_vgx val) =
    (& val #255)
}

// Apps.Fpt.Pos.Value.get_y (val: (U120)) : (U120)
fun (Fpt_pos_vgy val) {
  (Fpt_pos_vgy val) =
    (>> val #8)
}

// U120.less_than (a: (U120)) (b: (U120)) : (Bool)
fun (U120_ltn a b) {
  (U120_ltn a b) =
    (U120_tbool (< a b))
}

// Apps.Fpt.Interaction.Result.err -(a: Type) : (Apps.Fpt.Interaction.Result a)
ctr {Fpt_itr_rerr}

// Apps.Fpt.Player.pos.get_x (player: (Apps.Fpt.Player)) : (U120)
fun (Fpt_plr_pgx player) {
  (Fpt_plr_pgx player) =
    (Fpt_g_u120 player #0 #8)
}

// Apps.Fpt.Interaction.get_direction (data: (U120)) : (Pair (U120) (U120))
fun (Fpt_itr_gdir data) {
  (Fpt_itr_gdir data) =
    (Apps_Fpt_Pxw (& data #3))
}

// Apps.Fpt.Interaction.get_direction.aux (val: (U120)) : (Pair (U120) (U120))
fun (Apps_Fpt_Pxw val) {
  (Apps_Fpt_Pxw #0) =
    {T2 #0 #1329227995784915872903807060280344575}
  (Apps_Fpt_Pxw #1) =
    {T2 #1329227995784915872903807060280344575 #0}
  (Apps_Fpt_Pxw #2) =
    {T2 #0 #1}
  (Apps_Fpt_Pxw #0) =
    {T2 #1 #0}
  (Apps_Fpt_Pxw ~) =
    {T2 #0 #0}
}

// Sigma.fst -(a: Type) -(b: (_: a) Type) (s: (Sigma a b)) : a
fun (Sigma_fst s) {
  (Sigma_fst {Sigma_new x ~}) =
    x
}

// Sigma.new -(a: Type) -(b: (_: a) Type) (fst: a) (snd: (b fst)) : (Sigma a b)
ctr {Sigma_new fst snd}

// Apps.Fpt.Pos.new (x: (U120)) (y: (U120)) : (Apps.Fpt.Pos)
fun (Fpt_pos_new x y) {
  (Fpt_pos_new x y) =
    dup _2 _3 = x;
    dup _0 _1 = y;
    let x.val = (% _2 #160);
    dup _10 _11 = x.val;
    dup _12 _13 = _10;
    let y.val = (% _0 #160);
    dup _6 _7 = y.val;
    dup _8 _9 = _6;
    let e0 = {U120_mod_ilt _3 #160 (Fpt_pos_160n)};
    dup _4 _5 = e0;
    let e1 = {U120_mod_ilt _1 #160 (Fpt_pos_160n)};
    {Sigma_new (Fpt_pos_vnew _11 _7) {T2 (Fpt_pos_vivx _12 _8 _4) (Fpt_pos_vivy _13 _9 _5 e1)}}
}

// Pos.160_is_not_0 : (Not (Equal (U120) (U120.new 0 160) (U120.new 0 0)))
fun (Fpt_pos_160n) {
  (Fpt_pos_160n) =
    @absurd (Equal_rewrt absurd {T0})
}

// Equal.rewrite -(t: Type) -(a: t) -(b: t) (e: (Equal t a b)) -(p: (_: t) Type) (x: (p a)) : (p b)
fun (Equal_rewrt e x) {
  (Equal_rewrt {Equal_refl} x) =
    x
}

// Equal.refl -(t: Type) -(a: t) : (Equal t a a)
ctr {Equal_refl}

// Apps.Fpt.Pos.Value.IsValid.x (x: (U120)) (y: (U120)) (e0: (Equal (Bool) (U120.less_than x (U120.new 0 160)) (Bool.true))) : (Equal (Bool) (U120.less_than (U120.bitwise_and (U120.bitwise_or (U120.shift_left y (U120.new 0 8)) x) (U120.new 0 255)) (U120.new 0 160)) (Bool.true))
fun (Fpt_pos_vivx x y e0) {
  (Fpt_pos_vivx x y e0) =
    dup _2 _3 = x;
    dup _4 _5 = _2;
    dup _6 _7 = _3;
    dup _8 _9 = _4;
    dup _0 _1 = y;
    let e1 = {U120_and_po (<< _0 #8) _5 #255};
    let e2 = {U120_sl_mz _1 #8};
    let e1.1 = (Equal_rewrt e2 e1);
    let e3 = {U120_or_zl (& _6 #255)};
    let e1.2 = (Equal_rewrt e3 e1.1);
    let e4 = {U120_and_lea _7 #255};
    let e5 = {U120_ile_clt (& _8 #255) _9 #160 e4 e0};
    let e5.1 = (Equal_rewrt (Equal_mirr e1.2) e5);
    e5.1
}

// U120.shift_left.mask_zero (a: (U120)) (s: (U120)) : (let a = (U120.bitwise_and (U120.shift_left a s) (U120.sub (U120.shift_left (U120.new 0 1) s) (U120.new 0 1))); (let b = (U120.new 0 0); (Equal (U120) a b)))
ctr {U120_sl_mz a s}

// U120.and.less_equal_a (a: (U120)) (b: (U120)) : (U120.IsLessEqual (U120.bitwise_and a b) a)
ctr {U120_and_lea a b}

// U120.less_equal (a: (U120)) (b: (U120)) : (Bool)
fun (U120_lte a b) {
  (U120_lte a b) =
    (U120_tbool (<= a b))
}

// U120.and.pass_or (a: (U120)) (b: (U120)) (c: (U120)) : (let x = (U120.bitwise_and (U120.bitwise_or a b) c); (let y = (U120.bitwise_or (U120.bitwise_and a c) (U120.bitwise_and b c)); (Equal (U120) x y)))
ctr {U120_and_po a b c}

// U120.or.zero_left (a: (U120)) : (Equal (U120) (U120.bitwise_or (U120.new 0 0) a) a)
ctr {U120_or_zl a}

// U120.IsLessEqual.chain.less_than (a: (U120)) (b: (U120)) (c: (U120)) (e0: (U120.IsLessEqual a b)) (e1: (U120.IsLessThan b c)) : (U120.IsLessThan a c)
ctr {U120_ile_clt a b c e0 e1}

// Equal.mirror -(t: Type) -(a: t) -(b: t) (e: (Equal t a b)) : (Equal t b a)
fun (Equal_mirr e) {
  (Equal_mirr {Equal_refl}) =
    {Equal_refl}
}

// Apps.Fpt.Pos.Value.IsValid.y (x: (U120)) (y: (U120)) (e0: (Equal (Bool) (U120.less_than x (U120.new 0 160)) (Bool.true))) (e1: (Equal (Bool) (U120.less_than y (U120.new 0 160)) (Bool.true))) : (Equal (Bool) (U120.less_than (U120.shift_right (U120.bitwise_or (U120.shift_left y (U120.new 0 8)) x) (U120.new 0 8)) (U120.new 0 160)) (Bool.true))
fun (Fpt_pos_vivy x y e0 e1) {
  (Fpt_pos_vivy x y e0 e1) =
    dup _8 _9 = x;
    dup _10 _11 = _8;
    dup _0 _1 = y;
    dup _2 _3 = _0;
    dup _4 _5 = _1;
    dup _6 _7 = _2;
    let e2 = {U120_ilt_clt _9 #160 #256 e0 {Equal_refl}};
    let e3 = {U120_sr_zlel _10 #8 e2};
    let e4 = {U120_sr_psor (<< _3 #8) _11 #8};
    let e4.1 = (Equal_rewrt e3 e4);
    let e5 = {U120_or_zr (>> (<< _4 #8) #8)};
    let e4.2 = (Equal_rewrt e5 e4.1);
    let e6 = {U120_sr_slle _5 #8};
    let e7 = {U120_ile_clt (>> (<< _6 #8) #8) _7 #160 e6 e1};
    let e7.1 = (Equal_rewrt (Equal_mirr e4.2) e7);
    e7.1
}

// U120.shift_right.pass_or (a: (U120)) (b: (U120)) (c: (U120)) : (let x = (U120.shift_right (U120.bitwise_or a b) c); (let y = (U120.bitwise_or (U120.shift_right a c) (U120.shift_right b c)); (Equal (U120) x y)))
ctr {U120_sr_psor a b c}

// U120.or.zero_right (a: (U120)) : (Equal (U120) (U120.bitwise_or a (U120.new 0 0)) a)
ctr {U120_or_zr a}

// U120.IsLessThan.chain.less_than (a: (U120)) (b: (U120)) (c: (U120)) (e0: (U120.IsLessThan a b)) (e1: (U120.IsLessThan b c)) : (U120.IsLessThan a c)
ctr {U120_ilt_clt a b c e0 e1}

// U120.shift_right.zero_if_less_equal_length (a: (U120)) (b: (U120)) (e0: (Equal (Bool) (U120.less_than a (U120.shift_left (U120.new 0 1) b)) (Bool.true))) : (Equal (U120) (U120.shift_right a b) (U120.new 0 0))
ctr {U120_sr_zlel a b e0}

// U120.shift_right.shl_less_equal (a: (U120)) (b: (U120)) : (Equal (Bool) (U120.less_equal (U120.shift_right (U120.shift_left a b) b) a) (Bool.true))
ctr {U120_sr_slle a b}

// U120.mod.is_less_than (a: (U120)) (b: (U120)) (e: (Not (Equal (U120) b (U120.new 0 0)))) : (U120.IsLessThan (U120.mod a b) b)
ctr {U120_mod_ilt a b e}

// Apps.Fpt.Pos.Value.new (x: (U120)) (y: (U120)) : _
fun (Fpt_pos_vnew x y) {
  (Fpt_pos_vnew x y) =
    (| (<< y #8) x)
}

// Apps.Fpt.Map.get (map: (Apps.Fpt.Map)) (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Id)
fun (Fpt_map_get map pos) {
  (Fpt_map_get map pos) =
    let keys = (Fpt_map_getc map pos);
    (Pair_match keys @keys.fst @keys.snd (Fpt_map_gtil keys.fst keys.snd))
}

// Apps.Fpt.Map.get.chunk (map: (Apps.Fpt.Map)) (pos: (Apps.Fpt.Pos)) : (Pair (U120) (U120))
fun (Fpt_map_getc map pos) {
  (Fpt_map_getc map pos) =
    let keys = (Fpt_map_kfps pos);
    dup _0 _1 = keys;
    let chunk = (Bt_get (Fpt_map_base) (Pair_fst _0) map);
    let idx = (Pair_snd _1);
    {T2 chunk idx}
}

// Apps.Fpt.Map.Key.from_pos (pos: (Apps.Fpt.Pos)) : (Pair (Apps.Fpt.Map.Key) (U120))
fun (Fpt_map_kfps pos) {
  (Fpt_map_kfps pos) =
    dup _0 _1 = pos;
    let x = (Fpt_pos_getx _0);
    dup _2 _3 = x;
    let y = (Fpt_pos_gety _1);
    let key = (U120_low (+ (/ _2 #10) (* y #16)));
    {T2 (Bt_key_fu60 (Fpt_map_base) #2560 (% key #2560)) (% _3 #10)}
}

// Data.BaseTree.Key.from_u60.base5 (t: (List (Data.BaseTree.Base))) (q: U60) (m: U60) (n: U60) : (Data.BaseTree.Base.Qui (Data.BaseTree.Key t))
fun (Bt_key_fu605 t q m n) {
  (Bt_key_fu605 t #0 m n) =
    {Bt_base_q0 (Bt_key_fu60 t m n)}
  (Bt_key_fu605 t #1 m n) =
    {Bt_base_q1 (Bt_key_fu60 t m n)}
  (Bt_key_fu605 t #2 m n) =
    {Bt_base_q2 (Bt_key_fu60 t m n)}
  (Bt_key_fu605 t #3 m n) =
    {Bt_base_q3 (Bt_key_fu60 t m n)}
  (Bt_key_fu605 t #4 m n) =
    {Bt_base_q4 (Bt_key_fu60 t m n)}
}

// Data.BaseTree.Key.from_u60.base2 (t: (List (Data.BaseTree.Base))) (q: U60) (m: U60) (n: U60) : (Data.BaseTree.Base.Bin (Data.BaseTree.Key t))
fun (Bt_key_fu602 t q m n) {
  (Bt_key_fu602 t #0 m n) =
    {Bt_base_b0 (Bt_key_fu60 t m n)}
  (Bt_key_fu602 t #1 m n) =
    {Bt_base_b1 (Bt_key_fu60 t m n)}
}

fun (Bt_key_fuJRS x0 x1 x2 x3) {
  (Bt_key_fuJRS {Bt_base2} t m n) =
    dup _0 _1 = n;
    let m = (/ m #2);
    dup _4 _5 = m;
    dup _6 _7 = _4;
    let d = (/ _0 _5);
    dup _2 _3 = d;
    let n = (- _1 (* _2 _6));
    (Bt_key_fu602 t _3 _7 n)
  (Bt_key_fuJRS {Bt_base5} t m n) =
    dup _0 _1 = n;
    let m = (/ m #5);
    dup _4 _5 = m;
    dup _6 _7 = _4;
    let d = (/ _0 _5);
    dup _2 _3 = d;
    let n = (- _1 (* _2 _6));
    (Bt_key_fu605 t _3 _7 n)
}

// Data.BaseTree.Key.from_u60 (bases: (List (Data.BaseTree.Base))) (m: U60) (n: U60) : (Data.BaseTree.Key bases)
fun (Bt_key_fu60 bases m n) {
  (Bt_key_fu60 {List_nil} ~ ~) =
    {T0}
  (Bt_key_fu60 {List_cons .0 t} m n) =
    (Bt_key_fuJRS .0 t m n)
}

// Data.BaseTree.Base.Qui.1 -(r: Type) (pred: r) : (Data.BaseTree.Base.Qui r)
ctr {Bt_base_q1 pred}

// Data.BaseTree.Base.Qui.0 -(r: Type) (pred: r) : (Data.BaseTree.Base.Qui r)
ctr {Bt_base_q0 pred}

// Data.BaseTree.Base.Qui.2 -(r: Type) (pred: r) : (Data.BaseTree.Base.Qui r)
ctr {Bt_base_q2 pred}

// Data.BaseTree.Base.Bin.0 -(r: Type) (pred: r) : (Data.BaseTree.Base.Bin r)
ctr {Bt_base_b0 pred}

// Data.BaseTree.Base.Bin.1 -(r: Type) (pred: r) : (Data.BaseTree.Base.Bin r)
ctr {Bt_base_b1 pred}

// Data.BaseTree.Base.Qui.3 -(r: Type) (pred: r) : (Data.BaseTree.Base.Qui r)
ctr {Bt_base_q3 pred}

// Data.BaseTree.Base.Qui.4 -(r: Type) (pred: r) : (Data.BaseTree.Base.Qui r)
ctr {Bt_base_q4 pred}

// Apps.Fpt.Pos.get_x (pos: (Apps.Fpt.Pos)) : (U120)
fun (Fpt_pos_getx pos) {
  (Fpt_pos_getx pos) =
    (& (Sigma_fst pos) #255)
}

// Apps.Fpt.Pos.get_y (pos: (Apps.Fpt.Pos)) : (U120)
fun (Fpt_pos_gety pos) {
  (Fpt_pos_gety pos) =
    (>> (Sigma_fst pos) #8)
}

// Apps.Fpt.Map.get_tile (chunk: (U120)) (idx: (U120)) : (Apps.Fpt.Id)
fun (Fpt_map_gtil chunk idx) {
  (Fpt_map_gtil chunk idx) =
    (& (>> chunk (* idx #12)) #4095)
}

// Data.BaseTree.get -(val: Type) (bases: (List (Data.BaseTree.Base))) (key: (Data.BaseTree.Key bases)) (map: (Data.BaseTree bases val)) : val
fun (Bt_get bases key map) {
  (Bt_get {List_cons h t} key map) =
    (Bt_get0 h t key map)
}

// Data.BaseTree.get.aux -(val: Type) (head: (Data.BaseTree.Base)) (tail: (List (Data.BaseTree.Base))) (key: (Data.BaseTree.Key (List.cons _ head tail))) (map: (Data.BaseTree (List.cons _ head tail) val)) : val
fun (Bt_get0 head tail key map) {
  (Bt_get0 {Bt_base2} {List_nil} {Bt_base_b0 ~} {Bt_bin_tie b0 ~}) =
    b0
  (Bt_get0 {Bt_base2} {List_nil} {Bt_base_b1 ~} {Bt_bin_tie ~ b1}) =
    b1
  (Bt_get0 {Bt_base5} {List_nil} {Bt_base_q0 ~} {Bt_qui_tie b0 ~ ~ ~ ~}) =
    b0
  (Bt_get0 {Bt_base5} {List_nil} {Bt_base_q1 ~} {Bt_qui_tie ~ b1 ~ ~ ~}) =
    b1
  (Bt_get0 {Bt_base5} {List_nil} {Bt_base_q2 ~} {Bt_qui_tie ~ ~ b2 ~ ~}) =
    b2
  (Bt_get0 {Bt_base5} {List_nil} {Bt_base_q3 ~} {Bt_qui_tie ~ ~ ~ b3 ~}) =
    b3
  (Bt_get0 {Bt_base5} {List_nil} {Bt_base_q4 ~} {Bt_qui_tie ~ ~ ~ ~ b4}) =
    b4
  (Bt_get0 {Bt_base2} {List_cons h c} {Bt_base_b0 y} {Bt_bin_tie b0 ~}) =
    (Bt_get0 h c y b0)
  (Bt_get0 {Bt_base2} {List_cons h c} {Bt_base_b1 y} {Bt_bin_tie ~ b1}) =
    (Bt_get0 h c y b1)
  (Bt_get0 {Bt_base5} {List_cons h c} {Bt_base_q0 y} {Bt_qui_tie b0 ~ ~ ~ ~}) =
    (Bt_get0 h c y b0)
  (Bt_get0 {Bt_base5} {List_cons h c} {Bt_base_q1 y} {Bt_qui_tie ~ b1 ~ ~ ~}) =
    (Bt_get0 h c y b1)
  (Bt_get0 {Bt_base5} {List_cons h c} {Bt_base_q2 y} {Bt_qui_tie ~ ~ b2 ~ ~}) =
    (Bt_get0 h c y b2)
  (Bt_get0 {Bt_base5} {List_cons h c} {Bt_base_q3 y} {Bt_qui_tie ~ ~ ~ b3 ~}) =
    (Bt_get0 h c y b3)
  (Bt_get0 {Bt_base5} {List_cons h c} {Bt_base_q4 y} {Bt_qui_tie ~ ~ ~ ~ b4}) =
    (Bt_get0 h c y b4)
}

// Apps.Fpt.Interaction.get_npc (id: (U120)) (data: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_gnpc id data) {
  (Fpt_itr_gnpc #2 data) =
    (Fpt_npc_fcom data)
  (Fpt_itr_gnpc #128 ~) =
    let spawn_points = {List_cons (Fpt_pos_new #26 #154) {List_cons (Fpt_pos_new #26 #155) {List_cons (Fpt_pos_new #25 #153) {List_nil}}}};
    let hp = #100;
    let bat_id = #512;
    (Fpt_npc_bcve hp spawn_points bat_id)
  (Fpt_itr_gnpc #129 ~) =
    let spawn_points = {List_cons (Fpt_pos_new #36 #132) {List_cons (Fpt_pos_new #36 #133) {List_cons (Fpt_pos_new #37 #131) {List_nil}}}};
    let hp = #100;
    let bat_id = #513;
    (Fpt_npc_bcve hp spawn_points bat_id)
  (Fpt_itr_gnpc #130 ~) =
    let spawn_points = {List_cons (Fpt_pos_new #49 #136) {List_cons (Fpt_pos_new #50 #137) {List_cons (Fpt_pos_new #51 #138) {List_nil}}}};
    let hp = #100;
    let bat_id = #514;
    (Fpt_npc_bcve hp spawn_points bat_id)
  (Fpt_itr_gnpc #134 ~) =
    (Fpt_npc_phnx)
  (Fpt_itr_gnpc #256 data) =
    (Fpt_npc_fshp data)
  (Fpt_itr_gnpc #257 data) =
    (Fpt_npc_fshp data)
  (Fpt_itr_gnpc #258 data) =
    (Fpt_npc_fshp data)
  (Fpt_itr_gnpc #259 data) =
    (Fpt_npc_fshp data)
  (Fpt_itr_gnpc #260 data) =
    (Fpt_npc_fshp data)
  (Fpt_itr_gnpc #261 ~) =
    (Apps_Fpt_MMz)
  (Fpt_itr_gnpc #262 ~) =
    (Apps_Fpt_MMz)
  (Fpt_itr_gnpc #263 ~) =
    (Apps_Fpt_MMz)
  (Fpt_itr_gnpc #264 ~) =
    (Apps_Fpt_MMz)
  (Fpt_itr_gnpc #314 ~) =
    (Fpt_npc_ocht)
  (Fpt_itr_gnpc #315 ~) =
    (Fpt_npc_oitr #0 #314)
  (Fpt_itr_gnpc #316 ~) =
    (Fpt_npc_oitr #1 #314)
  (Fpt_itr_gnpc #317 ~) =
    (Fpt_npc_oitr #2 #314)
}

// Apps.Fpt.Npc.ignis : (Apps.Fpt.Interaction (Unit))
fun (Apps_Fpt_MMz) {
  (Apps_Fpt_MMz) =
    let id = #30;
    (Fpt_itr_ncol id)
}

// Apps.Fpt.Interaction.npc.collect (item: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_ncol item) {
  (Fpt_itr_ncol item) =
    (Fpt_itr_bind (Fpt_itr_pget) @player let slot = (Fpt_plr_sksl player);
    (Fpt_itr_bind (Fpt_itr_chan slot) @~ (Fpt_itr_bind (Fpt_itr_skad item) @~ (Fpt_itr_pure {T0}))))
}

// Apps.Fpt.Player.skills.has_slot (player: (Apps.Fpt.Player)) : (Maybe (U120))
fun (Fpt_plr_sksl player) {
  (Fpt_plr_sksl player) =
    (Apps_Fpt_Mhd player #0)
}

// Apps.Fpt.Player.skills.has_slot.go (play: (Apps.Fpt.Player)) (slot: (U120)) : (Maybe (U120))
fun (Apps_Fpt_Mhd play slot) {
  (Apps_Fpt_Mhd ~ #7) =
    {Maybe_none}
  (Apps_Fpt_Mhd play slot) =
    dup _2 _3 = slot;
    dup _4 _5 = _2;
    dup _0 _1 = play;
    let skill = (Fpt_plr_skg _0 _3);
    (Bool_if (U120_is0 skill) {Maybe_some _4} (Apps_Fpt_Mhd _1 (U120_inc _5)))
}

// U120.is_zero (n: (U120)) : (Bool)
fun (U120_is0 n) {
  (U120_is0 #0) =
    {Bool_true}
  (U120_is0 ~) =
    {Bool_false}
}

// Apps.Fpt.Player.skills.get (player: (Apps.Fpt.Player)) (slot: (U120)) : (U120)
fun (Fpt_plr_skg player slot) {
  (Fpt_plr_skg player slot) =
    (Fpt_g_u120 player (+ #71 (* slot #7)) #7)
}

// Apps.Fpt.Interaction.skill.add (skill: (U120)) : (Apps.Fpt.Interaction (Bool))
fun (Fpt_itr_skad skill) {
  (Fpt_itr_skad skill) =
    dup _0 _1 = skill;
    (Fpt_itr_bind (Fpt_itr_pget) @player let result = (Fpt_plr_sksl player);
    let none = (Fpt_itr_pure {Bool_false});
    let some = @x dup _2 _3 = x;
    let func = @player (Fpt_plr_skat player _0 _2);
    (Fpt_itr_bind (Fpt_itr_pmut func) @~ (Fpt_itr_bind (Fpt_itr_iead _1 _3) @~ (Fpt_itr_pure {Bool_true})));
    (Maybe_extMbF result none some))
}

// Apps.Fpt.Player.skills.add_at (player: (Apps.Fpt.Player)) (skill: (U120)) (slot: (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_skat player skill slot) {
  (Fpt_plr_skat player skill slot) =
    let skill_at = (<< skill (+ #71 (* #7 slot)));
    let new_player = (| player skill_at);
    new_player
}

// Apps.Fpt.Interaction.player.get : (Apps.Fpt.Interaction (Apps.Fpt.Player))
fun (Fpt_itr_pget) {
  (Fpt_itr_pget) =
    (Fpt_itr_bind (Fpt_itr_pgid) @id (Fpt_itr_bind (Fpt_itr_tblg) @table let player = (Fpt_tbl_get table id);
    (Fpt_itr_pure player)))
}

// Apps.Fpt.Interaction.bind -(a: Type) -(b: Type) (itr: (Apps.Fpt.Interaction a)) (next: (_: a) (Apps.Fpt.Interaction b)) : (Apps.Fpt.Interaction b)
fun (Fpt_itr_bind itr next) {
  (Fpt_itr_bind itr next) =
    @state @player @target @frame let r_a = (!(!(!(!itr state) player) target) frame);
    (Fpt_itr_rmat r_a @r_a.val @r_a.state @r_a.player @r_a.target @r_a.frame @r_a.events let r_b = (!(!(!(!(!next r_a.val) r_a.state) r_a.player) r_a.target) r_a.frame);
    (Fpt_itr_rmat r_b @r_b.val @r_b.state @r_b.player @r_b.target @r_b.frame @r_b.events let events = (List_concat r_a.events r_b.events);
    let result = {Fpt_itr_rnew r_b.val r_b.state r_b.player r_b.target r_b.frame events};
    result {Fpt_itr_rerr}) {Fpt_itr_rerr})
}

// List.concat -(a: Type) (xs: (List a)) (ys: (List a)) : (List a)
fun (List_concat xs ys) {
  (List_concat {List_nil} ys) =
    ys
  (List_concat {List_cons head tail} ys) =
    {List_cons head (List_concat tail ys)}
}

// Apps.Fpt.Interaction.player.get_id : (Apps.Fpt.Interaction (Apps.Fpt.Id))
fun (Fpt_itr_pgid) {
  (Fpt_itr_pgid) =
    @state @player dup _0 _1 = player;
    @target @frame {Fpt_itr_rnew _0 state _1 target frame {List_nil}}
}

// Apps.Fpt.Table.get (map: (Apps.Fpt.Table)) (id: (Apps.Fpt.Id)) : (Apps.Fpt.Entity)
fun (Fpt_tbl_get map id) {
  (Fpt_tbl_get map id) =
    (Bt_get (Fpt_tbl_bses) (Fpt_tbl_fid id) map)
}

// Apps.Fpt.Table.Key.from_id (id: (U120)) : (Apps.Fpt.Table.Key)
fun (Fpt_tbl_fid id) {
  (Fpt_tbl_fid id) =
    (Fpt_tbl_fid0 (Fpt_tbl_bses) id)
}

fun (Fpt_tbl_fYqi x0 x1 x2) {
  (Fpt_tbl_fYqi {Bt_base2} t id) =
    dup _0 _1 = id;
    (Fpt_tbl_fid1 t (/ _0 #2) (% _1 #2))
}

// Apps.Fpt.Table.Key.from_id.aux0 (bases: (List (Data.BaseTree.Base))) (id: (U120)) : (Data.BaseTree.Key bases)
fun (Fpt_tbl_fid0 bases id) {
  (Fpt_tbl_fid0 {List_nil} ~) =
    {T0}
  (Fpt_tbl_fid0 {List_cons .0 t} id) =
    (Fpt_tbl_fYqi .0 t id)
}

// Apps.Fpt.Table.Key.from_id.aux1 (bases: (List (Data.BaseTree.Base))) (id: (U120)) (b: (U120)) : (Data.BaseTree.Base.Bin (Data.BaseTree.Key bases))
fun (Fpt_tbl_fid1 bases id b) {
  (Fpt_tbl_fid1 bases id #0) =
    {Bt_base_b0 (Fpt_tbl_fid0 bases id)}
  (Fpt_tbl_fid1 bases id #1) =
    {Bt_base_b1 (Fpt_tbl_fid0 bases id)}
}

// Apps.Fpt.Interaction.pure -(a: Type) (x: a) : (Apps.Fpt.Interaction a)
fun (Fpt_itr_pure x) {
  (Fpt_itr_pure x) =
    @state @player @target @frame {Fpt_itr_rnew x state player target frame {List_nil}}
}

// Apps.Fpt.Interaction.table.get : (Apps.Fpt.Interaction (Apps.Fpt.Table))
fun (Fpt_itr_tblg) {
  (Fpt_itr_tblg) =
    @state dup _0 _1 = state;
    @player @target @frame {Fpt_itr_rnew (Fpt_st_gtbl _0) _1 player target frame {List_nil}}
}

// Apps.Fpt.State.get_table (state: (Apps.Fpt.State)) : (Apps.Fpt.Table)
fun (Fpt_st_gtbl state) {
  (Fpt_st_gtbl {Fpt_st_new ~ tbl}) =
    tbl
}

// Apps.Fpt.Interaction.player.mut (func: (_: (Apps.Fpt.Player)) (Apps.Fpt.Player)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_pmut func) {
  (Fpt_itr_pmut func) =
    (Fpt_itr_bind (Fpt_itr_pgid) @id let func = @table (Fpt_tbl_mut table func id);
    (Fpt_itr_bind (Fpt_itr_tblm func) @~ (Fpt_itr_pure {T0})))
}

// Apps.Fpt.Interaction.table.mut (func: (_: (Apps.Fpt.Table)) (Apps.Fpt.Table)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_tblm func) {
  (Fpt_itr_tblm func) =
    @state dup _0 _1 = state;
    @player @target @frame let table = (Fpt_st_gtbl _0);
    let map = (Fpt_st_gmap _1);
    let state = {Fpt_st_new map (!func table)};
    {Fpt_itr_rnew {T0} state player target frame {List_nil}}
}

// Apps.Fpt.Table.mut (table: (Apps.Fpt.Table)) (func: (_: (Apps.Fpt.Entity)) (Apps.Fpt.Entity)) (id: (Apps.Fpt.Id)) : (Apps.Fpt.Table)
fun (Fpt_tbl_mut table func id) {
  (Fpt_tbl_mut table func id) =
    (Bt_mut (Fpt_tbl_bses) table (Fpt_tbl_fid id) func)
}

fun (Bt_mut0_ x0 x1 x2 x3 x4 x5) {
  (Bt_mut0_ {Bt_base2} tail b0 b1 key func) =
    {Bt_bin_tie (Bt_mut tail b0 key func) b1}
}

fun (Bt_mut1_ x0 x1 x2 x3 x4 x5) {
  (Bt_mut1_ {Bt_base2} tail b0 b1 key func) =
    {Bt_bin_tie b0 (Bt_mut tail b1 key func)}
}

fun (Bt_mut2_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut2_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) =
    {Bt_qui_tie (Bt_mut tail b0 key func) b1 b2 b3 b4}
}

fun (Bt_mut3_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut3_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) =
    {Bt_qui_tie b0 (Bt_mut tail b1 key func) b2 b3 b4}
}

fun (Bt_mut4_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut4_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) =
    {Bt_qui_tie b0 b1 (Bt_mut tail b2 key func) b3 b4}
}

fun (Bt_mut5_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut5_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) =
    {Bt_qui_tie b0 b1 b2 (Bt_mut tail b3 key func) b4}
}

fun (Bt_mut6_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut6_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) =
    {Bt_qui_tie b0 b1 b2 b3 (Bt_mut tail b4 key func)}
}

// Data.BaseTree.mut -(val: Type) (bases: (List (Data.BaseTree.Base))) (map: (Data.BaseTree bases val)) (key: (Data.BaseTree.Key bases)) (func: (_: val) val) : (Data.BaseTree bases val)
fun (Bt_mut bases map key func) {
  (Bt_mut {List_nil} end ~ func) =
    (!func end)
  (Bt_mut {List_cons .0 tail} {Bt_bin_tie b0 b1} {Bt_base_b0 key} func) =
    (Bt_mut0_ .0 tail b0 b1 key func)
  (Bt_mut {List_cons .0 tail} {Bt_bin_tie b0 b1} {Bt_base_b1 key} func) =
    (Bt_mut1_ .0 tail b0 b1 key func)
  (Bt_mut {List_cons .0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q0 key} func) =
    (Bt_mut2_ .0 tail b0 b1 b2 b3 b4 key func)
  (Bt_mut {List_cons .0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q1 key} func) =
    (Bt_mut3_ .0 tail b0 b1 b2 b3 b4 key func)
  (Bt_mut {List_cons .0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q2 key} func) =
    (Bt_mut4_ .0 tail b0 b1 b2 b3 b4 key func)
  (Bt_mut {List_cons .0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q3 key} func) =
    (Bt_mut5_ .0 tail b0 b1 b2 b3 b4 key func)
  (Bt_mut {List_cons .0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q4 key} func) =
    (Bt_mut6_ .0 tail b0 b1 b2 b3 b4 key func)
}

// Apps.Fpt.Interaction.item.event_add (item: (U120)) (slot: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_iead item slot) {
  (Fpt_itr_iead item slot) =
    (Fpt_itr_bind (Fpt_itr_pgxy) @pos let event = {Fpt_evt_itad (Sigma_fst pos) item slot};
    (Fpt_itr_evad event))
}

// Apps.Fpt.Interaction.player.get_pos : (Apps.Fpt.Interaction (Apps.Fpt.Pos))
fun (Fpt_itr_pgxy) {
  (Fpt_itr_pgxy) =
    (Fpt_itr_bind (Fpt_itr_pgid) @id (Fpt_itr_bind (Fpt_itr_tblg) @table let player = (Fpt_tbl_get table id);
    dup _0 _1 = player;
    let pos = (Fpt_pos_new (Fpt_plr_pgx _0) (Fpt_plr_pgy _1));
    (Fpt_itr_pure pos)))
}

// Apps.Fpt.Player.pos.get_y (player: (Apps.Fpt.Player)) : (U120)
fun (Fpt_plr_pgy player) {
  (Fpt_plr_pgy player) =
    (Fpt_g_u120 player #8 #8)
}

// Apps.Fpt.Event.item_add (pos: (U120)) (item: (U120)) (slot: (U120)) : (Apps.Fpt.Event)
ctr {Fpt_evt_itad pos item slot}

// Apps.Fpt.Interaction.event.add (event: (Apps.Fpt.Event)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_evad event) {
  (Fpt_itr_evad event) =
    @state @player @target @frame {Fpt_itr_rnew {T0} state player target frame {List_cons event {List_nil}}}
}

// Apps.Fpt.Interaction.check_and_next -(a: Type) (mbe: (Maybe a)) : (Apps.Fpt.Interaction a)
fun (Fpt_itr_chan mbe) {
  (Fpt_itr_chan {Maybe_none}) =
    (Fpt_itr_fail)
  (Fpt_itr_chan {Maybe_some val}) =
    (Fpt_itr_pure val)
}

// Apps.Fpt.Interaction.fail -(a: Type) : (Apps.Fpt.Interaction a)
fun (Fpt_itr_fail) {
  (Fpt_itr_fail) =
    @~ @~ @~ @~ {Fpt_itr_rerr}
}

// Apps.Fpt.Npc.fire_combiner (data: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_npc_fcom data) {
  (Fpt_npc_fcom data) =
    let drag = #32;
    dup _12 _13 = drag;
    dup _14 _15 = _12;
    let feather = #34;
    dup _8 _9 = feather;
    dup _10 _11 = _8;
    let stone = #36;
    dup _4 _5 = stone;
    dup _6 _7 = _4;
    let bat = #37;
    dup _0 _1 = bat;
    dup _2 _3 = _0;
    let fireball = #1;
    let flame_ring = #2;
    let flamethrower = #3;
    let flame_arrow = #4;
    let c0 = {T2 {List_cons _13 {List_cons _5 {List_cons _1 {List_nil}}}} fireball};
    let c1 = {T2 {List_cons _2 {List_cons _6 {List_cons _9 {List_nil}}}} flame_ring};
    let c2 = {T2 {List_cons _14 {List_cons _7 {List_cons _10 {List_nil}}}} flamethrower};
    let c3 = {T2 {List_cons _3 {List_cons _15 {List_cons _11 {List_nil}}}} flame_arrow};
    let shop = (Fpt_itr_gcom {List_cons c0 {List_cons c1 {List_cons c2 {List_cons c3 {List_nil}}}}});
    (!shop data)
}

// Apps.Fpt.Interaction.npc.generic_combine (combinations: (List (Pair (List (Apps.Fpt.Item)) (Apps.Fpt.Item)))) : (_: (U120)) (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_gcom combinations) {
  (Fpt_itr_gcom combinations) =
    @data let combination = (List_at combinations (U120_to_nat data));
    let not_found = (Fpt_itr_pass);
    let found = @combination dup _0 _1 = combination;
    (Fpt_itr_ncom (Pair_fst _0) (Pair_snd _1));
    (Maybe_extMbF combination not_found found)
}

// List.at -(a: Type) (xs: (List a)) (idx: (Nat)) : (Maybe a)
fun (List_at xs idx) {
  (List_at {List_nil} ~) =
    {Maybe_none}
  (List_at {List_cons head ~} {Nat_zero}) =
    {Maybe_some head}
  (List_at {List_cons ~ tail} {Nat_succ pred}) =
    (List_at tail pred)
}

// Nat.succ (pred: (Nat)) : (Nat)
ctr {Nat_succ pred}

// Nat.zero : (Nat)
ctr {Nat_zero}

// U120.to_nat (num: (U120)) : (Nat)
fun (U120_to_nat num) {
  (U120_to_nat #0) =
    {Nat_zero}
  (U120_to_nat n) =
    {Nat_succ (U120_to_nat (- n #1))}
}

// Apps.Fpt.Interaction.pass : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_pass) {
  (Fpt_itr_pass) =
    @state @player @target @frame {Fpt_itr_rnew {T0} state player target frame {List_nil}}
}

// Apps.Fpt.Interaction.npc.combine (items: (List (U120))) (skill: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_ncom items skill) {
  (Fpt_itr_ncom items skill) =
    (Fpt_itr_bind (Fpt_itr_pget) @player let f = @item let slot = (Fpt_plr_skfd player item);
    let del_item = @slot (Fpt_itr_skdl slot);
    (Maybe_extMbF slot (Fpt_itr_fail) del_item);
    let func = @item @itr (Fpt_itr_bind itr @~ (!f item));
    (Fpt_itr_bind (Fpt_itr_skad skill) @~ (!(!(List_fold items) (Fpt_itr_pure {T0})) func)))
}

// Apps.Fpt.Player.skills.find (player: (Apps.Fpt.Player)) (skill_id: (U120)) : (Maybe (U120))
fun (Fpt_plr_skfd player skill_id) {
  (Fpt_plr_skfd player skill_id) =
    (Apps_Fpt_D9D player skill_id #0)
}

// Apps.Fpt.Player.skills.find.go (player: (Apps.Fpt.Player)) (skill_id: (U120)) (counter: (U120)) : (Maybe (U120))
fun (Apps_Fpt_D9D player skill_id counter) {
  (Apps_Fpt_D9D ~ ~ #7) =
    {Maybe_none}
  (Apps_Fpt_D9D player skill_id counter) =
    dup _6 _7 = skill_id;
    dup _4 _5 = player;
    dup _0 _1 = counter;
    dup _2 _3 = _0;
    let s0 = (Fpt_plr_skg _4 _1);
    let comp = (U120_equal s0 _6);
    (Bool_match comp {Maybe_some _2} (Apps_Fpt_D9D _5 _7 (U120_min (U120_inc _3) #7)))
}

// U120.min (n: (U120)) (m: (U120)) : (U120)
fun (U120_min n m) {
  (U120_min n m) =
    dup _2 _3 = n;
    dup _0 _1 = m;
    let gtn = (U120_gtns _2 _0);
    (Bool_match gtn _1 _3)
}

// U120.greater_than (a: (U120)) (b: (U120)) : (Bool)
fun (U120_gtns a b) {
  (U120_gtns a b) =
    (U120_tbool (> a b))
}

// Bool.match (x: (Bool)) -(p: (x: (Bool)) Type) (true: (p (Bool.true))) (false: (p (Bool.false))) : (p x)
fun (Bool_match x true false) {
  (Bool_match {Bool_true} true ~) =
    true
  (Bool_match {Bool_false} ~ false) =
    false
}

// List.fold -(a: Type) -(p: Type) (xs: (List a)) : (_: p) (_: (_: a) (_: p) p) p
fun (List_fold xs) {
  (List_fold {List_nil}) =
    @nil @~ nil
  (List_fold {List_cons head tail}) =
    @nil @cons dup _0 _1 = cons;
    (!(!_0 head) (!(!(List_fold tail) nil) _1))
}

// Apps.Fpt.Interaction.skill.del (slot: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_skdl slot) {
  (Fpt_itr_skdl slot) =
    dup _0 _1 = slot;
    dup _2 _3 = _0;
    (Fpt_itr_bind (Fpt_itr_pget) @player let item = (Fpt_plr_skg player _1);
    (Fpt_itr_bind (Fpt_itr_pmut @x (Fpt_plr_skda x _2)) @~ (Fpt_itr_iedl item _3)))
}

// Apps.Fpt.Player.skills.del_at (player: (Apps.Fpt.Player)) (slot: (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_skda player slot) {
  (Fpt_plr_skda player slot) =
    let max_sid = #127;
    let skill_at = (<< max_sid (+ #71 (* #7 slot)));
    let skill_neg = (^ skill_at (U120_maxval));
    let new_player = (& player skill_neg);
    new_player
}

// U120.max_val : (U120)
fun (U120_maxval) {
  (U120_maxval) =
    #1329227995784915872903807060280344575
}

// Apps.Fpt.Interaction.item.event_del (item: (U120)) (slot: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_iedl item slot) {
  (Fpt_itr_iedl item slot) =
    (Fpt_itr_bind (Fpt_itr_pgxy) @pos let event = {Fpt_evt_itdl (Sigma_fst pos) item slot};
    (Fpt_itr_evad event))
}

// Apps.Fpt.Event.item_del (pos: (U120)) (item: (U120)) (slot: (U120)) : (Apps.Fpt.Event)
ctr {Fpt_evt_itdl pos item slot}

// Apps.Fpt.Npc.bat_cave (hp: (U120)) (spawn_points: (List (Apps.Fpt.Pos))) (bat_id: (Apps.Fpt.Id)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_npc_bcve hp spawn_points bat_id) {
  (Fpt_npc_bcve ~ spawn_points bat_id) =
    (Fpt_itr_bind (Fpt_itr_mget) @map (Fpt_itr_bind (Apps_Fpt_8wj #0 @~ #4095) @~ let pos = (Fpt_npc_bcfp spawn_points map);
    (Maybe_match pos (Fpt_itr_fail) @pos.value dup _0 _1 = pos.value;
    let bat = (Apps_Fpt_XJj _0);
    let func = @state (Fpt_st_crtu state bat _1 bat_id);
    (Fpt_itr_smut func))))
}

// Apps.Fpt.Monster.bat.init (pos: (Apps.Fpt.Pos)) : (U120)
fun (Apps_Fpt_XJj pos) {
  (Apps_Fpt_XJj pos) =
    let hp = #100;
    let rest = #0;
    (Apps_Fpt_I0a pos hp rest)
}

// Apps.Fpt.Monster.create (pos: (Apps.Fpt.Pos)) (hp: (U120)) (rest: (U120)) : (U120)
fun (Apps_Fpt_I0a pos hp rest) {
  (Apps_Fpt_I0a pos hp rest) =
    let base = (| (Sigma_fst pos) (<< hp #16));
    (| base (<< rest #29))
}

// Apps.Fpt.Interaction.map.get : (Apps.Fpt.Interaction (Apps.Fpt.Map))
fun (Fpt_itr_mget) {
  (Fpt_itr_mget) =
    @state dup _0 _1 = state;
    @player @target @frame {Fpt_itr_rnew (Fpt_st_gmap _0) _1 player target frame {List_nil}}
}

// Apps.Fpt.State.create_unit (state: (Apps.Fpt.State)) (init: (Apps.Fpt.Entity)) (pos: (Apps.Fpt.Pos)) (id: (Apps.Fpt.Id)) : (Apps.Fpt.State)
fun (Fpt_st_crtu state init pos id) {
  (Fpt_st_crtu {Fpt_st_new map table} init pos id) =
    dup _6 _7 = table;
    dup _4 _5 = pos;
    dup _2 _3 = map;
    dup _0 _1 = id;
    let tile = (Fpt_map_got _2 _4);
    (Pair_match tile @tile.fst @tile.snd (Bool_if (U120_is0 tile.snd) let map = (Fpt_map_set tile.fst _0 _5);
    let func = @x dup _8 _9 = x;
    (Bool_if (U120_is0 _8) init _9);
    let table = (Fpt_tbl_mut _6 func _1);
    {Fpt_st_new map table} {Fpt_st_new _3 _7}))
}

// Apps.Fpt.Map.got (map: (Apps.Fpt.Map)) (pos: (Apps.Fpt.Pos)) : (Pair (Apps.Fpt.Map) (Apps.Fpt.Id))
fun (Fpt_map_got map pos) {
  (Fpt_map_got map pos) =
    let keys = (Fpt_map_kfps pos);
    (Pair_match keys @keys.fst @keys.snd let p = (Bt_got (Fpt_map_base) keys.fst map);
    (Pair_match p @p.fst @p.snd {T2 p.fst (Fpt_map_gtil p.snd keys.snd)}))
}

fun (Bt_got0_ x0 x1 x2 x3 x4) {
  (Bt_got0_ {Bt_base2} bs ks b0 b1) =
    (Pair_match (Bt_got bs ks b0) @res.fst @res.snd {T2 {Bt_bin_tie res.fst b1} res.snd})
}

fun (Bt_got1_ x0 x1 x2 x3 x4) {
  (Bt_got1_ {Bt_base2} bs ks b0 b1) =
    (Pair_match (Bt_got bs ks b1) @res.fst @res.snd {T2 {Bt_bin_tie b0 res.fst} res.snd})
}

fun (Bt_got2_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got2_ {Bt_base5} bs ks b0 b1 b2 b3 b4) =
    (Pair_match (Bt_got bs ks b0) @res.fst @res.snd {T2 {Bt_qui_tie res.fst b1 b2 b3 b4} res.snd})
}

fun (Bt_got3_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got3_ {Bt_base5} bs ks b0 b1 b2 b3 b4) =
    (Pair_match (Bt_got bs ks b1) @res.fst @res.snd {T2 {Bt_qui_tie b0 res.fst b2 b3 b4} res.snd})
}

fun (Bt_got4_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got4_ {Bt_base5} bs ks b0 b1 b2 b3 b4) =
    (Pair_match (Bt_got bs ks b2) @res.fst @res.snd {T2 {Bt_qui_tie b0 b1 res.fst b3 b4} res.snd})
}

fun (Bt_got5_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got5_ {Bt_base5} bs ks b0 b1 b2 b3 b4) =
    (Pair_match (Bt_got bs ks b3) @res.fst @res.snd {T2 {Bt_qui_tie b0 b1 b2 res.fst b4} res.snd})
}

fun (Bt_got6_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got6_ {Bt_base5} bs ks b0 b1 b2 b3 b4) =
    (Pair_match (Bt_got bs ks b4) @res.fst @res.snd {T2 {Bt_qui_tie b0 b1 b2 b3 res.fst} res.snd})
}

// Data.BaseTree.got -(v: Type) (bases: (List (Data.BaseTree.Base))) (key: (Data.BaseTree.Key bases)) (map: (Data.BaseTree bases v)) : (Pair (Data.BaseTree bases v) v)
fun (Bt_got bases key map) {
  (Bt_got {List_nil} {T0} val) =
    dup _0 _1 = val;
    {T2 _0 _1}
  (Bt_got {List_cons .0 bs} {Bt_base_b0 ks} {Bt_bin_tie b0 b1}) =
    (Bt_got0_ .0 bs ks b0 b1)
  (Bt_got {List_cons .0 bs} {Bt_base_b1 ks} {Bt_bin_tie b0 b1}) =
    (Bt_got1_ .0 bs ks b0 b1)
  (Bt_got {List_cons .0 bs} {Bt_base_q0 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) =
    (Bt_got2_ .0 bs ks b0 b1 b2 b3 b4)
  (Bt_got {List_cons .0 bs} {Bt_base_q1 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) =
    (Bt_got3_ .0 bs ks b0 b1 b2 b3 b4)
  (Bt_got {List_cons .0 bs} {Bt_base_q2 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) =
    (Bt_got4_ .0 bs ks b0 b1 b2 b3 b4)
  (Bt_got {List_cons .0 bs} {Bt_base_q3 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) =
    (Bt_got5_ .0 bs ks b0 b1 b2 b3 b4)
  (Bt_got {List_cons .0 bs} {Bt_base_q4 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) =
    (Bt_got6_ .0 bs ks b0 b1 b2 b3 b4)
}

// Apps.Fpt.Map.set (map: (Apps.Fpt.Map)) (id: (Apps.Fpt.Id)) (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Map)
fun (Fpt_map_set map id pos) {
  (Fpt_map_set map id pos) =
    let keys = (Fpt_map_kfps pos);
    dup _0 _1 = keys;
    let key = (Pair_fst _0);
    let idx = (Pair_snd _1);
    let func = @chunk (Fpt_s_u120 (* idx #12) id chunk);
    (Bt_mut (Fpt_map_base) map key func)
}

// Apps.Fpt.U120.set (pos: (U120)) (id: (Apps.Fpt.Id)) (chunk: (U120)) : (U120)
fun (Fpt_s_u120 pos id chunk) {
  (Fpt_s_u120 pos id chunk) =
    let shl = @n (<< n pos);
    dup _0 _1 = shl;
    let res = (| (& (U120_bwcom (!_0 #4095)) chunk) (!_1 id));
    res
}

// U120.bitwise_complement (n: (U120)) : (U120)
fun (U120_bwcom n) {
  (U120_bwcom n) =
    (^ n (U120_maxval))
}

// Apps.Fpt.Interaction.state.mut (func: (_: (Apps.Fpt.State)) (Apps.Fpt.State)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_smut func) {
  (Fpt_itr_smut func) =
    @state @player @target @frame {Fpt_itr_rnew {T0} (!func state) player target frame {List_nil}}
}

// Apps.Fpt.Npc.bat_cave.find_pos (list: (List (Apps.Fpt.Pos))) (map: (Apps.Fpt.Map)) : (Maybe (Apps.Fpt.Pos))
fun (Fpt_npc_bcfp list map) {
  (Fpt_npc_bcfp {List_nil} ~) =
    {Maybe_none}
  (Fpt_npc_bcfp {List_cons h t} map) =
    dup _2 _3 = h;
    dup _0 _1 = map;
    let val = (Fpt_map_get _0 _2);
    (Bool_if (U120_is0 val) {Maybe_some _3} (Fpt_npc_bcfp t _1))
}

// Apps.Fpt.Interaction.frame.check_and_set_cd_at_target (cd_bit: (U120)) (new_cd: (_: (U120)) (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Apps_Fpt_8wj cd_bit new_cd) {
  (Apps_Fpt_8wj cd_bit new_cd) =
    dup _0 _1 = cd_bit;
    (Fpt_itr_bind (Fpt_itr_egid) @id dup _4 _5 = id;
    (Fpt_itr_bind (Fpt_itr_fget) @frame dup _2 _3 = frame;
    (Fpt_itr_bind (Fpt_itr_egfi _4) @entity let cd = (Fpt_g_u120 entity _0 #12);
    let is_ready = (U120_gte _2 cd);
    (Fpt_itr_bind (Fpt_itr_chec is_ready) @~ let new_cd = (!new_cd _3);
    let func = @entity (Fpt_m_u120 entity _1 #12 @~ new_cd);
    (Fpt_itr_emai func _5)))))
}

// Apps.Fpt.Interaction.check (bool: (Bool)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_chec bool) {
  (Fpt_itr_chec {Bool_true}) =
    (Fpt_itr_pure {T0})
  (Fpt_itr_chec {Bool_false}) =
    (Fpt_itr_fail)
}

// Apps.Fpt.U120.mut (chunk: (U120)) (pos: (U120)) (size: (U120)) (f: (_: (U120)) (U120)) : (U120)
fun (Fpt_m_u120 chunk pos size f) {
  (Fpt_m_u120 chunk pos size f) =
    dup _4 _5 = chunk;
    dup _0 _1 = pos;
    dup _2 _3 = _0;
    let mask = (- (<< #1 size) #1);
    dup _6 _7 = mask;
    let num = (& (>> _4 _1) _6);
    let num = (!f num);
    let chunk = (& (U120_bwcom (<< _7 _2)) _5);
    let chunk = (| (<< num _3) chunk);
    chunk
}

// Apps.Fpt.Interaction.entity.mut_at_id (func: (_: (Apps.Fpt.Entity)) (Apps.Fpt.Entity)) (id: (Apps.Fpt.Id)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_emai func id) {
  (Fpt_itr_emai func id) =
    let func = @table (Fpt_tbl_mut table func id);
    (Fpt_itr_bind (Fpt_itr_tblm func) @~ (Fpt_itr_pure {T0}))
}

// Apps.Fpt.Interaction.entity.get_id : (Apps.Fpt.Interaction (Apps.Fpt.Id))
fun (Fpt_itr_egid) {
  (Fpt_itr_egid) =
    (Fpt_itr_bind (Fpt_itr_mget) @map (Fpt_itr_bind (Fpt_itr_tgtg) @pos let id = (Fpt_map_get map pos);
    (Fpt_itr_pure id)))
}

// Apps.Fpt.Interaction.target.get : (Apps.Fpt.Interaction (Apps.Fpt.Pos))
fun (Fpt_itr_tgtg) {
  (Fpt_itr_tgtg) =
    @state @player @target dup _0 _1 = target;
    @frame {Fpt_itr_rnew _0 state player _1 frame {List_nil}}
}

// Apps.Fpt.Interaction.entity.get_from_id (id: (Apps.Fpt.Id)) : (Apps.Fpt.Interaction (Apps.Fpt.Entity))
fun (Fpt_itr_egfi id) {
  (Fpt_itr_egfi id) =
    (Fpt_itr_bind (Fpt_itr_tblg) @table let entity = (Fpt_tbl_get table id);
    (Fpt_itr_pure entity))
}

// Apps.Fpt.Interaction.frame.get : (Apps.Fpt.Interaction (U120))
fun (Fpt_itr_fget) {
  (Fpt_itr_fget) =
    @state @player @target @frame dup _0 _1 = frame;
    {Fpt_itr_rnew _0 state player target _1 {List_nil}}
}

// Apps.Fpt.Npc.phoenix : (Apps.Fpt.Interaction (Unit))
fun (Fpt_npc_phnx) {
  (Fpt_npc_phnx) =
    (Fpt_itr_bind (Fpt_itr_fget) @frame (Fpt_itr_bind (Fpt_itr_eget) @duration let is_active = (U120_gte duration frame);
    (Fpt_itr_bind (Fpt_itr_chec is_active) @~ (Fpt_npc_phfr))))
}

// Apps.Fpt.Npc.phoenix.fruit : (Apps.Fpt.Interaction (Unit))
fun (Fpt_npc_phfr) {
  (Fpt_npc_phfr) =
    let fruit_id = #27;
    let feather = #28;
    (Fpt_itr_bind (Fpt_itr_pget) @player let find_fruit = (Fpt_plr_skfd player fruit_id);
    let none = (Fpt_itr_fail);
    let some = @slot let func = @player (Fpt_plr_skra player feather slot);
    (Fpt_itr_pmut func);
    (Maybe_extMbF find_fruit none some))
}

// Apps.Fpt.Player.skills.replace_at (player: (Apps.Fpt.Player)) (skill: (U120)) (slot: (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_skra player skill slot) {
  (Fpt_plr_skra player skill slot) =
    dup _0 _1 = slot;
    let del = (Fpt_plr_skda player _0);
    let add = (Fpt_plr_skat del skill _1);
    add
}

// Apps.Fpt.Interaction.entity.get : (Apps.Fpt.Interaction (Apps.Fpt.Player))
fun (Fpt_itr_eget) {
  (Fpt_itr_eget) =
    (Fpt_itr_bind (Fpt_itr_egid) @id (Fpt_itr_bind (Fpt_itr_tblg) @table let entity = (Fpt_tbl_get table id);
    (Fpt_itr_pure entity)))
}

// Apps.Fpt.Npc.obelisk.itr (obelisk_id: (U120)) (chest_id: (Apps.Fpt.Id)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_npc_oitr obelisk_id chest_id) {
  (Fpt_npc_oitr obelisk_id chest_id) =
    dup _0 _1 = chest_id;
    (Fpt_itr_bind (Fpt_itr_egfi _0) @state let solved = (Fpt_npc_osvd state);
    (Fpt_itr_bind (Fpt_itr_chec solved) @~ let pair = (Fpt_npc_opar obelisk_id);
    dup _2 _3 = pair;
    let lft = (Pair_fst _2);
    let rgt = (Pair_snd _3);
    (Fpt_itr_bind (Fpt_itr_tgtg) @~ let fst = @state (Fpt_m_u120 state lft #2 @x (Fpt_u_obsuc x));
    let snd = @state (Fpt_m_u120 state rgt #2 @x (Fpt_u_obsuc x));
    (Fpt_itr_bind (Fpt_itr_emai @x (!snd (!fst x)) _1) @~ (Fpt_itr_pure {T0})))))
}

// Apps.Fpt.U120.obelisk_succ (n: (U120)) : (U120)
fun (Fpt_u_obsuc n) {
  (Fpt_u_obsuc #0) =
    #1
  (Fpt_u_obsuc #1) =
    #2
  (Fpt_u_obsuc #2) =
    #0
  (Fpt_u_obsuc n) =
    n
}

// Apps.Fpt.Npc.obelisk.solved (entity: (Apps.Fpt.Entity)) : (Bool)
fun (Fpt_npc_osvd entity) {
  (Fpt_npc_osvd entity) =
    let num = (Fpt_g_u120 entity #0 #6);
    (U120_equal #42 num)
}

// Apps.Fpt.Npc.obelisk.pair (num: (U120)) : (Pair (U120) (U120))
fun (Fpt_npc_opar num) {
  (Fpt_npc_opar #0) =
    {T2 #0 #4}
  (Fpt_npc_opar #1) =
    {T2 #2 #0}
  (Fpt_npc_opar #2) =
    {T2 #4 #2}
  (Fpt_npc_opar ~) =
    (Fpt_npc_opar #0)
}

// Apps.Fpt.Npc.obelisk.chest : (Apps.Fpt.Interaction (Unit))
fun (Fpt_npc_ocht) {
  (Fpt_npc_ocht) =
    (Fpt_itr_bind (Fpt_itr_eget) @entity let num = (Fpt_g_u120 entity #0 #6);
    let solved = (Fpt_npc_osvd num);
    (Fpt_itr_bind (Fpt_itr_chec solved) @~ let item = #55;
    (Fpt_itr_bind (Fpt_itr_skad item) @add (Fpt_itr_bind (Fpt_itr_chec add) @~ (Fpt_itr_bind (Fpt_itr_tgtg) @target (Fpt_itr_bind (Fpt_itr_esat (Fpt_npc_oin2) target) @~ (Fpt_itr_pure {T0})))))))
}

// Apps.Fpt.Interaction.entity.set_at (new_entity: (Apps.Fpt.Entity)) (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_esat new_entity pos) {
  (Fpt_itr_esat new_entity pos) =
    (Fpt_itr_bind (Fpt_itr_egia pos) @entity_id let func = @table (Fpt_tbl_set table new_entity entity_id);
    (Fpt_itr_bind (Fpt_itr_tblm func) @~ (Fpt_itr_pure {T0})))
}

// Apps.Fpt.Interaction.entity.get_id_at (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Interaction (Apps.Fpt.Player))
fun (Fpt_itr_egia pos) {
  (Fpt_itr_egia pos) =
    @state @player @target @frame let pair = (Fpt_map_gofs state pos);
    (Pair_match pair @pair.fst @pair.snd {Fpt_itr_rnew pair.snd pair.fst player target frame {List_nil}})
}

// Apps.Fpt.Map.got_from_state (state: (Apps.Fpt.State)) (pos: (Apps.Fpt.Pos)) : (Pair (Apps.Fpt.State) (Apps.Fpt.Player))
fun (Fpt_map_gofs state pos) {
  (Fpt_map_gofs {Fpt_st_new m t} pos) =
    let pair = (Fpt_map_got m pos);
    (Pair_match pair @pair.fst @pair.snd {T2 {Fpt_st_new pair.fst t} pair.snd})
}

// Apps.Fpt.Table.set (map: (Apps.Fpt.Table)) (entity: (Apps.Fpt.Entity)) (id: (Apps.Fpt.Id)) : (Apps.Fpt.Table)
fun (Fpt_tbl_set map entity id) {
  (Fpt_tbl_set map entity id) =
    (Bt_set (Fpt_tbl_bses) (Fpt_tbl_fid id) map entity)
}

fun (Bt_set0_ x0 x1 x2 x3 x4 x5) {
  (Bt_set0_ {Bt_base2} bs ks b0 b1 val) =
    {Bt_bin_tie (Bt_set bs ks b0 val) b1}
}

fun (Bt_set1_ x0 x1 x2 x3 x4 x5) {
  (Bt_set1_ {Bt_base2} bs ks b0 b1 val) =
    {Bt_bin_tie b0 (Bt_set bs ks b1 val)}
}

fun (Bt_set2_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set2_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) =
    {Bt_qui_tie (Bt_set bs ks b0 val) b1 b2 b3 b4}
}

fun (Bt_set3_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set3_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) =
    {Bt_qui_tie b0 (Bt_set bs ks b1 val) b2 b3 b4}
}

fun (Bt_set4_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set4_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) =
    {Bt_qui_tie b0 b1 (Bt_set bs ks b2 val) b3 b4}
}

fun (Bt_set5_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set5_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) =
    {Bt_qui_tie b0 b1 b2 (Bt_set bs ks b3 val) b4}
}

fun (Bt_set6_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set6_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) =
    {Bt_qui_tie b0 b1 b2 b3 (Bt_set bs ks b4 val)}
}

// Data.BaseTree.set -(v: Type) (bases: (List (Data.BaseTree.Base))) (key: (Data.BaseTree.Key bases)) (map: (Data.BaseTree bases v)) (val: v) : (Data.BaseTree bases v)
fun (Bt_set bases key map val) {
  (Bt_set {List_nil} {T0} ~ val) =
    val
  (Bt_set {List_cons .0 bs} {Bt_base_b0 ks} {Bt_bin_tie b0 b1} val) =
    (Bt_set0_ .0 bs ks b0 b1 val)
  (Bt_set {List_cons .0 bs} {Bt_base_b1 ks} {Bt_bin_tie b0 b1} val) =
    (Bt_set1_ .0 bs ks b0 b1 val)
  (Bt_set {List_cons .0 bs} {Bt_base_q0 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) =
    (Bt_set2_ .0 bs ks b0 b1 b2 b3 b4 val)
  (Bt_set {List_cons .0 bs} {Bt_base_q1 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) =
    (Bt_set3_ .0 bs ks b0 b1 b2 b3 b4 val)
  (Bt_set {List_cons .0 bs} {Bt_base_q2 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) =
    (Bt_set4_ .0 bs ks b0 b1 b2 b3 b4 val)
  (Bt_set {List_cons .0 bs} {Bt_base_q3 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) =
    (Bt_set5_ .0 bs ks b0 b1 b2 b3 b4 val)
  (Bt_set {List_cons .0 bs} {Bt_base_q4 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) =
    (Bt_set6_ .0 bs ks b0 b1 b2 b3 b4 val)
}

// Apps.Fpt.Npc.obelisk.init2 : (U120)
fun (Fpt_npc_oin2) {
  (Fpt_npc_oin2) =
    #17
}

// Apps.Fpt.Npc.fire_merc (data: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_npc_fshp data) {
  (Fpt_npc_fshp data) =
    let dragonfruit = {T2 #27 #5};
    let horn = {T2 #29 #23};
    let shop = (Fpt_itr_nshp {List_cons dragonfruit {List_cons horn {List_nil}}});
    (!shop data)
}

// Apps.Fpt.Interaction.npc.shop (items: (List (Pair (U120) (U120)))) : (data: (U120)) (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_nshp items) {
  (Fpt_itr_nshp items) =
    @data let purchase = (List_at items (U120_to_nat data));
    let not_found = (Fpt_itr_pass);
    let found = @val dup _0 _1 = val;
    (Fpt_itr_nbuy (Pair_fst _0) (Pair_snd _1));
    (Maybe_extMbF purchase not_found found)
}

// Apps.Fpt.Interaction.npc.buy (item: (U120)) (price: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_nbuy item price) {
  (Fpt_itr_nbuy item price) =
    dup _0 _1 = price;
    (Fpt_itr_bind (Fpt_itr_pget) @player let slot = (Fpt_plr_sksl player);
    (Fpt_itr_bind (Apps_Fpt_AkF _0) @can_buy (Fpt_itr_bind (Fpt_itr_chan slot) @~ (Fpt_itr_bind (Fpt_itr_chec can_buy) @~ let func = @x (Fpt_plr_gsub x _1);
    (Fpt_itr_bind (Fpt_itr_skad item) @~ (Fpt_itr_pmut func))))))
}

// Apps.Fpt.Interaction.player.can_buy (price: (U120)) : (Apps.Fpt.Interaction (Bool))
fun (Apps_Fpt_AkF price) {
  (Apps_Fpt_AkF price) =
    (Fpt_itr_bind (Fpt_itr_pget) @player let gold = (Fpt_plr_gget player);
    let can_buy = (U120_gte gold price);
    (Fpt_itr_pure can_buy))
}

// Apps.Fpt.Player.gd.get (player: (Apps.Fpt.Player)) : (U120)
fun (Fpt_plr_gget player) {
  (Fpt_plr_gget player) =
    (Fpt_g_u120 player #47 #12)
}

// Apps.Fpt.Player.gd.sub (player: (Apps.Fpt.Player)) (amount: (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_gsub player amount) {
  (Fpt_plr_gsub player amount) =
    (Fpt_plr_gdch player @x (U120_sub_YzU x amount))
}

// U120.sub_saturated (a: (U120)) (b: (U120)) : (U120)
fun (U120_sub_YzU a b) {
  (U120_sub_YzU a b) =
    dup _2 _3 = a;
    dup _0 _1 = b;
    (Bool_if (U120_ltn _0 _2) (- _3 _1) #0)
}

// Apps.Fpt.Player.gd.change (player: (Apps.Fpt.Player)) (f: (_: (U120)) (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_gdch player f) {
  (Fpt_plr_gdch player f) =
    (Fpt_m_u120 player #47 #12 f)
}

// Apps.Fpt.Interaction.get_data (data: (U120)) : (U120)
fun (Fpt_itr_gdat data) {
  (Fpt_itr_gdat ~) =
    (& #252 #3)
}

// Apps.Fpt.Event.act_itr (pos: (U120)) (id: (U120)) : (Apps.Fpt.Event)
ctr {Fpt_evt_itr pos id}

// Apps.Fpt.Pos.modify (pos: (Apps.Fpt.Pos)) (delta: (Pair (U120) (U120))) : (Maybe (Apps.Fpt.Pos))
fun (Fpt_pos_mod pos delta) {
  (Fpt_pos_mod pos delta) =
    let list = (Fpt_pos_rnge pos {List_cons delta {List_nil}});
    (List_match list {Maybe_none} @list.head @~ {Maybe_some list.head})
}

// Apps.Fpt.Pos.range (center: (Apps.Fpt.Pos)) (deltas: (List (Pair (U120) (U120)))) : (List (Apps.Fpt.Pos))
fun (Fpt_pos_rnge center deltas) {
  (Fpt_pos_rnge ~ {List_nil}) =
    {List_nil}
  (Fpt_pos_rnge center {List_cons head tail}) =
    dup _0 _1 = center;
    dup _2 _3 = _0;
    (Pair_match head @head.fst @head.snd let validate = @val (U120_ltn val #160);
    dup _10 _11 = validate;
    let x = (+ (Fpt_pos_getx _1) head.fst);
    dup _8 _9 = x;
    let y = (+ (Fpt_pos_gety _2) head.snd);
    dup _6 _7 = y;
    let is_valid = (Bool_and (!_10 _8) (!_11 _6));
    let go = (Fpt_pos_rnge _3 tail);
    dup _4 _5 = go;
    (Bool_match is_valid {List_cons (Fpt_pos_new _9 _7) _4} _5))
}

// Bool.and (a: (Bool)) (b: (Bool)) : (Bool)
fun (Bool_and a b) {
  (Bool_and {Bool_true} b) =
    b
  (Bool_and {Bool_false} ~) =
    {Bool_false}
}

// List.match -(t: Type) (x: (List t)) -(p: (x: (List t)) Type) (nil: (p (List.nil t))) (cons: (head: t) (tail: (List t)) (p (List.cons t head tail))) : (p x)
fun (List_match x nil cons) {
  (List_match {List_nil} nil ~) =
    nil
  (List_match {List_cons head_ tail_} ~ cons) =
    (!(!cons head_) tail_)
}

// Apps.Fpt.State.Update.walk (state: (Apps.Fpt.State)) (data: (U120)) (entity: (Apps.Fpt.Entity)) (player_id: (Apps.Fpt.Id)) (frame: (U120)) : (Pair (Apps.Fpt.State) (Apps.Fpt.Events))
fun (Fpt_st_walk state data entity player_id frame) {
  (Fpt_st_walk state data entity player_id frame) =
    dup _4 _5 = state;
    dup _6 _7 = _4;
    dup _2 _3 = player_id;
    dup _0 _1 = entity;
    let pos = (Fpt_pos_new (Fpt_plr_pgx _0) (Fpt_plr_pgy _1));
    dup _12 _13 = pos;
    let delta = (Apps_Fpt_m3b data);
    let target = (Fpt_pos_mod _12 delta);
    (Maybe_match target {T2 _5 {List_nil}} @target.value dup _8 _9 = target.value;
    dup _10 _11 = _8;
    let move = (HVM_log {T2 (Sigma_fst _13) (Sigma_fst _9)} (Fpt_skl_move));
    let res = (!(!(!(!move _6) _2) _10) frame);
    (Fpt_itr_rmat res @~ @res.state @~ @~ @~ @res.events {T2 res.state {List_cons {Fpt_evt_walk (Sigma_fst _11) _3} res.events}} {T2 _7 {List_nil}}))
}

// Apps.Fpt.State.Update.walk.direction (data: (U120)) : (Pair (U120) (U120))
fun (Apps_Fpt_m3b data) {
  (Apps_Fpt_m3b #0) =
    {T2 #0 (- #0 #1)}
  (Apps_Fpt_m3b #1) =
    {T2 (- #0 #1) #0}
  (Apps_Fpt_m3b #2) =
    {T2 #0 #1}
  (Apps_Fpt_m3b #3) =
    {T2 #1 #0}
  (Apps_Fpt_m3b ~) =
    {T2 #0 #0}
}

// Apps.Fpt.Skill.move : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_move) {
  (Fpt_skl_move) =
    let range = #1;
    let cooldown = #1;
    (Fpt_itr_bind (Fpt_itr_pgxy) @origin dup _0 _1 = origin;
    (Fpt_itr_bind (Fpt_itr_tgtg) @target let delta = (Fpt_pos_dget _0 target);
    (Fpt_itr_bind (Fpt_itr_skcr range) @~ (Fpt_itr_bind (Apps_Fpt_2wF _1 delta) @~ (Fpt_itr_bind (Fpt_itr_pcmv cooldown) @~ (Fpt_itr_pure {T0}))))))
}

// Apps.Fpt.Interaction.player.cast_move (cooldown: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_pcmv cooldown) {
  (Fpt_itr_pcmv cooldown) =
    (Fpt_itr_bind (Fpt_itr_pget) @player dup _12 _13 = player;
    dup _14 _15 = _12;
    let old_cd = (Fpt_plr_cdg _13);
    dup _8 _9 = old_cd;
    dup _10 _11 = _8;
    let silence = (Fpt_plr_slg _14);
    let root = (Fpt_plr_rtg _15);
    dup _6 _7 = root;
    (Fpt_itr_bind (Fpt_itr_fget) @frame dup _4 _5 = frame;
    let can_cast = (U120_gte _4 (+ _9 _6));
    let new_cd = (+ _5 cooldown);
    dup _0 _1 = new_cd;
    dup _2 _3 = _0;
    let new_silence = (U120_sub_YzU (+ _10 silence) _1);
    let new_root = (U120_sub_YzU (+ _11 _7) _2);
    let func = @player let player = (Fpt_plr_cds player _3);
    let player = (Fpt_plr_sls player new_silence);
    let player = (Fpt_plr_rts player new_root);
    player;
    (Fpt_itr_bind (Fpt_itr_chec can_cast) @~ (Fpt_itr_pmut func))))
}

// Apps.Fpt.Player.cd.set (player: (Apps.Fpt.Player)) (cd: (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_cds player cd) {
  (Fpt_plr_cds player cd) =
    (Fpt_plr_cdch player @~ cd)
}

// Apps.Fpt.Player.cd.change (player: (Apps.Fpt.Player)) (f: (_: (U120)) (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_cdch player f) {
  (Fpt_plr_cdch player f) =
    (Fpt_m_u120 player #59 #12 f)
}

// Apps.Fpt.Player.cd.get (player: (Apps.Fpt.Player)) : (U120)
fun (Fpt_plr_cdg player) {
  (Fpt_plr_cdg player) =
    (Fpt_g_u120 player #59 #12)
}

// Apps.Fpt.Player.rt.get (player: (Apps.Fpt.Player)) : (U120)
fun (Fpt_plr_rtg player) {
  (Fpt_plr_rtg player) =
    (Fpt_g_u120 player #41 #3)
}

// Apps.Fpt.Player.rt.set (player: (Apps.Fpt.Player)) (rt: (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_rts player rt) {
  (Fpt_plr_rts player rt) =
    (Fpt_plr_rtch player @~ rt)
}

// Apps.Fpt.Player.rt.change (player: (Apps.Fpt.Player)) (f: (_: (U120)) (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_rtch player f) {
  (Fpt_plr_rtch player f) =
    (Fpt_m_u120 player #41 #3 f)
}

// Apps.Fpt.Player.sl.get (player: (Apps.Fpt.Player)) : (U120)
fun (Fpt_plr_slg player) {
  (Fpt_plr_slg player) =
    (Fpt_g_u120 player #44 #3)
}

// Apps.Fpt.Player.sl.set (player: (Apps.Fpt.Player)) (sl: (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_sls player sl) {
  (Fpt_plr_sls player sl) =
    (Fpt_plr_slch player @~ sl)
}

// Apps.Fpt.Player.sl.change (player: (Apps.Fpt.Player)) (f: (_: (U120)) (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_slch player f) {
  (Fpt_plr_slch player f) =
    (Fpt_m_u120 player #44 #3 f)
}

// Apps.Fpt.Interaction.skill.check_range (range: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_skcr range) {
  (Fpt_itr_skcr range) =
    (Fpt_itr_bind (Fpt_itr_pgxy) @origin (Fpt_itr_bind (Fpt_itr_tgtg) @target let distance = (Fpt_pos_dist origin target);
    let check = (U120_gte range distance);
    (Fpt_itr_bind (Fpt_itr_chec check) @~ (Fpt_itr_pure {T0}))))
}

// Apps.Fpt.Pos.distance (origin: (Apps.Fpt.Pos)) (target: (Apps.Fpt.Pos)) : (U120)
fun (Fpt_pos_dist origin target) {
  (Fpt_pos_dist origin target) =
    dup _2 _3 = target;
    dup _0 _1 = origin;
    let ox = (Fpt_pos_getx _0);
    let tx = (Fpt_pos_getx _2);
    let dx = (Apps_Fpt_cNU ox tx);
    let oy = (Fpt_pos_gety _1);
    let ty = (Fpt_pos_gety _3);
    let dy = (Apps_Fpt_cNU oy ty);
    (+ dx dy)
}

// Apps.Fpt.U120.distance (n: (U120)) (m: (U120)) : (U120)
fun (Apps_Fpt_cNU n m) {
  (Apps_Fpt_cNU n m) =
    dup _8 _9 = n;
    dup _10 _11 = _8;
    dup _12 _13 = _9;
    dup _14 _15 = _10;
    dup _0 _1 = m;
    dup _2 _3 = _0;
    dup _4 _5 = _1;
    dup _6 _7 = _2;
    let nn = (Apps_Fpt_N1k _11);
    let nm = (Apps_Fpt_N1k _3);
    let xor = (Bool_xor nn nm);
    (Bool_if xor (+ (Apps_Fpt_e1g _12) (Apps_Fpt_e1g _4)) (Bool_if (U120_gtns _13 _5) (- _14 _6) (U120_sub_YzU _7 _15)))
}

// Apps.Fpt.U120.abs (n: (U120)) : (U120)
fun (Apps_Fpt_e1g n) {
  (Apps_Fpt_e1g n) =
    dup _0 _1 = n;
    dup _2 _3 = _0;
    (Bool_if (Apps_Fpt_N1k _1) (U120_inc (U120_bwcom _2)) _3)
}

// Apps.Fpt.U120.is_neg (n: (U120)) : (Bool)
fun (Apps_Fpt_N1k n) {
  (Apps_Fpt_N1k n) =
    (Bool_not (U120_is0 (& #664613997892457936451903530140172288 n)))
}

// Bool.not (a: (Bool)) : (Bool)
fun (Bool_not a) {
  (Bool_not {Bool_true}) =
    {Bool_false}
  (Bool_not {Bool_false}) =
    {Bool_true}
}

// Bool.xor (a: (Bool)) (b: (Bool)) : (Bool)
fun (Bool_xor a b) {
  (Bool_xor {Bool_true} b) =
    (Bool_not b)
  (Bool_xor {Bool_false} b) =
    b
}

// Apps.Fpt.Interaction.move (pos: (Apps.Fpt.Pos)) (delta: (Pair (U120) (U120))) : (Apps.Fpt.Interaction (Bool))
fun (Apps_Fpt_2wF pos delta) {
  (Apps_Fpt_2wF pos delta) =
    dup _0 _1 = pos;
    let destination = (Fpt_pos_mod _0 delta);
    (Apps_Fpt_L56 _1 destination)
}

// Apps.Fpt.Interaction.move.maybe (ori: (Apps.Fpt.Pos)) (des: (Maybe (Apps.Fpt.Pos))) : (Apps.Fpt.Interaction (Bool))
fun (Apps_Fpt_L56 ori des) {
  (Apps_Fpt_L56 ~ {Maybe_none}) =
    (Fpt_itr_pure {Bool_false})
  (Apps_Fpt_L56 ori {Maybe_some des}) =
    dup _0 _1 = des;
    (Fpt_itr_bind (Fpt_itr_egia _0) @des_id (Apps_Fpt_DKD des_id ori _1))
}

// Apps.Fpt.Interaction.move.if (id: (Apps.Fpt.Id)) (ori: (Apps.Fpt.Pos)) (des: (Apps.Fpt.Pos)) : (Apps.Fpt.Interaction (Bool))
fun (Apps_Fpt_DKD id ori des) {
  (Apps_Fpt_DKD #0 ori des) =
    dup _2 _3 = ori;
    dup _0 _1 = des;
    let func = @state (Fpt_st_pmov state _2 _0);
    (Fpt_itr_bind (Fpt_itr_smut func) @~ let event = {Fpt_evt_move (Sigma_fst _3) (Sigma_fst _1)};
    (Fpt_itr_bind (Fpt_itr_evad event) @~ (Fpt_itr_pure {Bool_true})))
  (Apps_Fpt_DKD ~ ~ ~) =
    (Fpt_itr_pure {Bool_false})
}

// Apps.Fpt.Event.movement (ori: (U120)) (des: (U120)) : (Apps.Fpt.Event)
ctr {Fpt_evt_move ori des}

// Apps.Fpt.State.player.move (state: (Apps.Fpt.State)) (ori: (Apps.Fpt.Pos)) (des: (Apps.Fpt.Pos)) : (Apps.Fpt.State)
fun (Fpt_st_pmov state ori des) {
  (Fpt_st_pmov {Fpt_st_new map table} ori des) =
    dup _8 _9 = des;
    dup _10 _11 = _8;
    dup _6 _7 = ori;
    dup _2 _3 = map;
    dup _4 _5 = _2;
    dup _0 _1 = table;
    let des_map_id = (Fpt_map_got _3 _9);
    let emp_des = (Fpt_map_tlem (Pair_snd des_map_id));
    let ori_map_id = (Fpt_map_got _4 _6);
    dup _12 _13 = ori_map_id;
    dup _14 _15 = _12;
    dup _16 _17 = _13;
    let tbl_ent_ori = (Fpt_tbl_got _0 (Pair_snd _14));
    (Bool_if emp_des let new_player = @player (Fpt_plr_posc player @~ (Sigma_fst _10));
    let new_table = (Fpt_tbl_mut (Pair_fst tbl_ent_ori) new_player (Pair_snd _15));
    let new_map = (Fpt_map_del (Pair_fst _16) _7);
    let new_map = (Fpt_map_set new_map (Pair_snd _17) _11);
    {Fpt_st_new new_map new_table} {Fpt_st_new _5 _1})
}

// Apps.Fpt.Table.got (map: (Apps.Fpt.Table)) (id: (Apps.Fpt.Id)) : (Pair (Apps.Fpt.Table) (Apps.Fpt.Entity))
fun (Fpt_tbl_got map id) {
  (Fpt_tbl_got map id) =
    (Bt_got (Fpt_tbl_bses) (Fpt_tbl_fid id) map)
}

// Apps.Fpt.Map.del (map: (Apps.Fpt.Map)) (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Map)
fun (Fpt_map_del map pos) {
  (Fpt_map_del map pos) =
    (Fpt_map_set map #0 pos)
}

// Apps.Fpt.Player.pos.change (player: (Apps.Fpt.Player)) (f: (_: (U120)) (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_posc player f) {
  (Fpt_plr_posc player f) =
    (Fpt_m_u120 player #0 #16 f)
}

// Apps.Fpt.Map.tile_is_empty (tile: (U120)) : (Bool)
fun (Fpt_map_tlem tile) {
  (Fpt_map_tlem tile) =
    (U120_is0 tile)
}

// Apps.Fpt.Pos.Delta.get (a: (Apps.Fpt.Pos)) (b: (Apps.Fpt.Pos)) : (Pair (U120) (U120))
fun (Fpt_pos_dget a b) {
  (Fpt_pos_dget a b) =
    dup _2 _3 = b;
    dup _0 _1 = a;
    let x = (- (Fpt_pos_getx _2) (Fpt_pos_getx _0));
    let y = (- (Fpt_pos_gety _3) (Fpt_pos_gety _1));
    {T2 x y}
}

// HVM.log -(a: Type) -(r: Type) (logged: a) (result: r) : _
fun (HVM_log logged result) {
  (HVM_log ~ result) =
    result
}

// Apps.Fpt.Event.act_walk (pos: (U120)) (id: (U120)) : (Apps.Fpt.Event)
ctr {Fpt_evt_walk pos id}

// Apps.Fpt.State.Update.skill (state: (Apps.Fpt.State)) (player_id: (Apps.Fpt.Id)) (slot: (U120)) (data: (U120)) (entity: (Apps.Fpt.Entity)) (frame: (U120)) : (Pair (Apps.Fpt.State) (Apps.Fpt.Events))
fun (Fpt_st_updsk state player_id slot data entity frame) {
  (Fpt_st_updsk state player_id slot data entity frame) =
    dup _10 _11 = player_id;
    dup _6 _7 = state;
    dup _8 _9 = _6;
    dup _2 _3 = entity;
    dup _4 _5 = _2;
    dup _0 _1 = slot;
    let skill = (Fpt_plr_skg _3 _0);
    let pos = (Fpt_pos_new (Fpt_plr_pgx _4) (Fpt_plr_pgy _5));
    let delta = (Fpt_pos_dgxy data);
    let target = (Fpt_pos_mod pos delta);
    (Maybe_match target {T2 _7 {List_nil}} @target.value dup _12 _13 = target.value;
    let skill = (Fpt_st_appsk skill);
    let res = (!(!(!(!skill _8) _10) _12) frame);
    (Fpt_itr_rmat res @~ @res.state @~ @~ @~ @res.events {T2 res.state {List_cons {Fpt_evt_skil (Sigma_fst _13) _11 _1} res.events}} {T2 _9 {List_nil}}))
}

// Apps.Fpt.Skill.get (skill: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_st_appsk skill) {
  (Fpt_st_appsk #0) =
    (Fpt_itr_pass)
  (Fpt_st_appsk #1) =
    (Fpt_skl_fbal)
  (Fpt_st_appsk #2) =
    (Fpt_skl_fthr)
  (Fpt_st_appsk #3) =
    (Fpt_skl_frng)
  (Fpt_st_appsk #4) =
    (Fpt_skl_farw)
  (Fpt_st_appsk #5) =
    (Fpt_skl_fshr)
  (Fpt_st_appsk #6) =
    (Fpt_skl_snwf)
  (Fpt_st_appsk #7) =
    (Fpt_skl_hwtr)
  (Fpt_st_appsk #8) =
    (Fpt_skl_pacf)
  (Fpt_st_appsk #9) =
    (Fpt_skl_stsh)
  (Fpt_st_appsk #10) =
    (Fpt_skl_qsnd)
  (Fpt_st_appsk #11) =
    (Fpt_skl_trmr)
  (Fpt_st_appsk #12) =
    (Fpt_skl_stwl)
  (Fpt_st_appsk #13) =
    (Fpt_skl_azpr)
  (Fpt_st_appsk #14) =
    (Fpt_skl_qstp)
  (Fpt_st_appsk #15) =
    (Fpt_skl_gust)
  (Fpt_st_appsk #16) =
    (Fpt_skl_wrwd)
}

// Apps.Fpt.Skill.frostshard : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_fshr) {
  (Fpt_skl_fshr) =
    let skill_id = #5;
    let damage = #35;
    let range = #6;
    let ~ = #1;
    let speed = #60;
    (Fpt_itr_bind (Fpt_itr_plcd speed) @cooldown (Fpt_itr_bind (Fpt_itr_pgxy) @~ (Fpt_itr_bind (Fpt_itr_tgtg) @target (Fpt_itr_bind (Fpt_itr_skcr range) @~ (Fpt_itr_bind (Apps_Fpt_5ys damage target) @~ (Fpt_itr_bind (Fpt_itr_pcsk cooldown) @~ (Fpt_itr_bind (Fpt_itr_skev skill_id) @~ (Fpt_itr_pure {T0}))))))))
}

// Apps.Fpt.Interaction.damage (value: (U120)) (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Interaction (U120))
fun (Apps_Fpt_5ys value pos) {
  (Apps_Fpt_5ys value pos) =
    dup _0 _1 = pos;
    let func = @player (Fpt_plr_dmg player value);
    (Fpt_itr_bind (Fpt_itr_egia _0) @id dup _6 _7 = id;
    dup _8 _9 = _6;
    dup _10 _11 = _7;
    (Fpt_itr_bind (Fpt_itr_egfi _8) @before (Fpt_itr_bind (Fpt_itr_emai func _9) @~ (Fpt_itr_bind (Fpt_itr_egfi _10) @after dup _4 _5 = after;
    let real_dmg = (Fpt_plr_hpdf before _4);
    dup _2 _3 = real_dmg;
    let is_player = (Apps_Fpt_3NY _11);
    let health = (Fpt_plr_hpg _5);
    let interact = (Bool_if is_player (Apps_Fpt_UXQ _2 health _1) (Fpt_itr_pure {T0}));
    (Fpt_itr_bind interact @~ (Fpt_itr_pure _3))))))
}

// Apps.Fpt.Interaction.damage.if (real_dmg: (U120)) (health: (U120)) (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Interaction (Unit))
fun (Apps_Fpt_UXQ real_dmg health pos) {
  (Apps_Fpt_UXQ #0 ~ ~) =
    (Fpt_itr_pure {T0})
  (Apps_Fpt_UXQ real_dmg health pos) =
    dup _4 _5 = pos;
    dup _6 _7 = _4;
    dup _8 _9 = _5;
    dup _0 _1 = real_dmg;
    dup _2 _3 = _0;
    let ~ = {Fpt_evt_dmg (Sigma_fst _6) _1};
    (Fpt_itr_bind (Fpt_itr_evad {Fpt_evt_dmg (Sigma_fst _7) _2}) @~ (Fpt_itr_bind (Fpt_itr_egia _8) @id dup _12 _13 = id;
    let results = (!(Fpt_itr_grct _12) _3);
    dup _10 _11 = results;
    (Fpt_itr_bind (Apps_Fpt__BH (U120_is0 health) (Pair_fst _10) (Pair_snd _11) _13 _9) @~ (Fpt_itr_pure {T0}))))
}

// Apps.Fpt.Interaction.damage.result (died: (Bool)) (react: (Apps.Fpt.Interaction (Unit))) (death: (Apps.Fpt.Interaction (Unit))) (id: (Apps.Fpt.Id)) (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Interaction (Unit))
fun (Apps_Fpt__BH died react death id pos) {
  (Apps_Fpt__BH {Bool_false} react ~ ~ ~) =
    react
  (Apps_Fpt__BH {Bool_true} ~ death ~ pos) =
    (Fpt_itr_bind death @~ (Fpt_itr_ddth pos))
}

// Apps.Fpt.Event.damage (pos: (U120)) (value: (U120)) : (Apps.Fpt.Event)
ctr {Fpt_evt_dmg pos value}

// Apps.Fpt.Id.is_player (id: (Apps.Fpt.Id)) : (Bool)
fun (Apps_Fpt_3NY id) {
  (Apps_Fpt_3NY id) =
    dup _0 _1 = id;
    (Bool_and (U120_gte _0 #1024) (U120_ltn _1 #4096))
}

// Apps.Fpt.Player.damage (player: (Apps.Fpt.Player)) (dmg: (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_dmg player dmg) {
  (Fpt_plr_dmg player dmg) =
    (Fpt_plr_hpch player @x (U120_sub_YzU x dmg))
}

// Apps.Fpt.Player.hp.change (player: (Apps.Fpt.Player)) (f: (_: (U120)) (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_hpch player f) {
  (Fpt_plr_hpch player f) =
    (Fpt_m_u120 player #16 #13 f)
}

// Apps.Fpt.Player.hp.difference (a: (Apps.Fpt.Player)) (b: (Apps.Fpt.Player)) : (U120)
fun (Fpt_plr_hpdf a b) {
  (Fpt_plr_hpdf a b) =
    let a = (Fpt_plr_hpg a);
    let b = (Fpt_plr_hpg b);
    (U120_sub_YzU a b)
}

// Apps.Fpt.Player.hp.get (player: (Apps.Fpt.Player)) : (U120)
fun (Fpt_plr_hpg player) {
  (Fpt_plr_hpg player) =
    (Fpt_g_u120 player #16 #13)
}

// Apps.Fpt.Interaction.get_reaction (id: (Apps.Fpt.Id)) : (_: (U120)) (Pair (Apps.Fpt.Interaction (Unit)) (Apps.Fpt.Interaction (Unit)))
fun (Fpt_itr_grct id) {
  (Fpt_itr_grct #512) =
    (Apps_Fpt_OKx #512)
  (Fpt_itr_grct #513) =
    (Apps_Fpt_OKx #513)
  (Fpt_itr_grct #514) =
    (Apps_Fpt_OKx #514)
  (Fpt_itr_grct ~) =
    @~ {T2 (Fpt_itr_pass) (Fpt_itr_pass)}
}

// Apps.Fpt.Monster.bat (id: (Apps.Fpt.Id)) : (_: (U120)) (Pair (Apps.Fpt.Interaction (Unit)) (Apps.Fpt.Interaction (Unit)))
fun (Apps_Fpt_OKx id) {
  (Apps_Fpt_OKx id) =
    dup _0 _1 = id;
    @damage let run_distance = #4;
    let cave = (Apps_Fpt_lgB _0);
    {T2 (Fpt_mon_brct run_distance _1) (Fpt_mon_bdth cave damage)}
}

// Apps.Fpt.Monster.bat.get_cave (id: (Apps.Fpt.Id)) : (Apps.Fpt.Id)
fun (Apps_Fpt_lgB id) {
  (Apps_Fpt_lgB #512) =
    #128
  (Apps_Fpt_lgB #513) =
    #129
  (Apps_Fpt_lgB #514) =
    #130
  (Apps_Fpt_lgB n) =
    n
}

// Apps.Fpt.Monster.bat.death (cave_id: (Apps.Fpt.Id)) (damage: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_mon_bdth cave_id damage) {
  (Fpt_mon_bdth cave_id ~) =
    (Fpt_itr_bind (Fpt_itr_emai @~ #0 cave_id) @~ (Fpt_itr_pure {T0}))
}

// Apps.Fpt.Monster.bat.reaction (run_distance: (U120)) (id: (Apps.Fpt.Id)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_mon_brct run_distance id) {
  (Fpt_mon_brct run_distance id) =
    (Fpt_itr_bind (Fpt_itr_mgpi id) @monster_pos dup _2 _3 = monster_pos;
    (Fpt_itr_bind (Fpt_itr_pgxy) @attacker_pos let delta = (Fpt_pos_dget attacker_pos _2);
    dup _0 _1 = delta;
    let ~ = (Fpt_pos_drpl _0 run_distance {Bool_true});
    (Fpt_itr_bind (Apps_Fpt_2wF _3 _1) @~ (Fpt_itr_pass))))
}

// Apps.Fpt.Pos.Delta.repel (delta: (Pair (U120) (U120))) (strength: (U120)) (y_prio: (Bool)) : (Pair (U120) (U120))
fun (Fpt_pos_drpl delta strength y_prio) {
  (Fpt_pos_drpl ~ #0 ~) =
    {T2 #0 #0}
  (Fpt_pos_drpl delta strength y_prio) =
    dup _14 _15 = strength;
    dup _0 _1 = delta;
    dup _2 _3 = _0;
    dup _4 _5 = _1;
    dup _6 _7 = _2;
    dup _8 _9 = _3;
    dup _10 _11 = _4;
    dup _12 _13 = _5;
    let dx = (Apps_Fpt_cNU #0 (Pair_fst _6));
    dup _40 _41 = dx;
    let dy = (Apps_Fpt_cNU #0 (Pair_snd _7));
    dup _38 _39 = dy;
    let dist = (+ _40 _38);
    dup _36 _37 = dist;
    let x_div = (U120_dms (* _41 _14) _36);
    dup _34 _35 = x_div;
    let y_div = (U120_dms (* _39 _15) _37);
    dup _32 _33 = y_div;
    let new_x = (Pair_fst _34);
    dup _28 _29 = new_x;
    dup _30 _31 = _28;
    let new_y = (Pair_fst _32);
    dup _24 _25 = new_y;
    dup _26 _27 = _24;
    let x_mod = (Pair_snd _35);
    dup _22 _23 = x_mod;
    let y_mod = (Pair_snd _33);
    dup _20 _21 = y_mod;
    let cmp = (U120_compare _22 _20);
    let inc_x = {T2 (Apps_Fpt_m3z (Pair_fst _8) (U120_inc _29)) (Apps_Fpt_m3z (Pair_snd _9) _25)};
    dup _18 _19 = inc_x;
    let inc_y = {T2 (Apps_Fpt_m3z (Pair_fst _10) _30) (Apps_Fpt_m3z (Pair_snd _11) (U120_inc _26))};
    dup _16 _17 = inc_y;
    let cond = (Bool_and (U120_is0 _23) (U120_is0 _21));
    (Bool_if cond {T2 (Apps_Fpt_m3z (Pair_fst _12) _31) (Apps_Fpt_m3z (Pair_snd _13) _27)} (Cmp_match cmp _16 (Bool_if y_prio _17 _18) _19))
}

// Cmp.match (x: (Cmp)) -(p: (x: (Cmp)) Type) (ltn: (p (Cmp.ltn))) (eql: (p (Cmp.eql))) (gtn: (p (Cmp.gtn))) : (p x)
fun (Cmp_match x ltn eql gtn) {
  (Cmp_match {Cmp_ltn} ltn ~ ~) =
    ltn
  (Cmp_match {Cmp_eql} ~ eql ~) =
    eql
  (Cmp_match {Cmp_gtn} ~ ~ gtn) =
    gtn
}

// Cmp.ltn : (Cmp)
ctr {Cmp_ltn}

// Cmp.gtn : (Cmp)
ctr {Cmp_gtn}

// Cmp.eql : (Cmp)
ctr {Cmp_eql}

// Apps.Fpt.U120.get_neg (n: (U120)) (m: (U120)) : (U120)
fun (Apps_Fpt_m3z n m) {
  (Apps_Fpt_m3z n m) =
    dup _2 _3 = m;
    dup _0 _1 = n;
    let is_positive = (U120_gtns (- #0 _0) _1);
    (Bool_if is_positive (- #0 _2) _3)
}

// U120.compare (a: (U120)) (b: (U120)) : (Cmp)
fun (U120_compare a b) {
  (U120_compare a b) =
    dup _2 _3 = a;
    dup _0 _1 = b;
    (Bool_if (U120_ltn _2 _0) {Cmp_ltn} (Bool_if (U120_equal _3 _1) {Cmp_eql} {Cmp_gtn}))
}

// Apps.Fpt.Interaction.monster.get_pos_from_id (id: (Apps.Fpt.Id)) : (Apps.Fpt.Interaction (Apps.Fpt.Pos))
fun (Fpt_itr_mgpi id) {
  (Fpt_itr_mgpi id) =
    (Fpt_itr_bind (Fpt_itr_egfi id) @monster dup _0 _1 = monster;
    let pos = (Fpt_pos_new (Fpt_plr_pgx _0) (Fpt_plr_pgy _1));
    (Fpt_itr_pure pos))
}

// Apps.Fpt.Interaction.damage.death (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_ddth pos) {
  (Fpt_itr_ddth pos) =
    dup _0 _1 = pos;
    dup _2 _3 = _0;
    (Fpt_itr_bind (Fpt_itr_egia _1) @id dup _4 _5 = id;
    (Fpt_itr_bind (Fpt_itr_edai _4) @~ (Fpt_itr_bind (Fpt_itr_mdel _2) @~ let event = {Fpt_evt_dth (Sigma_fst _3) _5};
    (Fpt_itr_evad event))))
}

// Apps.Fpt.Interaction.map.del (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_mdel pos) {
  (Fpt_itr_mdel pos) =
    @state dup _0 _1 = state;
    @player @target @frame let table = (Fpt_st_gtbl _0);
    let map = (Fpt_st_gmap _1);
    let new_map = (Fpt_map_del map pos);
    let new_state = {Fpt_st_new new_map table};
    {Fpt_itr_rnew {T0} new_state player target frame {List_nil}}
}

// Apps.Fpt.Event.death (pos: (U120)) (id: (U120)) : (Apps.Fpt.Event)
ctr {Fpt_evt_dth pos id}

// Apps.Fpt.Interaction.entity.del_at_id (id: (Apps.Fpt.Id)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_edai id) {
  (Fpt_itr_edai id) =
    (Fpt_itr_tblm @table (Fpt_tbl_del table id))
}

// Apps.Fpt.Table.del (map: (Apps.Fpt.Table)) (id: (Apps.Fpt.Id)) : (Apps.Fpt.Table)
fun (Fpt_tbl_del map id) {
  (Fpt_tbl_del map id) =
    (Fpt_tbl_set map #0 id)
}

// Apps.Fpt.Interaction.skill.event_use (skill_id: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_skev skill_id) {
  (Fpt_itr_skev skill_id) =
    (Fpt_itr_bind (Fpt_itr_pgxy) @ori (Fpt_itr_bind (Fpt_itr_tgtg) @target let target = (Sigma_fst target);
    let ori = (Sigma_fst ori);
    let event = {Fpt_evt_skll ori skill_id target};
    (Fpt_itr_evad event)))
}

// Apps.Fpt.Event.skill (ori: (U120)) (skill: (U120)) (target: (U120)) : (Apps.Fpt.Event)
ctr {Fpt_evt_skll ori skill target}

// Apps.Fpt.Interaction.player.cooldown (speed: (U120)) : (Apps.Fpt.Interaction (U120))
fun (Fpt_itr_plcd speed) {
  (Fpt_itr_plcd speed) =
    let cd = (/ #200 speed);
    (Fpt_itr_pure cd)
}

// Apps.Fpt.Interaction.player.cast_skill (cooldown: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_pcsk cooldown) {
  (Fpt_itr_pcsk cooldown) =
    (Fpt_itr_bind (Fpt_itr_pget) @player dup _12 _13 = player;
    dup _14 _15 = _12;
    let old_cd = (Fpt_plr_cdg _13);
    dup _8 _9 = old_cd;
    dup _10 _11 = _8;
    let silence = (Fpt_plr_slg _14);
    dup _6 _7 = silence;
    let root = (Fpt_plr_rtg _15);
    (Fpt_itr_bind (Fpt_itr_fget) @frame dup _4 _5 = frame;
    let can_cast = (U120_gte _4 (+ _9 _6));
    let new_cd = (+ _5 cooldown);
    dup _0 _1 = new_cd;
    dup _2 _3 = _0;
    let new_silence = (U120_sub_YzU (+ _10 _7) _1);
    let new_root = (U120_sub_YzU (+ _11 root) _2);
    let func = @player let player = (Fpt_plr_cds player _3);
    let player = (Fpt_plr_sls player new_silence);
    let player = (Fpt_plr_rts player new_root);
    player;
    (Fpt_itr_bind (Fpt_itr_chec can_cast) @~ (Fpt_itr_pmut func))))
}

// Apps.Fpt.Skill.quicksand : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_qsnd) {
  (Fpt_skl_qsnd) =
    let skill_id = #10;
    let root = #4;
    let range = #4;
    let area = #5;
    let speed = #20;
    (Fpt_itr_bind (Fpt_itr_skcr range) @~ (Fpt_itr_bind (Fpt_itr_plcd speed) @cooldown (Fpt_itr_bind (Fpt_itr_tgtg) @target let deltas = (Fpt_pos_ddia area);
    let area = (Fpt_pos_rnge target deltas);
    (Fpt_itr_bind (Fpt_itr_skev skill_id) @~ let func = @pos (Fpt_itr_bind (Apps_Fpt_KFK root pos) @~ (Fpt_itr_pure {T0}));
    (Fpt_itr_bind (Fpt_itr_agen func area) @~ (Fpt_itr_bind (Fpt_itr_pcsk cooldown) @~ (Fpt_itr_pure {T0})))))))
}

// Apps.Fpt.Pos.Delta.diamond (range: (U120)) : (List (Pair (U120) (U120)))
fun (Fpt_pos_ddia range) {
  (Fpt_pos_ddia #0) =
    {List_nil}
  (Fpt_pos_ddia range) =
    (Fpt_pos_diaa #1 (U120_decs range))
}

// Apps.Fpt.Pos.Delta.diamond.aux (x: (U120)) (y: (U120)) : (List (Pair (U120) (U120)))
fun (Fpt_pos_diaa x y) {
  (Fpt_pos_diaa limit #0) =
    dup _0 _1 = limit;
    dup _2 _3 = _0;
    let m_x = (- #0 _1);
    dup _4 _5 = m_x;
    let top = {T2 #0 _2};
    let bot = {T2 #0 _4};
    let rgt = {T2 _3 #0};
    let lft = {T2 _5 #0};
    {List_cons top {List_cons bot {List_cons rgt {List_cons lft {List_nil}}}}}
  (Fpt_pos_diaa x y) =
    dup _6 _7 = y;
    dup _8 _9 = _6;
    dup _10 _11 = _7;
    dup _0 _1 = x;
    dup _2 _3 = _0;
    dup _4 _5 = _1;
    let minus_x = (- #0 _2);
    dup _14 _15 = minus_x;
    let minus_y = (- #0 _8);
    dup _12 _13 = minus_y;
    let pos_pos = {T2 _3 _9};
    let pos_neg = {T2 _4 _12};
    let neg_pos = {T2 _14 _10};
    let neg_neg = {T2 _15 _13};
    let recursn = (Fpt_pos_diaa (U120_inc _5) (U120_decs _11));
    {List_cons pos_pos {List_cons pos_neg {List_cons neg_pos {List_cons neg_neg recursn}}}}
}

// Apps.Fpt.Interaction.area.generic (func: (_: (Apps.Fpt.Pos)) (Apps.Fpt.Interaction (Unit))) (coords: (List (Apps.Fpt.Pos))) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_agen func coords) {
  (Fpt_itr_agen func coords) =
    let func = @~ @pos (!func pos);
    (Apps_Fpt_x35 func {T0} coords)
}

// Apps.Fpt.Interaction.area -(a: Type) (int: (_: a) (_: (Apps.Fpt.Pos)) (Apps.Fpt.Interaction a)) (value: a) (coords: (List (Apps.Fpt.Pos))) : (Apps.Fpt.Interaction a)
fun (Apps_Fpt_x35 int value coords) {
  (Apps_Fpt_x35 ~ value {List_nil}) =
    (Fpt_itr_pure value)
  (Apps_Fpt_x35 int value {List_cons pos tail}) =
    dup _0 _1 = int;
    (Fpt_itr_bind (!(!_0 value) pos) @new_value (Apps_Fpt_x35 _1 new_value tail))
}

// Apps.Fpt.Interaction.player.add_root_at (amount: (U120)) (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Interaction (Unit))
fun (Apps_Fpt_KFK amount pos) {
  (Apps_Fpt_KFK amount pos) =
    dup _0 _1 = amount;
    let func = @player (Fpt_plr_rtch player @x (U120_max x _0));
    (Fpt_itr_bind (Fpt_itr_pmut func) @~ let event = {Fpt_evt_rtad (Sigma_fst pos) _1};
    (Fpt_itr_bind (Fpt_itr_evad event) @~ (Fpt_itr_pure {T0})))
}

// Apps.Fpt.Event.rt_add (pos: (U120)) (value: (U120)) : (Apps.Fpt.Event)
ctr {Fpt_evt_rtad pos value}

// U120.max (n: (U120)) (m: (U120)) : (U120)
fun (U120_max n m) {
  (U120_max n m) =
    dup _2 _3 = n;
    dup _0 _1 = m;
    let gtn = (U120_gtns _2 _0);
    (Bool_match gtn _3 _1)
}

// Apps.Fpt.Skill.fireball : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_fbal) {
  (Fpt_skl_fbal) =
    let skill_id = #1;
    let damage = #50;
    let range = #6;
    let area = #2;
    let speed = #35;
    (Fpt_itr_bind (Fpt_itr_skcr range) @~ (Fpt_itr_bind (Fpt_itr_plcd speed) @cooldown (Fpt_itr_bind (Fpt_itr_tgtg) @target dup _0 _1 = target;
    let deltas = (Fpt_pos_arn area);
    let around = (Fpt_pos_rnge _0 deltas);
    let coords = {List_cons _1 around};
    (Fpt_itr_bind (Fpt_itr_skev skill_id) @~ (Fpt_itr_bind (Fpt_itr_dmga damage coords) @~ (Fpt_itr_bind (Fpt_itr_pcsk cooldown) @~ (Fpt_itr_pure {T0})))))))
}

// Apps.Fpt.Interaction.damage.area (value: (U120)) (coords: (List (Apps.Fpt.Pos))) : (Apps.Fpt.Interaction (U120))
fun (Fpt_itr_dmga value coords) {
  (Fpt_itr_dmga value coords) =
    let func = @prev_dmg @pos (Fpt_itr_bind (Apps_Fpt_5ys value pos) @dmg (Fpt_itr_pure (+ prev_dmg dmg)));
    (Apps_Fpt_x35 func #0 coords)
}

// Apps.Fpt.Pos.Delta.around (range: (U120)) : (List (Pair (U120) (U120)))
fun (Fpt_pos_arn range) {
  (Fpt_pos_arn #0) =
    {List_nil}
  (Fpt_pos_arn range) =
    dup _0 _1 = range;
    dup _2 _3 = _0;
    dup _4 _5 = _1;
    let fst = {T2 _2 #0};
    let snd = {T2 (- #0 _3) #0};
    {List_cons fst {List_cons snd (Fpt_pos_arnv (U120_decs _4) _5)}}
}

// Apps.Fpt.Pos.Delta.around.variations (variations: (U120)) (range: (U120)) : (List (Pair (U120) (U120)))
fun (Fpt_pos_arnv variations range) {
  (Fpt_pos_arnv #0 range) =
    dup _0 _1 = range;
    dup _2 _3 = _0;
    let fst = {T2 #0 _1};
    let snd = {T2 #0 (- #0 _2)};
    {List_cons fst {List_cons snd (Fpt_pos_arn (U120_decs _3))}}
  (Fpt_pos_arnv var range) =
    dup _8 _9 = var;
    dup _10 _11 = _8;
    dup _12 _13 = _9;
    dup _14 _15 = _10;
    dup _16 _17 = _11;
    dup _18 _19 = _12;
    dup _20 _21 = _13;
    dup _22 _23 = _14;
    dup _0 _1 = range;
    dup _2 _3 = _0;
    dup _4 _5 = _1;
    dup _6 _7 = _2;
    let fst = {T2 _15 (- _3 _16)};
    let snd = {T2 _17 (- _18 _4)};
    let trd = {T2 (- #0 _19) (- _5 _20)};
    let frt = {T2 (- #0 _21) (- _22 _6)};
    {List_cons fst {List_cons snd {List_cons trd {List_cons frt (Fpt_pos_arnv (U120_decs _23) _7)}}}}
}

// Apps.Fpt.Skill.snowfall : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_snwf) {
  (Fpt_skl_snwf) =
    let skill_id = #6;
    let damage = #25;
    let range = #4;
    let area = #1;
    let speed = #30;
    let slow = #20;
    (Fpt_itr_bind (Fpt_itr_plcd speed) @cooldown (Fpt_itr_bind (Fpt_itr_tgtg) @target dup _2 _3 = target;
    (Fpt_itr_bind (Fpt_itr_skcr range) @~ let deltas = (Fpt_pos_dcrs area);
    let tttne = (Fpt_pos_rnge _2 deltas);
    let area = {List_cons _3 tttne};
    let func = @pos dup _0 _1 = pos;
    (Fpt_itr_bind (Apps_Fpt_5ys damage _0) @~ (Fpt_itr_bind (Apps_Fpt_cFN slow _1) @~ (Fpt_itr_pure {T0})));
    (Fpt_itr_bind (Fpt_itr_agen func area) @~ (Fpt_itr_bind (Fpt_itr_skev skill_id) @~ (Fpt_itr_bind (Fpt_itr_pcsk cooldown) @~ (Fpt_itr_pure {T0})))))))
}

// Apps.Fpt.Pos.Delta.cross (range: (U120)) : (List (Pair (U120) (U120)))
fun (Fpt_pos_dcrs range) {
  (Fpt_pos_dcrs #0) =
    {List_nil}
  (Fpt_pos_dcrs range) =
    dup _0 _1 = range;
    dup _2 _3 = _0;
    dup _4 _5 = _1;
    dup _6 _7 = _2;
    let edges = let top = {T2 (U120_0) _3};
    let bot = {T2 _4 (U120_0)};
    let lft = {T2 (U120_0) (- (U120_0) _5)};
    let rgt = {T2 (- (U120_0) _6) (U120_0)};
    {List_cons top {List_cons bot {List_cons lft {List_cons rgt {List_nil}}}}};
    (List_concat (Fpt_pos_dcrs (U120_decs _7)) edges)
}

// Apps.Fpt.Interaction.player.add_slow_at (amount: (U120)) (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Interaction (Unit))
fun (Apps_Fpt_cFN amount pos) {
  (Apps_Fpt_cFN amount pos) =
    (Fpt_itr_bind (Fpt_itr_fget) @frame dup _2 _3 = frame;
    (Fpt_itr_bind (Fpt_itr_egat pos) @player let coold = (Fpt_plr_cdg player);
    let real_cd = (U120_sub_YzU _2 coold);
    dup _0 _1 = real_cd;
    let has_cd = (U120_gtns _0 #0);
    (Apps_Fpt_i20 has_cd _3 _1 amount)))
}

// Apps.Fpt.Interaction.player.add_slow_at.if (b: (Bool)) (frame: (U120)) (real_cd: (U120)) (amount: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Apps_Fpt_i20 b frame real_cd amount) {
  (Apps_Fpt_i20 {Bool_true} ~ real_cd amount) =
    dup _0 _1 = real_cd;
    let slow_perc = (/ (* _0 amount) #100);
    let slow_perc = (U120_min (U120_inc _1) slow_perc);
    (Fpt_itr_pacd slow_perc)
  (Apps_Fpt_i20 {Bool_false} ~ ~ ~) =
    (Fpt_itr_pass)
}

// Apps.Fpt.Interaction.entity.get_at (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Interaction (Apps.Fpt.Player))
fun (Fpt_itr_egat pos) {
  (Fpt_itr_egat pos) =
    (Fpt_itr_bind (Fpt_itr_egia pos) @id (Fpt_itr_bind (Fpt_itr_tblg) @table let entity = (Fpt_tbl_get table id);
    (Fpt_itr_pure entity)))
}

// Apps.Fpt.Interaction.player.add_cd (cd: (U120)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_pacd cd) {
  (Fpt_itr_pacd cd) =
    (Fpt_itr_bind (Fpt_itr_fget) @frame let cd = (+ frame cd);
    let func = @player (Fpt_plr_cds player cd);
    (Fpt_itr_bind (Fpt_itr_pmut func) @~ (Fpt_itr_pure {T0})))
}

// Apps.Fpt.Skill.quickstep : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_qstp) {
  (Fpt_skl_qstp) =
    let ~ = #14;
    let power = #3;
    dup _4 _5 = power;
    let range = #1;
    let ~ = #2;
    let speed = #100;
    let self_root = #2;
    (Fpt_itr_bind (Fpt_itr_pgxy) @origin dup _0 _1 = origin;
    dup _2 _3 = _0;
    (Fpt_itr_bind (Fpt_itr_tgtg) @target let delta = (Fpt_pos_dget _1 target);
    (Fpt_itr_bind (Fpt_itr_plcd speed) @cooldown (Fpt_itr_bind (Fpt_itr_pcmv cooldown) @~ (Fpt_itr_bind (Fpt_itr_skcr range) @~ let f = @x let fst = (Pair_map_fst x @y (* y _4));
    let snd = (Pair_map_snd fst @y (* y _5));
    snd;
    (Fpt_itr_bind (Apps_Fpt_2wF _2 (!f delta)) @~ (Fpt_itr_bind (Apps_Fpt_KFK self_root _3) @~ (Fpt_itr_pure {T0}))))))))
}

// Pair.map_snd -(a: Type) -(b: Type) -(c: Type) (pair: (Pair a b)) (func: (_: b) c) : (Pair a c)
fun (Pair_map_snd pair func) {
  (Pair_map_snd {T2 p.fst p.snd} func) =
    {T2 p.fst (!func p.snd)}
}

// Pair.map_fst -(a: Type) -(b: Type) -(c: Type) (pair: (Pair a b)) (func: (_: a) c) : (Pair c b)
fun (Pair_map_fst pair func) {
  (Pair_map_fst {T2 p.fst p.snd} func) =
    {T2 (!func p.fst) p.snd}
}

// Apps.Fpt.Skill.stoneshot : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_stsh) {
  (Fpt_skl_stsh) =
    let skill_id = #9;
    let main_dmg = #25;
    let coll_dmg = #10;
    let range = #3;
    dup _2 _3 = range;
    let ~ = #3;
    let speed = #50;
    (Fpt_itr_bind (Fpt_itr_skcr _2) @~ (Fpt_itr_bind (Fpt_itr_plcd speed) @cooldown (Fpt_itr_bind (Fpt_itr_tgtg) @target dup _0 _1 = target;
    let func = @target @pos (Fpt_itr_bind (Apps_Fpt_5ys main_dmg target) @~ (Fpt_itr_bind (Apps_Fpt_5ys coll_dmg pos) @~ (Fpt_itr_pure {T0})));
    let delta = (Fpt_pos_dfsq _3);
    let area = (Fpt_pos_rnge _0 delta);
    (Fpt_itr_bind (Fpt_itr_agen (!func _1) area) @~ (Fpt_itr_bind (Fpt_itr_pcsk cooldown) @~ (Fpt_itr_bind (Fpt_itr_skev skill_id) @~ (Fpt_itr_pure {T0})))))))
}

// Apps.Fpt.Pos.Delta.filled_square (range: (U120)) : (List (Pair (U120) (U120)))
fun (Fpt_pos_dfsq range) {
  (Fpt_pos_dfsq #0) =
    {List_cons {T2 #0 #0} {List_nil}}
  (Fpt_pos_dfsq range) =
    dup _0 _1 = range;
    dup _2 _3 = _0;
    dup _4 _5 = _1;
    dup _6 _7 = _2;
    dup _8 _9 = _3;
    dup _10 _11 = _4;
    let r_neg = (- #0 _5);
    dup _12 _13 = r_neg;
    dup _14 _15 = _12;
    dup _16 _17 = _13;
    let top_right = {T2 _6 _7};
    let top_left = {T2 _14 _8};
    let bottom_right = {T2 _9 _15};
    let bottom_left = {T2 _16 _17};
    let edges = {List_cons top_right {List_cons top_left {List_cons bottom_right {List_cons bottom_left {List_nil}}}}};
    let hor_ver = (Fpt_pos_dfsa (U120_decs _10) _11);
    (List_concat edges hor_ver)
}

// Apps.Fpt.Pos.Delta.filled_square.aux (variation: (U120)) (range: (U120)) : (List (Pair (U120) (U120)))
fun (Fpt_pos_dfsa variation range) {
  (Fpt_pos_dfsa variation range) =
    dup _2 _3 = range;
    dup _4 _5 = _2;
    dup _0 _1 = variation;
    let horizontal = (Fpt_pos_dhor _0 _3);
    let vertical = (Fpt_pos_dver _1 _4);
    (List_concat (Fpt_pos_dfsq (U120_decs _5)) (List_concat vertical horizontal))
}

// Apps.Fpt.Pos.Delta.horizontal (variation: (U120)) (range: (U120)) : (List (Pair (U120) (U120)))
fun (Fpt_pos_dhor variation range) {
  (Fpt_pos_dhor #0 range) =
    dup _0 _1 = range;
    let top = {T2 #0 _0};
    let bot = {T2 #0 (- #0 _1)};
    {List_cons top {List_cons bot {List_nil}}}
  (Fpt_pos_dhor variation range) =
    dup _6 _7 = variation;
    dup _8 _9 = _6;
    dup _10 _11 = _7;
    dup _0 _1 = range;
    dup _2 _3 = _0;
    dup _4 _5 = _1;
    let v_neg = (- #0 _8);
    dup _14 _15 = v_neg;
    let r_neg = (- #0 _2);
    dup _12 _13 = r_neg;
    let t_rgt = {T2 _9 _3};
    let b_rgt = {T2 _14 _4};
    let t_lft = {T2 _10 _12};
    let b_lft = {T2 _15 _13};
    (List_concat (Fpt_pos_dhor (U120_decs _11) _5) {List_cons t_rgt {List_cons b_rgt {List_cons t_lft {List_cons b_lft {List_nil}}}}})
}

// Apps.Fpt.Pos.Delta.vertical (variation: (U120)) (range: (U120)) : (List (Pair (U120) (U120)))
fun (Fpt_pos_dver variation range) {
  (Fpt_pos_dver #0 range) =
    dup _0 _1 = range;
    let top = {T2 _0 #0};
    let bot = {T2 (- #0 _1) #0};
    {List_cons top {List_cons bot {List_nil}}}
  (Fpt_pos_dver variation range) =
    dup _6 _7 = variation;
    dup _8 _9 = _6;
    dup _10 _11 = _7;
    dup _0 _1 = range;
    dup _2 _3 = _0;
    dup _4 _5 = _1;
    let v_neg = (- #0 _8);
    dup _14 _15 = v_neg;
    let r_neg = (- #0 _2);
    dup _12 _13 = r_neg;
    let t_rgt = {T2 _3 _9};
    let b_rgt = {T2 _4 _14};
    let t_lft = {T2 _12 _10};
    let b_lft = {T2 _13 _15};
    (List_concat (Fpt_pos_dver (U120_decs _11) _5) {List_cons t_rgt {List_cons b_rgt {List_cons t_lft {List_cons b_lft {List_nil}}}}})
}

// Apps.Fpt.Skill.zephyr : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_azpr) {
  (Fpt_skl_azpr) =
    let skill_id = #13;
    let damage = #15;
    let range = #7;
    let ~ = #1;
    let speed = #80;
    (Fpt_itr_bind (Fpt_itr_skcr range) @~ (Fpt_itr_bind (Fpt_itr_plcd speed) @cooldown (Fpt_itr_bind (Fpt_itr_tgtg) @target (Fpt_itr_bind (Fpt_itr_skev skill_id) @~ (Fpt_itr_bind (Apps_Fpt_5ys damage target) @~ (Fpt_itr_bind (Fpt_itr_pcsk cooldown) @~ (Fpt_itr_pure {T0})))))))
}

// Apps.Fpt.Skill.stonewall : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_stwl) {
  (Fpt_skl_stwl) =
    let ~ = #12;
    let ~ = #10;
    let ~ = #4;
    let ~ = #3;
    let ~ = #30;
    (Fpt_itr_pure {T0})
}

// Apps.Fpt.Skill.gust : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_gust) {
  (Fpt_skl_gust) =
    let skill_id = #15;
    let power = #4;
    let ~ = #0;
    let ~ = #3;
    let speed = #30;
    (Fpt_itr_bind (Fpt_itr_plcd speed) @cooldown (Fpt_itr_bind (Fpt_itr_pgxy) @origin dup _2 _3 = origin;
    let deltas = (Fpt_pos_desq #1);
    let coords = (Fpt_pos_rnge _2 deltas);
    let func = @pos dup _0 _1 = pos;
    let delta = (Fpt_pos_dget _3 _0);
    let push = (Fpt_pos_dpsh delta power {Bool_true});
    (Fpt_itr_bind (Apps_Fpt_2wF _1 push) @~ (Fpt_itr_pure {T0}));
    (Fpt_itr_bind (Fpt_itr_agen func coords) @~ (Fpt_itr_bind (Fpt_itr_skev skill_id) @~ (Fpt_itr_bind (Fpt_itr_pcsk cooldown) @~ (Fpt_itr_pure {T0}))))))
}

// Apps.Fpt.Pos.Delta.push (delta: (Pair (U120) (U120))) (strength: (U120)) (y_prio: (Bool)) : (Pair (U120) (U120))
fun (Fpt_pos_dpsh delta strength y_prio) {
  (Fpt_pos_dpsh delta strength y_prio) =
    dup _0 _1 = delta;
    dup _2 _3 = _0;
    let attract = (Fpt_pos_datr _1 strength y_prio);
    dup _4 _5 = attract;
    let l_fst = (Pair_fst _4);
    let l_snd = (Pair_snd _5);
    let c_fst = (Pair_fst _2);
    let c_snd = (Pair_snd _3);
    let new_delta = {T2 (+ l_fst c_fst) (+ l_snd c_snd)};
    new_delta
}

// Apps.Fpt.Pos.Delta.attract (delta: (Pair (U120) (U120))) (strength: (U120)) (y_prio: (Bool)) : (Pair (U120) (U120))
fun (Fpt_pos_datr delta strength y_prio) {
  (Fpt_pos_datr delta strength y_prio) =
    dup _0 _1 = delta;
    let dx = (- #0 (Pair_fst _0));
    let dy = (- #0 (Pair_snd _1));
    let pernil = {T2 dx dy};
    (Fpt_pos_drpl pernil strength y_prio)
}

// Apps.Fpt.Pos.Delta.empty_square (range: (U120)) : (List (Pair (U120) (U120)))
fun (Fpt_pos_desq range) {
  (Fpt_pos_desq #0) =
    {List_nil}
  (Fpt_pos_desq range) =
    dup _0 _1 = range;
    dup _2 _3 = _0;
    dup _4 _5 = _1;
    dup _6 _7 = _2;
    dup _8 _9 = _3;
    dup _10 _11 = _4;
    dup _12 _13 = _5;
    dup _14 _15 = _6;
    let r_neg = (- #0 _7);
    dup _16 _17 = r_neg;
    dup _18 _19 = _16;
    dup _20 _21 = _17;
    let top_right = {T2 _8 _9};
    let top_left = {T2 _18 _10};
    let bottom_right = {T2 _11 _19};
    let bottom_left = {T2 _20 _21};
    let edges = {List_cons top_right {List_cons top_left {List_cons bottom_right {List_cons bottom_left {List_nil}}}}};
    let horizontal = (Fpt_pos_dhor (U120_decs _12) _13);
    let vertical = (Fpt_pos_dver (U120_decs _14) _15);
    let sides = (List_concat horizontal vertical);
    (List_concat sides edges)
}

// Apps.Fpt.Skill.flamering : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_frng) {
  (Fpt_skl_frng) =
    let skill_id = #3;
    let damage = #55;
    let range = #4;
    dup _0 _1 = range;
    let speed = #50;
    (Fpt_itr_bind (Fpt_itr_plcd speed) @cooldown (Fpt_itr_bind (Fpt_itr_tgtg) @target (Fpt_itr_bind (Fpt_itr_pgxy) @~ (Fpt_itr_bind (Fpt_itr_skcr _0) @~ let deltas = (Fpt_pos_rng _1);
    let ring = (Fpt_pos_rnge target deltas);
    (Fpt_itr_bind (Fpt_itr_dmga damage ring) @~ (Fpt_itr_bind (Fpt_itr_pcsk cooldown) @~ (Fpt_itr_bind (Fpt_itr_skev skill_id) @~ (Fpt_itr_pure {T0}))))))))
}

// Apps.Fpt.Pos.Delta.ring (range: (U120)) : (List (Pair (U120) (U120)))
fun (Fpt_pos_rng range) {
  (Fpt_pos_rng #0) =
    {List_nil}
  (Fpt_pos_rng #2) =
    let top_bot = (Fpt_pos_dhor (U120_1) (U120_2));
    let lft_rgt = (Fpt_pos_dver (U120_1) (U120_2));
    (List_concat top_bot lft_rgt)
  (Fpt_pos_rng range) =
    dup _0 _1 = range;
    dup _2 _3 = _0;
    dup _4 _5 = _1;
    dup _6 _7 = _2;
    dup _8 _9 = _3;
    dup _10 _11 = _4;
    dup _12 _13 = _5;
    let variation = (/ _6 (U120_2));
    dup _20 _21 = variation;
    dup _22 _23 = _20;
    dup _24 _25 = _21;
    dup _26 _27 = _22;
    dup _28 _29 = _23;
    let neg = @x (U120_inc (^ x (U120_maxval)));
    dup _14 _15 = neg;
    dup _16 _17 = _14;
    dup _18 _19 = _15;
    let quantity = (Fpt_pos_drgv _7);
    let top_r = {T2 _24 _8};
    let ~ = {T2 _9 (!_16 _25)};
    let bot_r = {T2 _10 (- (U120_0) _26)};
    let bot_l = {T2 (!_17 _27) (!_18 _11)};
    let top_l = {T2 (!_19 _12) _28};
    let diagols = (Fpt_pos_drga quantity top_r bot_r bot_l top_l);
    let top_bot = (Fpt_pos_draf _13 _29);
    (List_concat diagols top_bot)
}

// Apps.Fpt.Delta.ring.aux_diagonal (quantity: (U120)) (top_r: (Pair (U120) (U120))) (bot_r: (Pair (U120) (U120))) (bot_l: (Pair (U120) (U120))) (top_l: (Pair (U120) (U120))) : (List (Pair (U120) (U120)))
fun (Fpt_pos_drga quantity top_r bot_r bot_l top_l) {
  (Fpt_pos_drga #0 ~ ~ ~ ~) =
    {List_nil}
  (Fpt_pos_drga quantity top_r bot_r bot_l top_l) =
    let f = @a @b @x (Pair_match x @x.fst @x.snd {T2 (!a x.fst) (!b x.snd)});
    dup _20 _21 = f;
    dup _22 _23 = _20;
    dup _24 _25 = _21;
    let po = @x (+ #1 x);
    dup _14 _15 = po;
    dup _16 _17 = _14;
    dup _18 _19 = _15;
    let mo = @x (- x #1);
    dup _8 _9 = mo;
    dup _10 _11 = _8;
    dup _12 _13 = _9;
    let new_topr = (!(!(!_22 _16) _10) top_r);
    dup _6 _7 = new_topr;
    let new_botr = (!(!(!_23 _11) _12) bot_r);
    dup _4 _5 = new_botr;
    let new_botl = (!(!(!_24 _13) _17) bot_l);
    dup _2 _3 = new_botl;
    let new_topl = (!(!(!_25 _18) _19) top_l);
    dup _0 _1 = new_topl;
    let new_group = {List_cons _6 {List_cons _4 {List_cons _2 {List_cons _0 {List_nil}}}}};
    (List_concat (Fpt_pos_drga (U120_decs quantity) _7 _5 _3 _1) new_group)
}

// Apps.Fpt.Delta.ring.aux_flat (range: (U120)) (variation: (U120)) : (List (Pair (U120) (U120)))
fun (Fpt_pos_draf range variation) {
  (Fpt_pos_draf range variation) =
    dup _2 _3 = range;
    dup _0 _1 = variation;
    let top_bot = (Fpt_pos_dhor _0 _2);
    let lft_rgt = (Fpt_pos_dver _1 _3);
    (List_concat top_bot lft_rgt)
}

// Apps.Fpt.Delta.ring.aux_diagonal_variation (range: (U120)) : (U120)
fun (Fpt_pos_drgv range) {
  (Fpt_pos_drgv #0) =
    #0
  (Fpt_pos_drgv #1) =
    #0
  (Fpt_pos_drgv #2) =
    #0
  (Fpt_pos_drgv #3) =
    #1
  (Fpt_pos_drgv #4) =
    #1
  (Fpt_pos_drgv range) =
    (+ #1 (Fpt_pos_drgv (- range #2)))
}

// U120.2 : (U120)
fun (U120_2) {
  (U120_2) =
    #2
}

// Apps.Fpt.Skill.tremor : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_trmr) {
  (Fpt_skl_trmr) =
    let skill_id = #11;
    let damage = #25;
    let ~ = #0;
    let area = #5;
    let speed = #35;
    (Fpt_itr_bind (Fpt_itr_plcd speed) @cooldown (Fpt_itr_bind (Fpt_itr_pgxy) @origin let deltas = (Fpt_pos_arn area);
    let around = (Fpt_pos_rnge origin deltas);
    (Fpt_itr_bind (Fpt_itr_skev skill_id) @~ (Fpt_itr_bind (Fpt_itr_dmga damage around) @~ (Fpt_itr_bind (Fpt_itr_pcsk cooldown) @~ (Fpt_itr_pure {T0}))))))
}

// Apps.Fpt.Skill.healingwater : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_hwtr) {
  (Fpt_skl_hwtr) =
    let skill_id = #7;
    let ally_heal = #25;
    let self_heal = #10;
    let range = #7;
    let ~ = #1;
    let speed = #65;
    let self_root = #3;
    (Fpt_itr_bind (Fpt_itr_plcd speed) @cooldown (Fpt_itr_bind (Fpt_itr_pgxy) @origin dup _2 _3 = origin;
    (Fpt_itr_bind (Fpt_itr_tgtg) @target dup _0 _1 = target;
    (Fpt_itr_bind (Fpt_itr_skcr range) @~ let distance = (Fpt_pos_dist _2 _0);
    let quantity = (Bool_if (U120_equal distance #0) self_heal ally_heal);
    (Fpt_itr_bind (Apps_Fpt_QsQ quantity _1) @~ (Fpt_itr_bind (Apps_Fpt_KFK self_root _3) @~ (Fpt_itr_bind (Fpt_itr_pcsk cooldown) @~ (Fpt_itr_bind (Fpt_itr_skev skill_id) @~ (Fpt_itr_pure {T0})))))))))
}

// Apps.Fpt.Interaction.heal (value: (U120)) (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Interaction (U120))
fun (Apps_Fpt_QsQ value pos) {
  (Apps_Fpt_QsQ value pos) =
    dup _0 _1 = pos;
    dup _2 _3 = _0;
    dup _4 _5 = _1;
    let func = @player (Fpt_plr_heal player value);
    (Fpt_itr_bind (Fpt_itr_egat _2) @before (Fpt_itr_bind (Fpt_itr_emat func _3) @~ (Fpt_itr_bind (Fpt_itr_egat _4) @after dup _8 _9 = after;
    let real_heal = (Fpt_plr_hpdf _8 before);
    dup _6 _7 = real_heal;
    let health = (Fpt_plr_hpg _9);
    (Fpt_itr_bind (Apps_Fpt_81q _6 health _5) @~ (Fpt_itr_pure _7)))))
}

// Apps.Fpt.Interaction.heal.apply_event (real_heal: (U120)) (health: (U120)) (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Interaction (Unit))
fun (Apps_Fpt_81q real_heal health pos) {
  (Apps_Fpt_81q #0 ~ ~) =
    (Fpt_itr_pure {T0})
  (Apps_Fpt_81q real_heal ~ pos) =
    let event = {Fpt_evt_heal (Sigma_fst pos) real_heal};
    (Fpt_itr_bind (Fpt_itr_evad event) @~ (Fpt_itr_pure {T0}))
}

// Apps.Fpt.Player.heal (player: (Apps.Fpt.Player)) (heal: (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_heal player heal) {
  (Fpt_plr_heal player heal) =
    dup _0 _1 = player;
    let apply = @old_hp let result = (+ heal old_hp);
    let max_hp = (Fpt_plr_hpgm _0);
    (U120_min result max_hp);
    (Fpt_plr_hpch _1 @x (!apply x))
}

// Apps.Fpt.Player.hp.get_max (player: (Apps.Fpt.Player)) : (U120)
fun (Fpt_plr_hpgm player) {
  (Fpt_plr_hpgm player) =
    let level = (Apps_Fpt_CGf player);
    (Apps_Fpt_PF_ level)
}

// Apps.Fpt.Player.hp.get_max.aux (level: (U120)) : (U120)
fun (Apps_Fpt_PF_ level) {
  (Apps_Fpt_PF_ #1) =
    #250
  (Apps_Fpt_PF_ #2) =
    #280
  (Apps_Fpt_PF_ #3) =
    #325
  (Apps_Fpt_PF_ #4) =
    #385
  (Apps_Fpt_PF_ #5) =
    #460
  (Apps_Fpt_PF_ #6) =
    #550
  (Apps_Fpt_PF_ #7) =
    #655
  (Apps_Fpt_PF_ #8) =
    #775
  (Apps_Fpt_PF_ #9) =
    #910
  (Apps_Fpt_PF_ #10) =
    #1060
  (Apps_Fpt_PF_ #11) =
    #1225
  (Apps_Fpt_PF_ #12) =
    #1405
  (Apps_Fpt_PF_ #13) =
    #1600
  (Apps_Fpt_PF_ #14) =
    #1810
  (Apps_Fpt_PF_ #15) =
    #2035
  (Apps_Fpt_PF_ ~) =
    #250
}

// Apps.Fpt.Player.xp.get_level (player: (Apps.Fpt.Player)) : (U120)
fun (Apps_Fpt_CGf player) {
  (Apps_Fpt_CGf player) =
    let exp = (Fpt_plr_xp_g player);
    (Apps_Fpt_9kb (U120_1) exp)
}

// Apps.Fpt.Player.xp.get_level.go (level: (U120)) (xp: (U120)) : (U120)
fun (Apps_Fpt_9kb level xp) {
  (Apps_Fpt_9kb level xp) =
    dup _2 _3 = level;
    dup _4 _5 = _2;
    dup _0 _1 = xp;
    let tot = (Apps_Fpt_sje _3);
    (Bool_if (U120_ltn _0 tot) (U120_decs _4) (Apps_Fpt_9kb (U120_inc _5) _1))
}

// Apps.Fpt.Player.xp.total (level: (U120)) : (U120)
fun (Apps_Fpt_sje level) {
  (Apps_Fpt_sje #1) =
    #0
  (Apps_Fpt_sje #2) =
    #65
  (Apps_Fpt_sje #3) =
    #165
  (Apps_Fpt_sje #4) =
    #300
  (Apps_Fpt_sje #5) =
    #470
  (Apps_Fpt_sje #6) =
    #675
  (Apps_Fpt_sje #7) =
    #915
  (Apps_Fpt_sje #8) =
    #1190
  (Apps_Fpt_sje #9) =
    #1500
  (Apps_Fpt_sje #10) =
    #1845
  (Apps_Fpt_sje #11) =
    #2225
  (Apps_Fpt_sje #12) =
    #2640
  (Apps_Fpt_sje #13) =
    #3090
  (Apps_Fpt_sje #14) =
    #3575
  (Apps_Fpt_sje #15) =
    #4095
  (Apps_Fpt_sje ~) =
    (U120_maxval)
}

// Apps.Fpt.Player.xp.get (player: (Apps.Fpt.Player)) : (U120)
fun (Fpt_plr_xp_g player) {
  (Fpt_plr_xp_g player) =
    (Fpt_g_u120 player #29 #12)
}

// Apps.Fpt.Event.heal (pos: (U120)) (value: (U120)) : (Apps.Fpt.Event)
ctr {Fpt_evt_heal pos value}

// Apps.Fpt.Interaction.entity.mut_at (func: (_: (Apps.Fpt.Entity)) (Apps.Fpt.Entity)) (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_emat func pos) {
  (Fpt_itr_emat func pos) =
    (Fpt_itr_bind (Fpt_itr_egia pos) @entity_id let func = @table (Fpt_tbl_mut table func entity_id);
    (Fpt_itr_bind (Fpt_itr_tblm func) @~ (Fpt_itr_pure {T0})))
}

// Apps.Fpt.Skill.flamethrower : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_fthr) {
  (Fpt_skl_fthr) =
    let skill_id = #2;
    let damage = #40;
    let range = #1;
    dup _2 _3 = range;
    let ~ = #6;
    let speed = #50;
    (Fpt_itr_bind (Fpt_itr_plcd speed) @cooldown (Fpt_itr_bind (Fpt_itr_tgtg) @target dup _0 _1 = target;
    (Fpt_itr_bind (Fpt_itr_pgxy) @origin (Fpt_itr_bind (Fpt_itr_skcr _2) @~ let delta = (Fpt_pos_dget origin _0);
    let deltas = (Fpt_pos_dlin _3 delta);
    let line = (Fpt_pos_rnge _1 deltas);
    (Fpt_itr_bind (Fpt_itr_dmga damage line) @~ (Fpt_itr_bind (Fpt_itr_pcsk cooldown) @~ (Fpt_itr_bind (Fpt_itr_skev skill_id) @~ (Fpt_itr_pure {T0}))))))))
}

// Apps.Fpt.Pos.Delta.line (range: (U120)) (delta: (Pair (U120) (U120))) : (List (Pair (U120) (U120)))
fun (Fpt_pos_dlin range delta) {
  (Fpt_pos_dlin #0 ~) =
    {List_nil}
  (Fpt_pos_dlin range delta) =
    dup _2 _3 = range;
    dup _4 _5 = _2;
    dup _0 _1 = delta;
    let f = @x (Pair_match x @x.fst @x.snd {T2 (* _3 x.fst) (* _4 x.snd)});
    let new_delta = (!f _0);
    {List_cons new_delta (Fpt_pos_dlin (U120_decs _5) _1)}
}

// Apps.Fpt.Skill.whirlwind : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_wrwd) {
  (Fpt_skl_wrwd) =
    let skill_id = #16;
    let damage = #30;
    let range = #6;
    let area = #1;
    let speed = #60;
    (Fpt_itr_bind (Fpt_itr_skcr range) @~ (Fpt_itr_bind (Fpt_itr_plcd speed) @cooldown (Fpt_itr_bind (Fpt_itr_tgtg) @target let deltas = (Fpt_pos_dfsq area);
    let coords = (Fpt_pos_rnge target deltas);
    (Fpt_itr_bind (Fpt_itr_skev skill_id) @~ (Fpt_itr_bind (Fpt_itr_dmga damage coords) @~ (Fpt_itr_bind (Fpt_itr_pcsk cooldown) @~ (Fpt_itr_pure {T0})))))))
}

// Apps.Fpt.Skill.whirlwind_aux (list: (List (Pair (U120) (U120)))) (player_count: (U120)) (pos: (List (Apps.Fpt.Pos))) : (Apps.Fpt.Interaction (Unit))
fun (Apps_Fpt_Oqe list player_count pos) {
  (Apps_Fpt_Oqe {List_nil} ~ ~) =
    (Fpt_itr_pure {T0})
  (Apps_Fpt_Oqe {List_cons ~ ~} ~ {List_nil}) =
    (Fpt_itr_pure {T0})
  (Apps_Fpt_Oqe {List_cons ~ tail} player_count {List_cons ~ ptail}) =
    (Apps_Fpt_Oqe tail player_count ptail)
}

// Apps.Fpt.Skill.flamearrow : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_farw) {
  (Fpt_skl_farw) =
    let skill_id = #4;
    let damage = #40;
    let range = #7;
    let ~ = #1;
    let speed = #65;
    (Fpt_itr_bind (Fpt_itr_plcd speed) @cooldown (Fpt_itr_bind (Fpt_itr_pgxy) @origin (Fpt_itr_bind (Fpt_itr_tgtg) @target dup _0 _1 = target;
    let distance = (Fpt_pos_dist origin _0);
    let check = (U120_equal range distance);
    (Fpt_itr_bind (Fpt_itr_chec check) @~ (Fpt_itr_bind (Fpt_itr_skev skill_id) @~ (Fpt_itr_bind (Apps_Fpt_5ys damage _1) @~ (Fpt_itr_bind (Fpt_itr_pcsk cooldown) @~ (Fpt_itr_pure {T0}))))))))
}

// Apps.Fpt.Skill.pacify : (Apps.Fpt.Interaction (Unit))
fun (Fpt_skl_pacf) {
  (Fpt_skl_pacf) =
    let skill_id = #8;
    let silence = #40;
    let range = #5;
    let ~ = #1;
    let speed = #55;
    (Fpt_itr_bind (Fpt_itr_plcd speed) @cooldown (Fpt_itr_bind (Fpt_itr_pgxy) @origin (Fpt_itr_bind (Fpt_itr_tgtg) @target dup _0 _1 = target;
    let distance = (Fpt_pos_dist origin _0);
    let check = (U120_equal range distance);
    (Fpt_itr_bind (Fpt_itr_chec check) @~ (Fpt_itr_bind (Fpt_itr_psla silence _1) @~ (Fpt_itr_bind (Fpt_itr_pcsk cooldown) @~ (Fpt_itr_bind (Fpt_itr_skev skill_id) @~ (Fpt_itr_pure {T0}))))))))
}

// Apps.Fpt.Interaction.player.add_silence_at (amount: (U120)) (pos: (Apps.Fpt.Pos)) : (Apps.Fpt.Interaction (Unit))
fun (Fpt_itr_psla amount pos) {
  (Fpt_itr_psla amount pos) =
    dup _0 _1 = amount;
    let func = @player (Fpt_plr_slch player @x (U120_max x _0));
    (Fpt_itr_bind (Fpt_itr_pmut func) @~ let event = {Fpt_evt_slad (Sigma_fst pos) _1};
    (Fpt_itr_bind (Fpt_itr_evad event) @~ (Fpt_itr_pure {T0})))
}

// Apps.Fpt.Event.sl_add (pos: (U120)) (value: (U120)) : (Apps.Fpt.Event)
ctr {Fpt_evt_slad pos value}

// Apps.Fpt.Pos.Delta.get_from_data (data: (U120)) : (Pair (U120) (U120))
fun (Fpt_pos_dgxy data) {
  (Fpt_pos_dgxy data) =
    dup _0 _1 = data;
    let dx = (& _0 #15);
    let dy = (>> _1 #4);
    let func = @n dup _2 _3 = n;
    dup _4 _5 = _2;
    (Bool_if (U120_equal (/ _3 #8) #1) (- #0 (% _4 #8)) (% _5 #8));
    dup _6 _7 = func;
    {T2 (!_6 dx) (!_7 dy)}
}

// Apps.Fpt.Event.act_skill (pos: (U120)) (id: (U120)) (skill: (U120)) : (Apps.Fpt.Event)
ctr {Fpt_evt_skil pos id skill}

// Apps.Fpt.Action.get_id (action: (U120)) : (U120)
fun (Fpt_ac_gid action) {
  (Fpt_ac_gid action) =
    (Fpt_g_u120 action #0 #12)
}

// Data.BraunTree.make_array -(a: Type) (xs: (List a)) : (Data.BraunTree a)
fun (BrTree_mkary xs) {
  (BrTree_mkary xs) =
    let rows = (BrTree_crrow #1 xs);
    let func = @elem @acc (BrTree_build elem acc);
    let trees = (List_foldr {List_cons {BrTree_leaf} {List_nil}} func rows);
    (List_match trees {BrTree_leaf} @trees.head @~ trees.head)
}

// Data.BraunTree.build -(a: Type) (rows: (Pair (U120) (List a))) (ts: (List (Data.BraunTree a))) : (List (Data.BraunTree a))
fun (BrTree_build rows ts) {
  (BrTree_build rows ts) =
    dup _0 _1 = rows;
    let k = (U120_to_nat (Pair_fst _0));
    dup _4 _5 = k;
    let xs = (Pair_snd _1);
    let pair = (List_splitjL (List_concat ts (List_repeat (Nat_double _4) {BrTree_leaf})) _5);
    dup _2 _3 = pair;
    let ts0 = (Pair_fst _2);
    let ts1 = (Pair_snd _3);
    (List_zip_xLJ @a @b @c (BrTree_mknde a b c) xs ts0 ts1)
}

// Data.BraunTree.make_node -(a: Type) (val: a) (lft: (Data.BraunTree a)) (rgt: (Data.BraunTree a)) : (Data.BraunTree a)
fun (BrTree_mknde val lft rgt) {
  (BrTree_mknde val lft rgt) =
    {BrTree_node val lft rgt}
}

// Data.BraunTree.node -(a: Type) (val: a) (lft: (Data.BraunTree a)) (rgt: (Data.BraunTree a)) : (Data.BraunTree a)
ctr {BrTree_node val lft rgt}

// List.split_at -(a: Type) (xs: (List a)) (n: (Nat)) : (Pair (List a) (List a))
fun (List_splitjL xs n) {
  (List_splitjL xs {Nat_zero}) =
    {T2 {List_nil} xs}
  (List_splitjL {List_nil} {Nat_succ ~}) =
    {T2 {List_nil} {List_nil}}
  (List_splitjL {List_cons x xs} {Nat_succ n}) =
    let tail = (List_splitjL xs n);
    dup _0 _1 = tail;
    let fst = (Pair_fst _0);
    let snd = (Pair_snd _1);
    {T2 {List_cons x fst} snd}
}

// List.repeat -(a: Type) (times: (Nat)) (val: a) : (List a)
fun (List_repeat times val) {
  (List_repeat {Nat_zero} ~) =
    {List_nil}
  (List_repeat {Nat_succ pred} val) =
    dup _0 _1 = val;
    {List_cons _0 (List_repeat pred _1)}
}

// Nat.double (x: (Nat)) : (Nat)
fun (Nat_double x) {
  (Nat_double {Nat_succ x}) =
    {Nat_succ {Nat_succ (Nat_double x)}}
  (Nat_double {Nat_zero}) =
    {Nat_zero}
}

// List.zip_with_3 -(a: Type) -(b: Type) -(c: Type) -(d: Type) (f: (_: a) (_: b) (_: c) d) (as: (List a)) (bs: (List b)) (cs: (List c)) : (List d)
fun (List_zip_xLJ f as bs cs) {
  (List_zip_xLJ f {List_cons ah at} {List_cons bh bt} {List_cons ch ct}) =
    dup _0 _1 = f;
    {List_cons (!(!(!_0 ah) bh) ch) (List_zip_xLJ _1 at bt ct)}
  (List_zip_xLJ ~ ~ ~ ~) =
    {List_nil}
}

// Data.BraunTree.create_rows -(a: Type) (k: (U120)) (xs: (List a)) : (List (Pair (U120) (List a)))
fun (BrTree_crrow k xs) {
  (BrTree_crrow ~ {List_nil}) =
    {List_nil}
  (BrTree_crrow k xs) =
    dup _2 _3 = k;
    dup _4 _5 = _2;
    dup _6 _7 = _3;
    dup _0 _1 = xs;
    let head = {T2 _4 (List_take _0 (U120_to_nat _5))};
    let tail = (BrTree_crrow (* _6 #2) (List_drop _1 (U120_to_nat _7)));
    {List_cons head tail}
}

// List.drop -(a: Type) (xs: (List a)) (n: (Nat)) : (List a)
fun (List_drop xs n) {
  (List_drop xs {Nat_zero}) =
    xs
  (List_drop {List_cons ~ tail} {Nat_succ pred}) =
    (List_drop tail pred)
  (List_drop {List_nil} ~) =
    {List_nil}
}

// List.take -(a: Type) (xs: (List a)) (n: (Nat)) : (List a)
fun (List_take xs n) {
  (List_take {List_cons head tail} {Nat_succ pred}) =
    {List_cons head (List_take tail pred)}
  (List_take {List_nil} {Nat_succ ~}) =
    {List_nil}
  (List_take ~ {Nat_zero}) =
    {List_nil}
}

// List.foldr -(a: Type) -(b: Type) (nil: b) (cons: (_: a) (_: b) b) (xs: (List a)) : b
fun (List_foldr nil cons xs) {
  (List_foldr nil ~ {List_nil}) =
    nil
  (List_foldr nil cons {List_cons x.h x.t}) =
    dup _0 _1 = cons;
    (!(!_0 x.h) (List_foldr nil _1 x.t))
}

// Apps.Fpt.Kindelia.Response.wrong_phase : (Apps.Fpt.Kindelia.Response)
ctr {Fpt_res_wrph}

// Apps.Fpt.Kindelia.To_start.new (pos: (List (U120))) (users: (User.Sipher.PatriciaTree)) (state: (Apps.Fpt.State)) (count: (U120)) : (Apps.Fpt.Kindelia.To_start)
ctr {Fpt_kdl_tsne pos users state count}

// Apps.Fpt.Kindelia.Response.queued (position: (U120)) : (Apps.Fpt.Kindelia.Response)
ctr {Fpt_res_qued position}

// Apps.Fpt.Kindelia.State.Phase.game (players: (User.Sipher.PatriciaTree)) : (Apps.Fpt.Kindelia.State.Phase)
ctr {Fpt_kdl_spga players}

// Apps.Fpt.Kindelia.Response.reseted : (Apps.Fpt.Kindelia.Response)
ctr {Fpt_res_rese}

// Apps.Fpt.Map.initial_positions : (List (U120))
fun (Fpt_map_inpo) {
  (Fpt_map_inpo) =
    {List_cons #34838 {List_cons #36374 {List_cons #36630 {List_cons #36886 {List_cons #35351 {List_cons #36631 {List_cons #34584 {List_cons #35352 {List_cons #34073 {List_cons #35609 {List_cons #34330 {List_cons #35866 {List_cons #37146 {List_cons #34587 {List_cons #35099 {List_cons #36891 {List_cons #34076 {List_cons #34588 {List_cons #36380 {List_cons #36892 {List_cons #34077 {List_cons #36637 {List_cons #34590 {List_cons #35870 {List_cons #36639 {List_cons #35105 {List_cons #34850 {List_nil}}}}}}}}}}}}}}}}}}}}}}}}}}}}
}

// Apps.Fpt.Kindelia.State.join (pos: (List (Apps.Fpt.Pos))) (game: (Apps.Fpt.State)) (players: (User.Sipher.PatriciaTree)) (subj: (U120)) : (Maybe (Pair (Apps.Fpt.State) (Apps.Fpt.Id)))
fun (Apps_Fpt_pzU pos game players subj) {
  (Apps_Fpt_pzU {List_nil} ~ ~ ~) =
    {Maybe_none}
  (Apps_Fpt_pzU {List_cons head tail} {Fpt_st_new map table} players subj) =
    dup _12 _13 = players;
    dup _6 _7 = head;
    dup _8 _9 = _6;
    dup _10 _11 = _7;
    dup _4 _5 = subj;
    dup _0 _1 = table;
    dup _2 _3 = _0;
    let player = (PGet _12 _4);
    (Maybe_match player let pair = (Fpt_map_got map _8);
    (Pair_match pair @pair.fst @pair.snd let map = pair.fst;
    dup _18 _19 = map;
    let tile = pair.snd;
    (Bool_if (U120_is0 tile) let id = (Apps_Fpt_xjg #1024 _1);
    dup _14 _15 = id;
    dup _16 _17 = _14;
    let map = (Fpt_map_set _18 _15 _9);
    let player = (Fpt_plr_dflt (Fpt_pos_getx _10) (Fpt_pos_gety _11));
    let table = (Fpt_tbl_set _2 player _16);
    let state = {Fpt_st_new map table};
    {Maybe_some {T2 state _17}} (Apps_Fpt_pzU tail {Fpt_st_new _19 _3} _13 _5))) @~ {Maybe_none})
}

// Apps.Fpt.Kindelia.State.join.id (id: (Apps.Fpt.Id)) (table: (Apps.Fpt.Table)) : (Apps.Fpt.Id)
fun (Apps_Fpt_xjg id table) {
  (Apps_Fpt_xjg id table) =
    dup _4 _5 = table;
    dup _0 _1 = id;
    dup _2 _3 = _0;
    let entity = (Fpt_tbl_get _4 _1);
    (Bool_if (U120_is0 entity) _2 (Apps_Fpt_xjg (U120_inc _3) _5))
}

// Apps.Fpt.Player.default (x: (U120)) (y: (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_dflt x y) {
  (Fpt_plr_dflt x y) =
    let hp = #250;
    let xp = #0;
    let rt = #0;
    let sl = #0;
    let gd = #50;
    let cd = #0;
    let skills = {List_cons #1 {List_nil}};
    (Fpt_plr_new x y hp xp rt sl gd cd skills)
}

// Apps.Fpt.Player.new (x: (U120)) (y: (U120)) (hp: (U120)) (xp: (U120)) (rt: (U120)) (sl: (U120)) (gd: (U120)) (cd: (U120)) (skills: (List (U120))) : (Apps.Fpt.Player)
fun (Fpt_plr_new x y hp xp rt sl gd cd skills) {
  (Fpt_plr_new x y hp xp rt sl gd cd skills) =
    let player = #0;
    let player = (Fpt_plr_posc player @~ (+ (<< y #8) x));
    let player = (Fpt_plr_hpch player @~ hp);
    let player = (Fpt_plr_xp_c player @~ xp);
    let player = (Fpt_plr_rtch player @~ rt);
    let player = (Fpt_plr_slch player @~ sl);
    let player = (Fpt_plr_gdch player @~ gd);
    let player = (Fpt_plr_cdch player @~ cd);
    let func = @skill_id @acc dup _0 _1 = acc;
    dup _2 _3 = _0;
    {T2 (Fpt_plr_skch (Pair_fst _1) (Pair_snd _2) @~ skill_id) (+ (Pair_snd _3) #1)};
    let pair = (List_foldl {T2 player #0} func skills);
    (Pair_fst pair)
}

// Apps.Fpt.Player.skills.change (player: (Apps.Fpt.Player)) (skill_id: (U120)) (f: (_: (U120)) (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_skch player skill_id f) {
  (Fpt_plr_skch player skill_id f) =
    (Fpt_m_u120 player (+ #71 (* skill_id #7)) #7 f)
}

// Apps.Fpt.Player.xp.change (player: (Apps.Fpt.Player)) (f: (_: (U120)) (U120)) : (Apps.Fpt.Player)
fun (Fpt_plr_xp_c player f) {
  (Fpt_plr_xp_c player f) =
    (Fpt_m_u120 player #29 #12 f)
}

// List.foldl -(a: Type) -(b: Type) (nil: b) (cons: (_: a) (_: b) b) (xs: (List a)) : b
fun (List_foldl nil cons xs) {
  (List_foldl nil ~ {List_nil}) =
    nil
  (List_foldl nil cons {List_cons x.h x.t}) =
    dup _0 _1 = cons;
    (List_foldl (!(!_0 x.h) nil) _1 x.t)
}

// User.Sipher.PatriciaTree.get (map: (User.Sipher.PatriciaTree)) (key: (U120)) : (Maybe (U120))
fun (PGet map key) {
  (PGet {PLeaf k v} key) =
    (PGetAux (U120_equal k key) v)
  (PGet {PBranch p m t0 t1} key) =
    dup _2 _3 = m;
    dup _0 _1 = key;
    (PGetAux1 (PMatPref _0 p _2) _1 _3 t0 t1)
}

// User.Sipher.PatriciaTree.getAux0 (b: (Bool)) (val: (U120)) : (Maybe (U120))
fun (PGetAux b val) {
  (PGetAux {Bool_true} val) =
    {Maybe_some val}
  (PGetAux {Bool_false} ~) =
    {Maybe_none}
}

// User.Sipher.PatriciaTree.getAux1 (b: (Bool)) (key: (U120)) (m: (U120)) (t0: (User.Sipher.PatriciaTree)) (t1: (User.Sipher.PatriciaTree)) : (Maybe (U120))
fun (PGetAux1 b key m t0 t1) {
  (PGetAux1 {Bool_false} ~ ~ ~ ~) =
    {Maybe_none}
  (PGetAux1 {Bool_true} k m t0 t1) =
    dup _0 _1 = k;
    (PGetAux2 (PZeroBit _0 m) _1 t0 t1)
}

// User.Sipher.PatriciaTree.getAux2 (b: (Bool)) (key: (U120)) (t0: (User.Sipher.PatriciaTree)) (t1: (User.Sipher.PatriciaTree)) : (Maybe (U120))
fun (PGetAux2 b key t0 t1) {
  (PGetAux2 {Bool_true} k t0 ~) =
    (PGet t0 k)
  (PGetAux2 {Bool_false} k ~ t1) =
    (PGet t1 k)
}

// Apps.Fpt.Kindelia.Response.act_fail : (Apps.Fpt.Kindelia.Response)
ctr {Fpt_res_noac}

// Apps.Fpt.Kindelia.Act.start : (Apps.Fpt.Kindelia.Act)
ctr {Fpt_act_strt}

// Apps.Fpt.Kindelia.Response.join_fail : (Apps.Fpt.Kindelia.Response)
ctr {Fpt_res_nojo}

// Apps.Fpt.Kindelia.Act.get : (Apps.Fpt.Kindelia.Act)
ctr {Fpt_act_get}

fun (Data_Limiugh x0 x1 x2 x3 x4 x5) {
  (Data_Limiugh pred acc func {Nat_succ ~} sort {Data_Limi7fi ~ head tail}) =
    dup _4 _5 = pred;
    dup _2 _3 = sort;
    dup _0 _1 = func;
    (Data_Limi66C _4 (!(!(!_0 _2) head) acc) _1 {Data_LimizaO _5 _3 tail})
}

// Data.LimitedQueue.Sorted.foldl -(a: Type) -(b: Type) (size: (Nat)) (acc: b) (func: (_: (_: a) (_: a) (Bool)) (_: a) (_: b) b) (queue: (Data.LimitedQueue.Sorted size a)) : b
fun (Data_Limi66C size acc func queue) {
  (Data_Limi66C {Nat_zero} acc ~ ~) =
    acc
  (Data_Limi66C {Nat_succ pred} acc func {Data_LimizaO .0 sort .1}) =
    (Data_Limiugh pred acc func .0 sort .1)
}

// Data.LimitedQueue.List.new (size: (Nat)) -(t: Type) (elem: t) (tail: (Data.LimitedQueue size t)) : (Data.LimitedQueue.List size t)
ctr {Data_Limi7fi size elem tail}

// Nat.pred (n: (Nat)) : (Nat)
fun (Nat_pred n) {
  (Nat_pred {Nat_zero}) =
    {Nat_zero}
  (Nat_pred {Nat_succ pred}) =
    pred
}

// Data.LimitedQueue.Sorted.new (size: (Nat)) -(t: Type) (sort: (_: t) (_: t) (Bool)) (queue: (Data.LimitedQueue size t)) : (Data.LimitedQueue.Sorted size t)
ctr {Data_LimizaO size sort queue}

// Apps.Fpt.Kindelia.Response.acted (data: (Data.BraunTree (Apps.Fpt.Event))) : (Apps.Fpt.Kindelia.Response)
ctr {Fpt_res_acte data}

// Apps.Fpt.Kindelia.State.Phase.User.kgt (user: (Apps.Fpt.Kindelia.State.Phase.User)) : (U120)
fun (Fpt_kdl_spuk user) {
  (Fpt_kdl_spuk {Fpt_kdl_spun ~ kgt}) =
    kgt
}

// Apps.Fpt.Kindelia.State.Phase.lobby (queue: (Data.LimitedQueue.Sorted (U120.to_nat (U120.new 0 10)) (Apps.Fpt.Kindelia.State.Phase.User))) : (Apps.Fpt.Kindelia.State.Phase)
ctr {Fpt_kdl_splo queue}

// Apps.Fpt.Kindelia.To_start.to_fold : (_: (Apps.Fpt.Kindelia.State.Phase.User)) (_: (Apps.Fpt.Kindelia.To_start)) (Apps.Fpt.Kindelia.To_start)
fun (Fpt_kdl_tstf) {
  (Fpt_kdl_tstf) =
    @user @acc (Fpt_kdl_tsma acc @acc.pos dup _8 _9 = acc.pos;
    @acc.users dup _6 _7 = acc.users;
    @acc.state @acc.count dup _4 _5 = acc.count;
    let ~ = _6;
    (Fpt_kdl_spum user @user.wallet @user.kgt let subj = user.wallet;
    let ~ = user.kgt;
    let state = acc.state;
    let pos = (Maybe_defXuG (List_head _8) #0);
    dup _2 _3 = pos;
    let id = (+ #1024 _4);
    dup _0 _1 = id;
    let x = (Fpt_pos_vgx _2);
    let y = (Fpt_pos_vgy _3);
    let player = (Fpt_plr_dflt x y);
    let new_users = (PSet _7 subj _0);
    let new_state = (Fpt_st_pplc state player _1);
    let new_pos = (List_tail _9);
    let new_count = (U120_inc _5);
    {Fpt_kdl_tsne new_pos new_users new_state new_count}))
}

// Apps.Fpt.State.player.place (state: (Apps.Fpt.State)) (player: (Apps.Fpt.Player)) (id: (Apps.Fpt.Id)) : (Apps.Fpt.State)
fun (Fpt_st_pplc state player id) {
  (Fpt_st_pplc {Fpt_st_new map tab} player id) =
    dup _12 _13 = player;
    dup _14 _15 = _12;
    dup _8 _9 = map;
    dup _10 _11 = _8;
    dup _4 _5 = id;
    dup _6 _7 = _4;
    dup _0 _1 = tab;
    dup _2 _3 = _0;
    let x = (Fpt_plr_pgx _13);
    let y = (Fpt_plr_pgy _14);
    let pos = (Fpt_pos_new x y);
    dup _16 _17 = pos;
    let map_id = (Fpt_map_got _9 _16);
    (Pair_match map_id @map_id.fst @map_id.snd (Bool_if (U120_equal #0 map_id.snd) let tab_ent = (Fpt_tbl_got _1 _5);
    (Pair_match tab_ent @tab_ent.fst @tab_ent.snd (Bool_if (U120_equal #0 tab_ent.snd) let tab = (Fpt_tbl_set tab_ent.fst _15 _6);
    let map = (Fpt_map_set map_id.fst _7 _17);
    {Fpt_st_new map tab} {Fpt_st_new _10 _2})) {Fpt_st_new _11 _3}))
}

// Maybe.default -(a: Type) (m: (Maybe a)) (dflt: a) : a
fun (Maybe_defXuG m dflt) {
  (Maybe_defXuG {Maybe_none} dflt) =
    dflt
  (Maybe_defXuG {Maybe_some val} ~) =
    val
}

// Apps.Fpt.Kindelia.To_start.match (x: (Apps.Fpt.Kindelia.To_start)) -(p: (x: (Apps.Fpt.Kindelia.To_start)) Type) (new: (pos: (List (U120))) (users: (User.Sipher.PatriciaTree)) (state: (Apps.Fpt.State)) (count: (U120)) (p (Apps.Fpt.Kindelia.To_start.new pos users state count))) : (p x)
fun (Fpt_kdl_tsma x new) {
  (Fpt_kdl_tsma {Fpt_kdl_tsne pos_ users_ state_ count_} new) =
    (!(!(!(!new pos_) users_) state_) count_)
}

// Apps.Fpt.Kindelia.State.Phase.User.match (x: (Apps.Fpt.Kindelia.State.Phase.User)) -(p: (x: (Apps.Fpt.Kindelia.State.Phase.User)) Type) (new: (wallet: (U120)) (kgt: (U120)) (p (Apps.Fpt.Kindelia.State.Phase.User.new wallet kgt))) : (p x)
fun (Fpt_kdl_spum x new) {
  (Fpt_kdl_spum {Fpt_kdl_spun wallet_ kgt_} new) =
    (!(!new wallet_) kgt_)
}

// List.head -(a: Type) (xs: (List a)) : (Maybe a)
fun (List_head xs) {
  (List_head {List_nil}) =
    {Maybe_none}
  (List_head {List_cons head ~}) =
    {Maybe_some head}
}

// List.tail -(a: Type) (xs: (List a)) : (List a)
fun (List_tail xs) {
  (List_tail {List_nil}) =
    {List_nil}
  (List_tail {List_cons ~ tail}) =
    tail
}

// Apps.Fpt.Kindelia.State.Phase.match (x: (Apps.Fpt.Kindelia.State.Phase)) -(p: (x: (Apps.Fpt.Kindelia.State.Phase)) Type) (lobby: (queue: (Data.LimitedQueue.Sorted (U120.to_nat (U120.new 0 10)) (Apps.Fpt.Kindelia.State.Phase.User))) (p (Apps.Fpt.Kindelia.State.Phase.lobby queue))) (game: (players: (User.Sipher.PatriciaTree)) (p (Apps.Fpt.Kindelia.State.Phase.game players))) : (p x)
fun (Fpt_kdl_spma x lobby game) {
  (Fpt_kdl_spma {Fpt_kdl_splo queue_} lobby ~) =
    (!lobby queue_)
  (Fpt_kdl_spma {Fpt_kdl_spga players_} ~ game) =
    (!game players_)
}

// Apps.Fpt.Kindelia.Act.join (subj: (U120)) (kgt: (U120)) : (Apps.Fpt.Kindelia.Act)
ctr {Fpt_act_join subj kgt}

// Apps.Fpt.Kindelia.State.get_state (state: (Apps.Fpt.Kindelia.State)) : (Apps.Fpt.State)
fun (Fpt_kdl_sgst state) {
  (Fpt_kdl_sgst {Fpt_kdl_snew ~ ~ state}) =
    state
}

fun (Data_LimiUtL x0 x1 x2 x3) {
  (Data_LimiUtL {Nat_zero} sort ~ value) =
    {T2 value {Data_LimizaO {Nat_zero} sort {T0}}}
}

fun (Data_Limi_qd x0 x1 x2 x3 x4) {
  (Data_Limi_qd pred {Nat_succ ~} sort {Data_Limi7fi ~ element tail} value) =
    dup _32 _33 = value;
    dup _34 _35 = _32;
    dup _28 _29 = element;
    dup _30 _31 = _28;
    dup _20 _21 = sort;
    dup _22 _23 = _20;
    dup _24 _25 = _21;
    dup _26 _27 = _22;
    dup _2 _3 = pred;
    dup _4 _5 = _2;
    dup _6 _7 = _3;
    dup _8 _9 = _4;
    dup _10 _11 = _5;
    dup _12 _13 = _6;
    dup _14 _15 = _7;
    dup _16 _17 = _8;
    dup _18 _19 = _9;
    dup _0 _1 = tail;
    let result = (!(!_23 _33) _29);
    (Bool_if result let recursion = (Data_Limiyl2 _10 {Data_LimizaO _11 _24 _0} _34);
    dup _36 _37 = recursion;
    let queue = {Data_Limi7fi _12 _30 (Data_LimisQa _13 (Pair_snd _36))};
    let removed = (Pair_fst _37);
    {T2 removed {Data_LimizaO {Nat_succ _14} _25 queue}} let recursion = (Data_Limiyl2 _15 {Data_LimizaO _16 _26 _1} _31);
    dup _38 _39 = recursion;
    let queue = {Data_Limi7fi _17 _35 (Data_LimisQa _18 (Pair_snd _38))};
    let removed = (Pair_fst _39);
    {T2 removed {Data_LimizaO {Nat_succ _19} _27 queue}})
}

// Data.LimitedQueue.Sorted.add -(a: Type) (size: (Nat)) (sorted_queue: (Data.LimitedQueue.Sorted size a)) (value: a) : (Pair a (Data.LimitedQueue.Sorted size a))
fun (Data_Limiyl2 size sorted_queue value) {
  (Data_Limiyl2 {Nat_zero} {Data_LimizaO .0 sort queue} value) =
    (Data_LimiUtL .0 sort queue value)
  (Data_Limiyl2 {Nat_succ pred} {Data_LimizaO .0 sort .1} value) =
    (Data_Limi_qd pred .0 sort .1 value)
}

// Data.LimitedQueue.Sorted.queue -(a: Type) (size: (Nat)) (queue: (Data.LimitedQueue.Sorted size a)) : (Data.LimitedQueue size a)
fun (Data_LimisQa size queue) {
  (Data_LimisQa ~ {Data_LimizaO ~ ~ queue}) =
    queue
}

// Apps.Fpt.Kindelia.State.Phase.init_lobby : (Apps.Fpt.Kindelia.State.Phase)
fun (Fpt_kdl_spil) {
  (Fpt_kdl_spil) =
    let size = (U120_to_nat #10);
    dup _0 _1 = size;
    let user = (Fpt_kdl_spue);
    let queue = {Data_LimizaO _0 @a @b (Fpt_kdl_spug a b) (Data_Limijf0 _1 user)};
    {Fpt_kdl_splo queue}
}

// Apps.Fpt.Kindelia.State.Phase.User.empty : (Apps.Fpt.Kindelia.State.Phase.User)
fun (Fpt_kdl_spue) {
  (Fpt_kdl_spue) =
    {Fpt_kdl_spun #0 #0}
}

// Data.LimitedQueue.init -(t: Type) (size: (Nat)) (default: t) : (Data.LimitedQueue size t)
fun (Data_Limijf0 size default) {
  (Data_Limijf0 {Nat_zero} ~) =
    {T0}
  (Data_Limijf0 {Nat_succ pred} default) =
    dup _2 _3 = pred;
    dup _0 _1 = default;
    {Data_Limi7fi _2 _0 (Data_Limijf0 _3 _1)}
}

// Apps.Fpt.Kindelia.State.Phase.User.greater_than (a: (Apps.Fpt.Kindelia.State.Phase.User)) (b: (Apps.Fpt.Kindelia.State.Phase.User)) : (Bool)
fun (Fpt_kdl_spug a b) {
  (Fpt_kdl_spug a b) =
    (U120_gtns (Fpt_kdl_spuk a) (Fpt_kdl_spuk b))
}

// Apps.Fpt.Kindelia.Response.start_fail (to_start: (U120)) : (Apps.Fpt.Kindelia.Response)
ctr {Fpt_res_nost to_start}

// Data.LimitedQueue.Sorted.find -(a: Type) (size: (Nat)) (cond: (_: a) (Bool)) (queue: (Data.LimitedQueue.Sorted size a)) : (Maybe (U120))
fun (Data_Limiw0W size cond queue) {
  (Data_Limiw0W size cond queue) =
    let acc = {T2 #0 {Bool_false}};
    let func = @~ @item @acc dup _0 _1 = acc;
    dup _2 _3 = _0;
    (Bool_if (Pair_snd _1) _2 let cond = (!cond item);
    let acc = (Pair_map_fst _3 @x (U120_inc x));
    let acc = (Pair_map_snd acc @x (Bool_or x cond));
    acc);
    let pair = (Data_Limi66C size acc func queue);
    dup _4 _5 = pair;
    (Bool_if (Pair_snd _4) {Maybe_some (Pair_fst _5)} {Maybe_none})
}

// Main : _
fun (Main) {
  (Main) =
    let list = {List_cons #3 {List_cons #8 {List_cons #14 {List_cons #232 {List_nil}}}}};
    dup _2 _3 = list;
    let size = (List_length _2);
    dup _0 _1 = size;
    let sort = @a @b (U60_gtn a b);
    let queue = {Data_LimizaO _0 sort (Data_LimiPNk _3)};
    let cond = @x (U60_equal #8 x);
    (Data_Limiw0W _1 cond queue)
}

// Data.LimitedQueue.from_list -(a: Type) (xs: (List a)) : (Data.LimitedQueue (List.length a xs) a)
fun (Data_LimiPNk xs) {
  (Data_LimiPNk {List_nil}) =
    {T0}
  (Data_LimiPNk {List_cons h t}) =
    dup _0 _1 = t;
    let size = (List_length _0);
    {Data_Limi7fi size h (Data_LimiPNk _1)}
}

// List.length -(a: Type) (xs: (List a)) : (Nat)
fun (List_length xs) {
  (List_length {List_nil}) =
    {Nat_zero}
  (List_length {List_cons ~ tail}) =
    {Nat_succ (List_length tail)}
}

// U60.equal (a: U60) (b: U60) : (Bool)
fun (U60_equal a b) {
  (U60_equal a b) =
    (U60_tbool (== a b))
}

// List.map -(a: Type) -(b: Type) (xs: (List a)) (f: (_: a) b) : (List b)
fun (List_map xs f) {
  (List_map {List_nil} ~) =
    {List_nil}
  (List_map {List_cons head tail} f) =
    dup _0 _1 = f;
    {List_cons (!_0 head) (List_map tail _1)}
}

// Apps.Fpt.Kindelia.Act.action (code: (U120)) : (Apps.Fpt.Kindelia.Act)
ctr {Fpt_act_act code}

fun (Data_Limidvt x0 x1 x2 x3) {
  (Data_Limidvt {Nat_zero} {Nat_zero} val {T0}) =
    {Maybe_some val}
  (Data_Limidvt n ~ ~ tail) =
    (Data_LimiM1b n tail)
}

// Data.LimitedQueue.get_last -(a: Type) (size: (Nat)) (xs: (Data.LimitedQueue size a)) : (Maybe a)
fun (Data_LimiM1b size xs) {
  (Data_LimiM1b {Nat_zero} {T0}) =
    {Maybe_none}
  (Data_LimiM1b {Nat_succ .0} {Data_Limi7fi .1 val .2}) =
    (Data_Limidvt .0 .1 val .2)
}

// Apps.Fpt.Kindelia.State.match (x: (Apps.Fpt.Kindelia.State)) -(p: (x: (Apps.Fpt.Kindelia.State)) Type) (new: (phase: (Apps.Fpt.Kindelia.State.Phase)) (start: (U120)) (state: (Apps.Fpt.State)) (p (Apps.Fpt.Kindelia.State.new phase start state))) : (p x)
fun (Fpt_kdl_smat x new) {
  (Fpt_kdl_smat {Fpt_kdl_snew phase_ start_ state_} new) =
    (!(!(!new phase_) start_) state_)
}

