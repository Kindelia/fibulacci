// U120_new #U120_new (hi: U60) (lo: U60) : (U120)
fun (U120_new hi lo) {
  (U120_new hi lo) = (+ (<< hi #60) (>> (<< lo #60) #60))
}

// Apps.Fib.State.init #Fib_st_init : (Apps.Fib.State)
fun (Fib_st_init) {
  (Fib_st_init) = let map = (Fib_map_allc); let tab = (Fib_tbl_allc); {Fib_st_new map tab}
}

// Apps.Fib.Map.alloc #Fib_map_allc : (Apps.Fib.Map)
fun (Fib_map_allc) {
  (Fib_map_allc) = (Bt_alloc (Fib_map_base) #0)
}

// List.nil #List_nil -(t: Type) : (List t)
ctr {List_nil}

// Data.BaseTree.Base.5 #Bt_base5 : (Data.BaseTree.Base)
ctr {Bt_base5}

// Data.BaseTree.Base.2 #Bt_base2 : (Data.BaseTree.Base)
ctr {Bt_base2}

// List.cons #List_cons -(t: Type) (head: t) (tail: (List t)) : (List t)
ctr {List_cons head tail}

// Apps.Fib.Map.Bases #Fib_map_base : (List (Data.BaseTree.Base))
fun (Fib_map_base) {
  (Fib_map_base) = {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base5} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_nil}}}}}}}}}}}
}

fun (Bt_alloc0_ x0 x1 x2) {
  (Bt_alloc0_ {Bt_base2} t default) = let m = (Bt_alloc t default); dup _0 _1 = m; {Bt_bin_tie _0 _1}
  (Bt_alloc0_ {Bt_base5} t default) = let m = (Bt_alloc t default); dup _0 _1 = m; dup _2 _3 = _0; dup _4 _5 = _1; dup _6 _7 = _2; {Bt_qui_tie _3 _4 _5 _6 _7}
}

// Data.BaseTree.alloc #Bt_alloc -(val: Type) (bases: (List (Data.BaseTree.Base))) (default: val) : (Data.BaseTree bases val)
fun (Bt_alloc bases default) {
  (Bt_alloc {List_nil} default) = default
  (Bt_alloc {List_cons .0 t} default) = (Bt_alloc0_ .0 t default)
}

// Data.BaseTree.Bin.tie #Bt_bin_tie -(r: Type) (b0: r) (b1: r) : (Data.BaseTree.Bin r)
ctr {Bt_bin_tie b0 b1}

// Data.BaseTree.Qui.tie #Bt_qui_tie -(r: Type) (b0: r) (b1: r) (b2: r) (b3: r) (b4: r) : (Data.BaseTree.Qui r)
ctr {Bt_qui_tie b0 b1 b2 b3 b4}

// Apps.Fib.Table.alloc #Fib_tbl_allc : (Apps.Fib.Table)
fun (Fib_tbl_allc) {
  (Fib_tbl_allc) = (Bt_alloc (Fib_tbl_bses) #0)
}

// Apps.Fib.Table.Bases #Fib_tbl_bses : (List (Data.BaseTree.Base))
fun (Fib_tbl_bses) {
  (Fib_tbl_bses) = {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_nil}}}}}}}}}}}}}
}

// Apps.Fib.State.new #Fib_st_new (map: (Apps.Fib.Map)) (tab: (Apps.Fib.Table)) : (Apps.Fib.State)
ctr {Fib_st_new map tab}

// Apps.Fib.State.update #Fib_st_upd (state: (Apps.Fib.State)) (action: (U120)) : (Apps.Fib.State)
fun (Fib_st_upd state action) {
  (Fib_st_upd {Fib_st_new map tab} action) = dup _6 _7 = action; dup _8 _9 = _6; dup _2 _3 = tab; dup _4 _5 = _2; dup _0 _1 = map; let data = (Fib_ac_gdata _7); dup _18 _19 = data; let comm = (Fib_ac_gcomm _8); dup _16 _17 = comm; let id = (Fib_ac_gid _9); dup _12 _13 = id; dup _14 _15 = _12; let ent_tab = (Fib_tbl_got _3 _13); (Pair_match ent_tab @~ @ent_tab.snd let ent = ent_tab.snd; dup _10 _11 = ent; (Bool_if (Bool_and (U120_equal _10 #0) (U120_equal _16 #8)) (Fib_st_crtu {Fib_st_new _0 _4} _14 _18) (Fib_st_updcm {Fib_st_new _1 _5} _17 _19 _15 _11)))
}

// Apps.Fib.State.update.command #Fib_st_updcm (state: (Apps.Fib.State)) (command: (U120)) (data: (U120)) (id: (Apps.Fib.Id)) (ent: (Apps.Fib.Entity)) : (Apps.Fib.State)
fun (Fib_st_updcm state command data id ent) {
  (Fib_st_updcm state #0 data id ent) = (Fib_st_walk state data ent id)
  (Fib_st_updcm state #1 ~ ~ ~) = state
  (Fib_st_updcm state #2 data ~ ent) = (Fib_st_updsk state #0 data ent)
  (Fib_st_updcm state #3 data ~ ent) = (Fib_st_updsk state #1 data ent)
  (Fib_st_updcm state #4 data ~ ent) = (Fib_st_updsk state #2 data ent)
  (Fib_st_updcm state #5 data ~ ent) = (Fib_st_updsk state #3 data ent)
  (Fib_st_updcm state #6 data ~ ent) = (Fib_st_updsk state #4 data ent)
  (Fib_st_updcm state #7 data ~ ent) = (Fib_st_updsk state #5 data ent)
}

// Apps.Fib.State.update.skill #Fib_st_updsk (state: (Apps.Fib.State)) (skill_id: (U120)) (data: (U120)) (entity: (Apps.Fib.Entity)) : (Apps.Fib.State)
fun (Fib_st_updsk state skill_id data entity) {
  (Fib_st_updsk state skill_id data entity) = dup _2 _3 = entity; dup _4 _5 = _2; dup _6 _7 = _3; dup _0 _1 = state; let skill = (Fib_plr_sk_g _4 skill_id); let pos = (Fib_pos_new (Fib_plr_p_gx _5) (Fib_plr_p_gy _6)); let delta = (Fib_pos_g_xy data); (Maybe_match (Fib_pos_mod pos delta) _0 @target.value (Fib_st_appsk _1 skill _7 target.value))
}

// Apps.Fib.Pos.get_xy_delta #Fib_pos_g_xy (data: (U120)) : (Pair (U120) (U120))
fun (Fib_pos_g_xy data) {
  (Fib_pos_g_xy data) = dup _0 _1 = data; let dx = (& _0 #15); let dy = (>> _1 #4); let func = @n dup _2 _3 = n; dup _4 _5 = _2; (Bool_if (U120_equal (/ _3 #8) #1) (- #0 (% _4 #8)) (% _5 #8)); dup _6 _7 = func; {Pair_new (_6 dx) (_7 dy)}
}

// Bool.if #Bool_if -(a: Type) (b: (Bool)) (t: a) (f: a) : a
fun (Bool_if b t f) {
  (Bool_if {Bool_true} t ~) = t
  (Bool_if {Bool_false} ~ f) = f
}

// Bool.true #Bool_true : (Bool)
ctr {Bool_true}

// Bool.false #Bool_false : (Bool)
ctr {Bool_false}

// U120.equal #U120_equal (a: (U120)) (b: (U120)) : (Bool)
fun (U120_equal a b) {
  (U120_equal a b) = (U120_tbool (== a b))
}

// U120.to_bool #U120_tbool (n: (U120)) : (Bool)
fun (U120_tbool n) {
  (U120_tbool #0) = {Bool_false}
  (U120_tbool ~) = {Bool_true}
}

// U120.div_mod #U120_dm (num: (U120)) (den: (U120)) : (Pair (U120) (U120))
fun (U120_dm num den) {
  (U120_dm ~ #0) = {Pair_new (U60_tu120 (/ #0 #0)) (U60_tu120 (% #0 #0))}
  (U120_dm num den) = dup _0 _1 = num; (Maybe_match (U120_msb _0) {Pair_new #0 #0} @msb.value let qr = {Pair_new #0 #0}; let idx = (U120_inc msb.value); (U120_dm_go idx qr _1 den))
}

// U120.div_mod.go #U120_dm_go (idx: (U120)) (qr: (Pair (U120) (U120))) (num: (U120)) (den: (U120)) : (Pair (U120) (U120))
fun (U120_dm_go idx qr num den) {
  (U120_dm_go #0 qr ~ ~) = qr
  (U120_dm_go idx qr num den) = dup _8 _9 = qr; dup _6 _7 = idx; dup _4 _5 = num; dup _0 _1 = den; dup _2 _3 = _0; let quo = (Pair_fst _8); dup _16 _17 = quo; let rem = (Pair_snd _9); let rem = (<< rem #1); let bit = (U120_dec _6); dup _14 _15 = bit; let rem = (+ rem (U120_getb _4 _14)); dup _10 _11 = rem; dup _12 _13 = _10; let qr = (Bool_if (U120_gte _11 _1) let quo = (U120_setb _16 _15); let rem = (- _12 _2); {Pair_new quo rem} {Pair_new _17 _13}); (U120_dm_go (U120_dec _7) qr _5 _3)
}

// Pair.fst #Pair_fst -(a: Type) -(b: Type) (pair: (Pair a b)) : a
fun (Pair_fst pair) {
  (Pair_fst {Pair_new fst ~}) = fst
}

// Pair.new #Pair_new -(a: Type) -(b: Type) (fst: a) (snd: b) : (Pair a b)
ctr {Pair_new fst snd}

// U120.set_bit #U120_setb (num: (U120)) (bit: (U120)) : (U120)
fun (U120_setb num bit) {
  (U120_setb num bit) = let bit = (<< #1 bit); (| num bit)
}

// U60.if #U60_if -(r: Type) (n: U60) (t: r) (f: r) : r
fun (U60_if n t f) {
  (U60_if #0 ~ f) = f
  (U60_if ~ t ~) = t
}

// Bool.or #Bool_or (a: (Bool)) (b: (Bool)) : (Bool)
fun (Bool_or a b) {
  (Bool_or {Bool_true} ~) = {Bool_true}
  (Bool_or {Bool_false} b) = b
}

// U60.less_than #U60_ltn (a: U60) (b: U60) : (Bool)
fun (U60_ltn a b) {
  (U60_ltn a b) = (U60_tbool (< a b))
}

// U60.to_bool #U60_tbool (n: U60) : (Bool)
fun (U60_tbool n) {
  (U60_tbool #0) = {Bool_false}
  (U60_tbool ~) = {Bool_true}
}

// U120.inc #U120_inc (n: (U120)) : (U120)
fun (U120_inc n) {
  (U120_inc n) = (+ n #1)
}

// U120.msb #U120_msb (n: (U120)) : (Maybe (U120))
fun (U120_msb n) {
  (U120_msb #0) = {Maybe_none}
  (U120_msb n) = {Maybe_some (- (U120_msb_go n) #1)}
}

// U120.msb.go #U120_msb_go (n: (U120)) : (U120)
fun (U120_msb_go n) {
  (U120_msb_go #0) = #0
  (U120_msb_go n) = (+ #1 (U120_msb_go (>> n #1)))
}

// Maybe.some #Maybe_some -(t: Type) (value: t) : (Maybe t)
ctr {Maybe_some value}

// Maybe.none #Maybe_none -(t: Type) : (Maybe t)
ctr {Maybe_none}

// U60.greater_than #U60_gtn (a: U60) (b: U60) : (Bool)
fun (U60_gtn a b) {
  (U60_gtn a b) = (U60_tbool (> a b))
}

// Maybe.match #Maybe_match -(t: Type) (x: (Maybe t)) -(p: (x: (Maybe t)) Type) (none: (p (Maybe.none t))) (some: (value: t) (p (Maybe.some t value))) : (p x)
fun (Maybe_match x none some) {
  (Maybe_match {Maybe_none} none ~) = none
  (Maybe_match {Maybe_some value_} ~ some) = (some value_)
}

// U120.dec #U120_dec (num: (U120)) : (U120)
fun (U120_dec num) {
  (U120_dec num) = (- num #1)
}

// U60.to_u120 #U60_tu120 (num: U60) : (U120)
fun (U60_tu120 num) {
  (U60_tu120 num) = (U120_new #0 num)
}

// U120.get_bit #U120_getb (num: (U120)) (bit: (U120)) : (U120)
fun (U120_getb num bit) {
  (U120_getb num bit) = (& (>> num bit) #1)
}

// U120.greater_equal #U120_gte (a: (U120)) (b: (U120)) : (Bool)
fun (U120_gte a b) {
  (U120_gte a b) = (U120_tbool (>= a b))
}

// Pair.snd #Pair_snd -(a: Type) -(b: Type) (pair: (Pair a b)) : b
fun (Pair_snd pair) {
  (Pair_snd {Pair_new ~ snd}) = snd
}

// Apps.Fib.State.apply_skill #Fib_st_appsk (state: (Apps.Fib.State)) (skill: (U120)) (entity: (U120)) (target: (Apps.Fib.Pos)) : (Apps.Fib.State)
fun (Fib_st_appsk state skill entity target) {
  (Fib_st_appsk state #0 ~ ~) = state
  (Fib_st_appsk state #1 entity target) = (Fib_sk_fireb state entity target)
  (Fib_st_appsk state #2 ~ ~) = state
  (Fib_st_appsk state #3 ~ ~) = state
  (Fib_st_appsk state #4 ~ ~) = state
}

// Apps.Fib.Pos.Value.get_x #Fib_pos_v_gx (val: (U120)) : (U120)
fun (Fib_pos_v_gx val) {
  (Fib_pos_v_gx val) = (& val #255)
}

// Apps.Fib.Pos.Value.get_y #Fib_pos_v_gy (val: (U120)) : (U120)
fun (Fib_pos_v_gy val) {
  (Fib_pos_v_gy val) = (>> val #8)
}

// U120.less_than #U120_ltn (a: (U120)) (b: (U120)) : (Bool)
fun (U120_ltn a b) {
  (U120_ltn a b) = (U120_tbool (< a b))
}

// Apps.Fib.Skill.fireball #Fib_sk_fireb (state: (Apps.Fib.State)) (player: (Apps.Fib.Player)) (pos: (Apps.Fib.Pos)) : (Apps.Fib.State)
fun (Fib_sk_fireb state player pos) {
  (Fib_sk_fireb {Fib_st_new map tab} player pos) = dup _4 _5 = player; dup _0 _1 = pos; dup _2 _3 = _0; let ~ = {Pair_new (Fib_pos_g_x _1) (Fib_pos_g_y _2)}; let deltas = (Fib_pos_arn #2); let x = (Fib_plr_p_gx _4); let y = (Fib_plr_p_gy _5); let coords = {List_cons _3 (Fib_pos_rnge (Fib_pos_new x y) deltas)}; let fold = (List_fold coords); let damage = @pos @state (Fib_st_pdmg state pos #50); ((fold {Fib_st_new map tab}) damage)
}

// Apps.Fib.Player.pos.get_x #Fib_plr_p_gx (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_p_gx player) {
  (Fib_plr_p_gx player) = (Fib_g_u120 player #0 #8)
}

// Apps.Fib.get_in_u120 #Fib_g_u120 (chunk: (U120)) (pos: (U120)) (size: (U120)) : (U120)
fun (Fib_g_u120 chunk pos size) {
  (Fib_g_u120 chunk pos size) = let mask = (- (<< #1 size) #1); let num = (& (>> chunk pos) mask); num
}

// Apps.Fib.State.player.damage #Fib_st_pdmg (state: (Apps.Fib.State)) (pos: (Apps.Fib.Pos)) (dmg: (U120)) : (Apps.Fib.State)
fun (Fib_st_pdmg state pos dmg) {
  (Fib_st_pdmg {Fib_st_new map table} pos dmg) = dup _8 _9 = pos; dup _6 _7 = table; dup _2 _3 = map; dup _4 _5 = _2; dup _0 _1 = dmg; let map_id = (Fib_map_got _3 _8); dup _22 _23 = map_id; let id = (Pair_snd _22); dup _16 _17 = id; dup _18 _19 = _16; dup _20 _21 = _17; (Bool_if (U120_is0 _18) {Fib_st_new _4 _6} let table_entity = (Fib_tbl_got _7 _19); dup _14 _15 = table_entity; let table = (Pair_fst _14); dup _12 _13 = table; let player = (Pair_snd _15); let player_hp = (Fib_plr_hp_g player); dup _10 _11 = player_hp; let dmg_gte = (U120_gte _0 _10); (Bool_if dmg_gte let new_player = @x (Fib_plr_dmg x _11); let new_table = (Fib_tbl_mut _12 new_player _20); let new_map = (Fib_map_del (Pair_fst _23) _9); {Fib_st_new new_map new_table} let new_player = @x (Fib_plr_dmg x _1); let new_table = (Fib_tbl_mut _13 new_player _21); {Fib_st_new _5 new_table}))
}

// Apps.Fib.Map.got #Fib_map_got (map: (Apps.Fib.Map)) (pos: (Apps.Fib.Pos)) : (Pair (Apps.Fib.Map) (Apps.Fib.Id))
fun (Fib_map_got map pos) {
  (Fib_map_got map pos) = let keys = (Fib_map_kfps pos); (Pair_match keys @keys.fst @keys.snd let p = (Bt_got (Fib_map_base) keys.fst map); (Pair_match p @p.fst @p.snd {Pair_new p.fst (Fib_map_gtil p.snd keys.snd)}))
}

// Apps.Fib.Map.get_tile #Fib_map_gtil (chunk: (U120)) (idx: (U120)) : (Apps.Fib.Id)
fun (Fib_map_gtil chunk idx) {
  (Fib_map_gtil chunk idx) = (& (>> chunk (* idx #12)) #4095)
}

// U120_low #U120_low (n: (U120)) : U60
fun (U120_low n) {
  (U120_low n) = (>> (<< n #60) #60)
}

// U120_high #U120_high (n: (U120)) : U60
fun (U120_high n) {
  (U120_high n) = (>> n #60)
}

// U60.mul.carrying #U60_mul_car (a: U60) (b: U60) : (U120)
fun (U60_mul_car a b) {
  (U60_mul_car a b) = dup _2 _3 = b; dup _0 _1 = a; let alo = (>> (<< _0 #30) #30); dup _18 _19 = alo; let ahi = (>> _1 #30); dup _16 _17 = ahi; let blo = (>> (<< _2 #30) #30); dup _14 _15 = blo; let bhi = (>> _3 #30); dup _12 _13 = bhi; let mul0 = (* _18 _14); let mul1 = (* _19 _12); dup _10 _11 = mul1; let mul2 = (* _16 _15); dup _8 _9 = mul2; let mul3 = (* _17 _13); let mul1.lo = (<< _10 #30); let mul2.lo = (<< _8 #30); let add.lo1 = (U60_add_ow mul0 mul1.lo); dup _6 _7 = add.lo1; let add.lo2 = (U60_add_ow (Pair_snd _6) mul2.lo); dup _4 _5 = add.lo2; let car.lo1 = (Bool_tu60 (Pair_fst _7)); let car.lo2 = (Bool_tu60 (Pair_fst _4)); let carry = (+ car.lo1 car.lo2); let c.lo = (Pair_snd _5); let mul1.hi = (>> _11 #30); let mul2.hi = (>> _9 #30); let c.hi = (+ mul1.hi (+ mul2.hi (+ mul3 carry))); (U120_new c.hi c.lo)
}

// U60.add.overflowing #U60_add_ow (a: U60) (b: U60) : (Pair (Bool) U60)
fun (U60_add_ow a b) {
  (U60_add_ow a b) = dup _0 _1 = a; let res = (+ _0 b); dup _2 _3 = res; let ovr = (U60_ltn _2 _1); {Pair_new ovr _3}
}

// Bool.to_u60 #Bool_tu60 (b: (Bool)) : U60
fun (Bool_tu60 b) {
  (Bool_tu60 {Bool_false}) = #0
  (Bool_tu60 {Bool_true}) = #1
}

// Pair.match #Pair_match -(a: Type) -(b: Type) (x: (Pair a b)) -(p: (x: (Pair a b)) Type) (new: (fst: a) (snd: b) (p (Pair.new a b fst snd))) : (p x)
fun (Pair_match x new) {
  (Pair_match {Pair_new fst_ snd_} new) = ((new fst_) snd_)
}

fun (Bt_got0_ x0 x1 x2 x3 x4) {
  (Bt_got0_ {Bt_base2} bs ks b0 b1) = (Pair_match (Bt_got bs ks b0) @res.fst @res.snd {Pair_new {Bt_bin_tie res.fst b1} res.snd})
}

fun (Bt_got1_ x0 x1 x2 x3 x4) {
  (Bt_got1_ {Bt_base2} bs ks b0 b1) = (Pair_match (Bt_got bs ks b1) @res.fst @res.snd {Pair_new {Bt_bin_tie b0 res.fst} res.snd})
}

fun (Bt_got2_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got2_ {Bt_base5} bs ks b0 b1 b2 b3 b4) = (Pair_match (Bt_got bs ks b0) @res.fst @res.snd {Pair_new {Bt_qui_tie res.fst b1 b2 b3 b4} res.snd})
}

fun (Bt_got3_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got3_ {Bt_base5} bs ks b0 b1 b2 b3 b4) = (Pair_match (Bt_got bs ks b1) @res.fst @res.snd {Pair_new {Bt_qui_tie b0 res.fst b2 b3 b4} res.snd})
}

fun (Bt_got4_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got4_ {Bt_base5} bs ks b0 b1 b2 b3 b4) = (Pair_match (Bt_got bs ks b2) @res.fst @res.snd {Pair_new {Bt_qui_tie b0 b1 res.fst b3 b4} res.snd})
}

fun (Bt_got5_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got5_ {Bt_base5} bs ks b0 b1 b2 b3 b4) = (Pair_match (Bt_got bs ks b3) @res.fst @res.snd {Pair_new {Bt_qui_tie b0 b1 b2 res.fst b4} res.snd})
}

fun (Bt_got6_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got6_ {Bt_base5} bs ks b0 b1 b2 b3 b4) = (Pair_match (Bt_got bs ks b4) @res.fst @res.snd {Pair_new {Bt_qui_tie b0 b1 b2 b3 res.fst} res.snd})
}

// Data.BaseTree.got #Bt_got -(v: Type) (bases: (List (Data.BaseTree.Base))) (key: (Data.BaseTree.Key bases)) (map: (Data.BaseTree bases v)) : (Pair (Data.BaseTree bases v) v)
fun (Bt_got bases key map) {
  (Bt_got {List_nil} {Unit_new} val) = dup _0 _1 = val; {Pair_new _0 _1}
  (Bt_got {List_cons .0 bs} {Bt_base_b0 ks} {Bt_bin_tie b0 b1}) = (Bt_got0_ .0 bs ks b0 b1)
  (Bt_got {List_cons .0 bs} {Bt_base_b1 ks} {Bt_bin_tie b0 b1}) = (Bt_got1_ .0 bs ks b0 b1)
  (Bt_got {List_cons .0 bs} {Bt_base_q0 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) = (Bt_got2_ .0 bs ks b0 b1 b2 b3 b4)
  (Bt_got {List_cons .0 bs} {Bt_base_q1 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) = (Bt_got3_ .0 bs ks b0 b1 b2 b3 b4)
  (Bt_got {List_cons .0 bs} {Bt_base_q2 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) = (Bt_got4_ .0 bs ks b0 b1 b2 b3 b4)
  (Bt_got {List_cons .0 bs} {Bt_base_q3 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) = (Bt_got5_ .0 bs ks b0 b1 b2 b3 b4)
  (Bt_got {List_cons .0 bs} {Bt_base_q4 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) = (Bt_got6_ .0 bs ks b0 b1 b2 b3 b4)
}

// Data.BaseTree.Base.Qui.3 #Bt_base_q3 -(r: Type) (pred: r) : (Data.BaseTree.Base.Qui r)
ctr {Bt_base_q3 pred}

// Data.BaseTree.Base.Bin.1 #Bt_base_b1 -(r: Type) (pred: r) : (Data.BaseTree.Base.Bin r)
ctr {Bt_base_b1 pred}

// Data.BaseTree.Base.Qui.0 #Bt_base_q0 -(r: Type) (pred: r) : (Data.BaseTree.Base.Qui r)
ctr {Bt_base_q0 pred}

// Data.BaseTree.Base.Qui.4 #Bt_base_q4 -(r: Type) (pred: r) : (Data.BaseTree.Base.Qui r)
ctr {Bt_base_q4 pred}

// Unit.new #Unit_new : (Unit)
ctr {Unit_new}

// Data.BaseTree.Base.Bin.0 #Bt_base_b0 -(r: Type) (pred: r) : (Data.BaseTree.Base.Bin r)
ctr {Bt_base_b0 pred}

// Data.BaseTree.Base.Qui.2 #Bt_base_q2 -(r: Type) (pred: r) : (Data.BaseTree.Base.Qui r)
ctr {Bt_base_q2 pred}

// Data.BaseTree.Base.Qui.1 #Bt_base_q1 -(r: Type) (pred: r) : (Data.BaseTree.Base.Qui r)
ctr {Bt_base_q1 pred}

// Apps.Fib.Map.Key.from_pos #Fib_map_kfps (pos: (Apps.Fib.Pos)) : (Pair (Apps.Fib.Map.Key) (U120))
fun (Fib_map_kfps pos) {
  (Fib_map_kfps pos) = dup _0 _1 = pos; let x = (Fib_pos_g_x _0); dup _2 _3 = x; let y = (Fib_pos_g_y _1); let key = (U120_low (+ (/ _2 #10) (* y #16))); {Pair_new (Bt_key_fu60 (Fib_map_base) #2560 (% key #2560)) (% _3 #10)}
}

// Apps.Fib.Pos.get_x #Fib_pos_g_x (pos: (Apps.Fib.Pos)) : (U120)
fun (Fib_pos_g_x pos) {
  (Fib_pos_g_x pos) = (& (Sigma_fst pos) #255)
}

// Sigma.fst #Sigma_fst -(a: Type) -(b: (_: a) Type) (s: (Sigma a b)) : a
fun (Sigma_fst s) {
  (Sigma_fst {Sigma_new x ~}) = x
}

// Sigma.new #Sigma_new -(a: Type) -(b: (_: a) Type) (fst: a) (snd: (b fst)) : (Sigma a b)
ctr {Sigma_new fst snd}

// Apps.Fib.Pos.get_y #Fib_pos_g_y (pos: (Apps.Fib.Pos)) : (U120)
fun (Fib_pos_g_y pos) {
  (Fib_pos_g_y pos) = (>> (Sigma_fst pos) #8)
}

// Data.BaseTree.Key.from_u60.base5 #Bt_key_fu605 (t: (List (Data.BaseTree.Base))) (q: U60) (m: U60) (n: U60) : (Data.BaseTree.Base.Qui (Data.BaseTree.Key t))
fun (Bt_key_fu605 t q m n) {
  (Bt_key_fu605 t #0 m n) = {Bt_base_q0 (Bt_key_fu60 t m n)}
  (Bt_key_fu605 t #1 m n) = {Bt_base_q1 (Bt_key_fu60 t m n)}
  (Bt_key_fu605 t #2 m n) = {Bt_base_q2 (Bt_key_fu60 t m n)}
  (Bt_key_fu605 t #3 m n) = {Bt_base_q3 (Bt_key_fu60 t m n)}
  (Bt_key_fu605 t #4 m n) = {Bt_base_q4 (Bt_key_fu60 t m n)}
}

// Data.BaseTree.Key.from_u60.base2 #Bt_key_fu602 (t: (List (Data.BaseTree.Base))) (q: U60) (m: U60) (n: U60) : (Data.BaseTree.Base.Bin (Data.BaseTree.Key t))
fun (Bt_key_fu602 t q m n) {
  (Bt_key_fu602 t #0 m n) = {Bt_base_b0 (Bt_key_fu60 t m n)}
  (Bt_key_fu602 t #1 m n) = {Bt_base_b1 (Bt_key_fu60 t m n)}
}

fun (Bt_key_fuAjN x0 x1 x2 x3) {
  (Bt_key_fuAjN {Bt_base2} t m n) = dup _0 _1 = n; let m = (/ m #2); dup _4 _5 = m; dup _6 _7 = _4; let d = (/ _0 _5); dup _2 _3 = d; let n = (- _1 (* _2 _6)); (Bt_key_fu602 t _3 _7 n)
  (Bt_key_fuAjN {Bt_base5} t m n) = dup _0 _1 = n; let m = (/ m #5); dup _4 _5 = m; dup _6 _7 = _4; let d = (/ _0 _5); dup _2 _3 = d; let n = (- _1 (* _2 _6)); (Bt_key_fu605 t _3 _7 n)
}

// Data.BaseTree.Key.from_u60 #Bt_key_fu60 (bases: (List (Data.BaseTree.Base))) (m: U60) (n: U60) : (Data.BaseTree.Key bases)
fun (Bt_key_fu60 bases m n) {
  (Bt_key_fu60 {List_nil} ~ ~) = {Unit_new}
  (Bt_key_fu60 {List_cons .0 t} m n) = (Bt_key_fuAjN .0 t m n)
}

// U120.is_zero #U120_is0 (n: (U120)) : (Bool)
fun (U120_is0 n) {
  (U120_is0 #0) = {Bool_true}
  (U120_is0 ~) = {Bool_false}
}

// Apps.Fib.Table.got #Fib_tbl_got (map: (Apps.Fib.Table)) (id: (Apps.Fib.Id)) : (Pair (Apps.Fib.Table) (Apps.Fib.Entity))
fun (Fib_tbl_got map id) {
  (Fib_tbl_got map id) = (Bt_got (Fib_tbl_bses) (Fib_tbl_fid id) map)
}

// Apps.Fib.Table.Key.from_id #Fib_tbl_fid (id: (U120)) : (Apps.Fib.Table.Key)
fun (Fib_tbl_fid id) {
  (Fib_tbl_fid id) = (Fib_tbl_fid0 (Fib_tbl_bses) id)
}

fun (Fib_tbl_fUod x0 x1 x2) {
  (Fib_tbl_fUod {Bt_base2} t id) = dup _0 _1 = id; (Fib_tbl_fid1 t (/ _0 #2) (% _1 #2))
}

// Apps.Fib.Table.Key.from_id.aux0 #Fib_tbl_fid0 (bases: (List (Data.BaseTree.Base))) (id: (U120)) : (Data.BaseTree.Key bases)
fun (Fib_tbl_fid0 bases id) {
  (Fib_tbl_fid0 {List_nil} ~) = {Unit_new}
  (Fib_tbl_fid0 {List_cons .0 t} id) = (Fib_tbl_fUod .0 t id)
}

// Apps.Fib.Table.Key.from_id.aux1 #Fib_tbl_fid1 (bases: (List (Data.BaseTree.Base))) (id: (U120)) (b: (U120)) : (Data.BaseTree.Base.Bin (Data.BaseTree.Key bases))
fun (Fib_tbl_fid1 bases id b) {
  (Fib_tbl_fid1 bases id #0) = {Bt_base_b0 (Fib_tbl_fid0 bases id)}
  (Fib_tbl_fid1 bases id #1) = {Bt_base_b1 (Fib_tbl_fid0 bases id)}
}

// Apps.Fib.Table.mut #Fib_tbl_mut (table: (Apps.Fib.Table)) (func: (_: (Apps.Fib.Entity)) (Apps.Fib.Entity)) (id: (Apps.Fib.Id)) : (Apps.Fib.Table)
fun (Fib_tbl_mut table func id) {
  (Fib_tbl_mut table func id) = (Bt_mut (Fib_tbl_bses) table (Fib_tbl_fid id) func)
}

fun (Bt_mut0_ x0 x1 x2 x3 x4 x5) {
  (Bt_mut0_ {Bt_base2} tail b0 b1 key func) = {Bt_bin_tie (Bt_mut tail b0 key func) b1}
}

fun (Bt_mut1_ x0 x1 x2 x3 x4 x5) {
  (Bt_mut1_ {Bt_base2} tail b0 b1 key func) = {Bt_bin_tie b0 (Bt_mut tail b1 key func)}
}

fun (Bt_mut2_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut2_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) = {Bt_qui_tie (Bt_mut tail b0 key func) b1 b2 b3 b4}
}

fun (Bt_mut3_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut3_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) = {Bt_qui_tie b0 (Bt_mut tail b1 key func) b2 b3 b4}
}

fun (Bt_mut4_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut4_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) = {Bt_qui_tie b0 b1 (Bt_mut tail b2 key func) b3 b4}
}

fun (Bt_mut5_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut5_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) = {Bt_qui_tie b0 b1 b2 (Bt_mut tail b3 key func) b4}
}

fun (Bt_mut6_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut6_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) = {Bt_qui_tie b0 b1 b2 b3 (Bt_mut tail b4 key func)}
}

// Data.BaseTree.mut #Bt_mut -(val: Type) (bases: (List (Data.BaseTree.Base))) (map: (Data.BaseTree bases val)) (key: (Data.BaseTree.Key bases)) (func: (_: val) val) : (Data.BaseTree bases val)
fun (Bt_mut bases map key func) {
  (Bt_mut {List_nil} end ~ func) = (func end)
  (Bt_mut {List_cons .0 tail} {Bt_bin_tie b0 b1} {Bt_base_b0 key} func) = (Bt_mut0_ .0 tail b0 b1 key func)
  (Bt_mut {List_cons .0 tail} {Bt_bin_tie b0 b1} {Bt_base_b1 key} func) = (Bt_mut1_ .0 tail b0 b1 key func)
  (Bt_mut {List_cons .0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q0 key} func) = (Bt_mut2_ .0 tail b0 b1 b2 b3 b4 key func)
  (Bt_mut {List_cons .0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q1 key} func) = (Bt_mut3_ .0 tail b0 b1 b2 b3 b4 key func)
  (Bt_mut {List_cons .0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q2 key} func) = (Bt_mut4_ .0 tail b0 b1 b2 b3 b4 key func)
  (Bt_mut {List_cons .0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q3 key} func) = (Bt_mut5_ .0 tail b0 b1 b2 b3 b4 key func)
  (Bt_mut {List_cons .0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q4 key} func) = (Bt_mut6_ .0 tail b0 b1 b2 b3 b4 key func)
}

// Apps.Fib.Player.damage #Fib_plr_dmg (player: (Apps.Fib.Player)) (dmg: (U120)) : (Apps.Fib.Player)
fun (Fib_plr_dmg player dmg) {
  (Fib_plr_dmg player dmg) = (Fib_plr_hp_c player @x (- x dmg))
}

// Apps.Fib.Player.hp.change #Fib_plr_hp_c (player: (Apps.Fib.Player)) (f: (_: (U120)) (U120)) : (Apps.Fib.Player)
fun (Fib_plr_hp_c player f) {
  (Fib_plr_hp_c player f) = (Fib_m_u120 player #28 #12 f)
}

// Apps.Fib.mut_in_u120 #Fib_m_u120 (chunk: (U120)) (pos: (U120)) (size: (U120)) (f: (_: (U120)) (U120)) : (U120)
fun (Fib_m_u120 chunk pos size f) {
  (Fib_m_u120 chunk pos size f) = dup _2 _3 = pos; dup _4 _5 = _2; dup _0 _1 = chunk; let mask = (- (<< #1 size) #1); dup _6 _7 = mask; let num = (& (>> _0 _3) _6); let num = (f num); let chunk = (& (U120_bwcom (<< _7 _4)) _1); let chunk = (| (<< num _5) chunk); chunk
}

// U120.bitwise_complement #U120_bwcom (n: (U120)) : (U120)
fun (U120_bwcom n) {
  (U120_bwcom n) = (^ n (U120_maxval))
}

// U120.max_val #U120_maxval : (U120)
fun (U120_maxval) {
  (U120_maxval) = #1329227995784915872903807060280344575
}

// Apps.Fib.Player.hp.get #Fib_plr_hp_g (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_hp_g player) {
  (Fib_plr_hp_g player) = (Fib_g_u120 player #28 #12)
}

// Apps.Fib.Map.del #Fib_map_del (map: (Apps.Fib.Map)) (pos: (Apps.Fib.Pos)) : (Apps.Fib.Map)
fun (Fib_map_del map pos) {
  (Fib_map_del map pos) = (Fib_map_set map #0 pos)
}

// Apps.Fib.Map.set #Fib_map_set (map: (Apps.Fib.Map)) (id: (Apps.Fib.Id)) (pos: (Apps.Fib.Pos)) : (Apps.Fib.Map)
fun (Fib_map_set map id pos) {
  (Fib_map_set map id pos) = let keys = (Fib_map_kfps pos); dup _0 _1 = keys; let key = (Pair_fst _0); let idx = (Pair_snd _1); let func = @chunk (Fib_s_u120 (* idx #12) id chunk); (Bt_mut (Fib_map_base) map key func)
}

// Apps.Fib.set_in_u120 #Fib_s_u120 (x: (U120)) (id: (Apps.Fib.Id)) (chunk: (U120)) : (U120)
fun (Fib_s_u120 x id chunk) {
  (Fib_s_u120 x id chunk) = let shl = @n (<< n x); dup _0 _1 = shl; let res = (| (& (U120_bwcom (_0 #4095)) chunk) (_1 id)); res
}

// List.fold #List_fold -(a: Type) -(p: Type) (xs: (List a)) : (_: p) (_: (_: a) (_: p) p) p
fun (List_fold xs) {
  (List_fold {List_nil}) = @nil @~ nil
  (List_fold {List_cons head tail}) = @nil @cons dup _0 _1 = cons; ((_0 head) (((List_fold tail) nil) _1))
}

// Apps.Fib.Player.pos.get_y #Fib_plr_p_gy (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_p_gy player) {
  (Fib_plr_p_gy player) = (Fib_g_u120 player #8 #8)
}

// Apps.Fib.Pos.around #Fib_pos_arn (range: (U120)) : (List (Pair (U120) (U120)))
fun (Fib_pos_arn range) {
  (Fib_pos_arn #0) = {List_nil}
  (Fib_pos_arn range) = dup _0 _1 = range; dup _2 _3 = _0; dup _4 _5 = _1; let fst = {Pair_new _2 #0}; let snd = {Pair_new (- #0 _3) #0}; {List_cons fst {List_cons snd (Fib_pos_arnv (U120_dec _4) _5)}}
}

// Apps.Fib.Pos.around.variations #Fib_pos_arnv (variations: (U120)) (range: (U120)) : (List (Pair (U120) (U120)))
fun (Fib_pos_arnv variations range) {
  (Fib_pos_arnv #0 range) = dup _0 _1 = range; dup _2 _3 = _0; let fst = {Pair_new #0 _1}; let snd = {Pair_new #0 (- #0 _2)}; {List_cons fst {List_cons snd (Fib_pos_arn (U120_dec _3))}}
  (Fib_pos_arnv var range) = dup _8 _9 = var; dup _10 _11 = _8; dup _12 _13 = _9; dup _14 _15 = _10; dup _16 _17 = _11; dup _18 _19 = _12; dup _20 _21 = _13; dup _22 _23 = _14; dup _0 _1 = range; dup _2 _3 = _0; dup _4 _5 = _1; dup _6 _7 = _2; let fst = {Pair_new _15 (- _3 _16)}; let snd = {Pair_new _17 (- _18 _4)}; let trd = {Pair_new (- #0 _19) (- _5 _20)}; let frt = {Pair_new (- #0 _21) (- _22 _6)}; {List_cons fst {List_cons snd {List_cons trd {List_cons frt (Fib_pos_arnv (U120_dec _23) _7)}}}}
}

// Apps.Fib.Pos.range #Fib_pos_rnge (center: (Apps.Fib.Pos)) (deltas: (List (Pair (U120) (U120)))) : (List (Apps.Fib.Pos))
fun (Fib_pos_rnge center deltas) {
  (Fib_pos_rnge ~ {List_nil}) = {List_nil}
  (Fib_pos_rnge center {List_cons head tail}) = dup _0 _1 = center; dup _2 _3 = _0; (Pair_match head @head.fst @head.snd let validate = @val (U120_ltn val #160); dup _10 _11 = validate; let x = (+ (Fib_pos_g_x _1) head.fst); dup _8 _9 = x; let y = (+ (Fib_pos_g_y _2) head.snd); dup _6 _7 = y; let is_valid = (Bool_and (_10 _8) (_11 _6)); let go = (Fib_pos_rnge _3 tail); dup _4 _5 = go; (Bool_match is_valid {List_cons (Fib_pos_new _9 _7) _4} _5))
}

// Apps.Fib.Pos.new #Fib_pos_new (x: (U120)) (y: (U120)) : (Apps.Fib.Pos)
fun (Fib_pos_new x y) {
  (Fib_pos_new x y) = dup _2 _3 = y; dup _0 _1 = x; let x.val = (% _0 #160); dup _10 _11 = x.val; dup _12 _13 = _10; let y.val = (% _2 #160); dup _6 _7 = y.val; dup _8 _9 = _6; let e0 = {U120_mod_ilt _1 #160 (Fib_pos_160n)}; dup _4 _5 = e0; let e1 = {U120_mod_ilt _3 #160 (Fib_pos_160n)}; {Sigma_new (Fib_pos_vnew _11 _7) {Pair_new (Fib_pos_vivx _12 _8 _4) (Fib_pos_vivy _13 _9 _5 e1)}}
}

// Pos.160_is_not_0 #Fib_pos_160n : (Not (Equal (U120) (U120_new 0 160) (U120_new 0 0)))
fun (Fib_pos_160n) {
  (Fib_pos_160n) = @absurd (Equal_rewrt absurd {Unit_new})
}

// Equal.rewrite #Equal_rewrt -(t: Type) -(a: t) -(b: t) (e: (Equal t a b)) -(p: (_: t) Type) (x: (p a)) : (p b)
fun (Equal_rewrt e x) {
  (Equal_rewrt {Equal_refl} x) = x
}

// Equal.refl #Equal_refl -(t: Type) -(a: t) : (Equal t a a)
ctr {Equal_refl}

// Apps.Fib.Pos.Value.IsValid.x #Fib_pos_vivx (x: (U120)) (y: (U120)) (e0: (Equal (Bool) (U120.less_than x (U120_new 0 160)) (Bool.true))) : (Equal (Bool) (U120.less_than (U120.bitwise_and (U120.bitwise_or (U120.shift_left y (U120_new 0 8)) x) (U120_new 0 255)) (U120_new 0 160)) (Bool.true))
fun (Fib_pos_vivx x y e0) {
  (Fib_pos_vivx x y e0) = dup _2 _3 = x; dup _4 _5 = _2; dup _6 _7 = _3; dup _8 _9 = _4; dup _0 _1 = y; let e1 = {U120_and_po (<< _0 #8) _5 #255}; let e2 = {U120_sl_mz _1 #8}; let e1.1 = (Equal_rewrt e2 e1); let e3 = {U120_or_zl (& _6 #255)}; let e1.2 = (Equal_rewrt e3 e1.1); let e4 = {U120_and_lea _7 #255}; let e5 = {U120_ile_clt (& _8 #255) _9 #160 e4 e0}; let e5.1 = (Equal_rewrt (Equal_mirr e1.2) e5); e5.1
}

// Equal.mirror #Equal_mirr -(t: Type) -(a: t) -(b: t) (e: (Equal t a b)) : (Equal t b a)
fun (Equal_mirr e) {
  (Equal_mirr {Equal_refl}) = {Equal_refl}
}

// U120.or.zero_left #U120_or_zl (a: (U120)) : (Equal (U120) (U120.bitwise_or (U120_new 0 0) a) a)
ctr {U120_or_zl a}

// U120.and.pass_or #U120_and_po (a: (U120)) (b: (U120)) (c: (U120)) : let x = (U120.bitwise_and (U120.bitwise_or a b) c); let y = (U120.bitwise_or (U120.bitwise_and a c) (U120.bitwise_and b c)); (Equal (U120) x y)
ctr {U120_and_po a b c}

// U120.and.less_equal_a #U120_and_lea (a: (U120)) (b: (U120)) : (U120.IsLessEqual (U120.bitwise_and a b) a)
ctr {U120_and_lea a b}

// U120.less_equal #U120_lte (a: (U120)) (b: (U120)) : (Bool)
fun (U120_lte a b) {
  (U120_lte a b) = (U120_tbool (<= a b))
}

// U120.shift_left.mask_zero #U120_sl_mz (a: (U120)) (s: (U120)) : let a = (U120.bitwise_and (U120.shift_left a s) (U120.sub (U120.shift_left (U120_new 0 1) s) (U120_new 0 1))); let b = (U120_new 0 0); (Equal (U120) a b)
ctr {U120_sl_mz a s}

// U120.IsLessEqual.chain.less_than #U120_ile_clt (a: (U120)) (b: (U120)) (c: (U120)) (e0: (U120.IsLessEqual a b)) (e1: (U120.IsLessThan b c)) : (U120.IsLessThan a c)
ctr {U120_ile_clt a b c e0 e1}

// U120.mod.is_less_than #U120_mod_ilt (a: (U120)) (b: (U120)) (e: (Not (Equal (U120) b (U120_new 0 0)))) : (U120.IsLessThan (U120.mod a b) b)
ctr {U120_mod_ilt a b e}

// Apps.Fib.Pos.Value.IsValid.y #Fib_pos_vivy (x: (U120)) (y: (U120)) (e0: (Equal (Bool) (U120.less_than x (U120_new 0 160)) (Bool.true))) (e1: (Equal (Bool) (U120.less_than y (U120_new 0 160)) (Bool.true))) : (Equal (Bool) (U120.less_than (U120.shift_right (U120.bitwise_or (U120.shift_left y (U120_new 0 8)) x) (U120_new 0 8)) (U120_new 0 160)) (Bool.true))
fun (Fib_pos_vivy x y e0 e1) {
  (Fib_pos_vivy x y e0 e1) = dup _4 _5 = y; dup _6 _7 = _4; dup _8 _9 = _5; dup _10 _11 = _6; dup _0 _1 = x; dup _2 _3 = _0; let e2 = {U120_ilt_clt _1 #160 #256 e0 {Equal_refl}}; let e3 = {U120_sr_zlel _2 #8 e2}; let e4 = {U120_sr_psor (<< _7 #8) _3 #8}; let e4.1 = (Equal_rewrt e3 e4); let e5 = {U120_or_zr (>> (<< _8 #8) #8)}; let e4.2 = (Equal_rewrt e5 e4.1); let e6 = {U120_sr_slle _9 #8}; let e7 = {U120_ile_clt (>> (<< _10 #8) #8) _11 #160 e6 e1}; let e7.1 = (Equal_rewrt (Equal_mirr e4.2) e7); e7.1
}

// U120.shift_right.zero_if_less_equal_length #U120_sr_zlel (a: (U120)) (b: (U120)) (e0: (Equal (Bool) (U120.less_than a (U120.shift_left (U120_new 0 1) b)) (Bool.true))) : (Equal (U120) (U120.shift_right a b) (U120_new 0 0))
ctr {U120_sr_zlel a b e0}

// U120.shift_right.pass_or #U120_sr_psor (a: (U120)) (b: (U120)) (c: (U120)) : let x = (U120.shift_right (U120.bitwise_or a b) c); let y = (U120.bitwise_or (U120.shift_right a c) (U120.shift_right b c)); (Equal (U120) x y)
ctr {U120_sr_psor a b c}

// U120.IsLessThan.chain.less_than #U120_ilt_clt (a: (U120)) (b: (U120)) (c: (U120)) (e0: (U120.IsLessThan a b)) (e1: (U120.IsLessThan b c)) : (U120.IsLessThan a c)
ctr {U120_ilt_clt a b c e0 e1}

// U120.shift_right.shl_less_equal #U120_sr_slle (a: (U120)) (b: (U120)) : (Equal (Bool) (U120.less_equal (U120.shift_right (U120.shift_left a b) b) a) (Bool.true))
ctr {U120_sr_slle a b}

// U120.or.zero_right #U120_or_zr (a: (U120)) : (Equal (U120) (U120.bitwise_or a (U120_new 0 0)) a)
ctr {U120_or_zr a}

// Apps.Fib.Pos.Value.new #Fib_pos_vnew (x: (U120)) (y: (U120)) : _
fun (Fib_pos_vnew x y) {
  (Fib_pos_vnew x y) = (| (<< y #8) x)
}

// Bool.and #Bool_and (a: (Bool)) (b: (Bool)) : (Bool)
fun (Bool_and a b) {
  (Bool_and {Bool_true} b) = b
  (Bool_and {Bool_false} ~) = {Bool_false}
}

// Bool.match #Bool_match (x: (Bool)) -(p: (x: (Bool)) Type) (true: (p (Bool.true))) (false: (p (Bool.false))) : (p x)
fun (Bool_match x true false) {
  (Bool_match {Bool_true} true ~) = true
  (Bool_match {Bool_false} ~ false) = false
}

// Apps.Fib.Player.skills.get #Fib_plr_sk_g (player: (Apps.Fib.Player)) (skill_id: (U120)) : (U120)
fun (Fib_plr_sk_g player skill_id) {
  (Fib_plr_sk_g player skill_id) = (Fib_g_u120 player (+ #84 (* skill_id #6)) #6)
}

// Apps.Fib.State.walk #Fib_st_walk (state: (Apps.Fib.State)) (data: (U120)) (entity: (Apps.Fib.Entity)) (id: (Apps.Fib.Id)) : (Apps.Fib.State)
fun (Fib_st_walk state data entity id) {
  (Fib_st_walk {Fib_st_new map table} data ~ id) = dup _4 _5 = data; dup _6 _7 = _4; dup _2 _3 = table; dup _0 _1 = map; let max_move = #2; let dx = (& _5 #15); let dy = (>> _6 #4); let real_change = @x (% x #8); dup _10 _11 = real_change; let gtn = (U120_gte max_move (+ (_10 dx) (_11 dy))); let delta_xy = (Fib_pos_g_xy _7); dup _8 _9 = delta_xy; let dx = (Pair_fst _8); let dy = (Pair_snd _9); (Bool_if gtn (Fib_st_move id dx dy {Fib_st_new _0 _2}) {Fib_st_new _1 _3})
}

// Apps.Fib.State.move #Fib_st_move (entity_id: (Apps.Fib.Id)) (dx: (U120)) (dy: (U120)) (state: (Apps.Fib.State)) : (Apps.Fib.State)
fun (Fib_st_move entity_id dx dy state) {
  (Fib_st_move entity_id dx dy {Fib_st_new map table}) = dup _2 _3 = table; dup _4 _5 = _2; dup _0 _1 = map; let tab_ent = (Fib_tbl_got _3 entity_id); let player = (Pair_snd tab_ent); dup _8 _9 = player; let x = (Fib_plr_p_gx _8); let y = (Fib_plr_p_gy _9); let origin_pos = (Fib_pos_new x y); dup _6 _7 = origin_pos; let modify = (Fib_pos_mod _6 {Pair_new dx dy}); (Maybe_match modify {Fib_st_new _0 _4} @modify.value (Fib_st_pmov {Fib_st_new _1 _5} _7 modify.value))
}

// Apps.Fib.State.player.move #Fib_st_pmov (state: (Apps.Fib.State)) (ori: (Apps.Fib.Pos)) (des: (Apps.Fib.Pos)) : (Apps.Fib.State)
fun (Fib_st_pmov state ori des) {
  (Fib_st_pmov {Fib_st_new map table} ori des) = dup _10 _11 = table; dup _8 _9 = ori; dup _4 _5 = map; dup _6 _7 = _4; dup _0 _1 = des; dup _2 _3 = _0; let destination_map_id = (Fib_map_got _5 _1); let empty_destination = (Fib_map_tlem (Pair_snd destination_map_id)); let origin_map_id = (Fib_map_got _6 _8); dup _12 _13 = origin_map_id; dup _14 _15 = _12; dup _16 _17 = _13; let table_entity_ori = (Fib_tbl_got _10 (Pair_snd _14)); (Bool_if empty_destination let new_player = @player (Fib_plr_p_c player @~ (Sigma_fst _2)); let new_table = (Fib_tbl_mut (Pair_fst table_entity_ori) new_player (Pair_snd _15)); let new_map = (Fib_map_del (Pair_fst _16) _9); let new_map = (Fib_map_set new_map (Pair_snd _17) _3); {Fib_st_new new_map new_table} {Fib_st_new _7 _11})
}

// Apps.Fib.Player.pos.change #Fib_plr_p_c (player: (Apps.Fib.Player)) (f: (_: (U120)) (U120)) : (Apps.Fib.Player)
fun (Fib_plr_p_c player f) {
  (Fib_plr_p_c player f) = (Fib_m_u120 player #0 #16 f)
}

// Apps.Fib.Map.tile_is_empty #Fib_map_tlem (tile: (U120)) : (Bool)
fun (Fib_map_tlem tile) {
  (Fib_map_tlem tile) = (U120_is0 tile)
}

// Apps.Fib.Pos.modify #Fib_pos_mod (pos: (Apps.Fib.Pos)) (delta: (Pair (U120) (U120))) : (Maybe (Apps.Fib.Pos))
fun (Fib_pos_mod pos delta) {
  (Fib_pos_mod pos delta) = let list = (Fib_pos_rnge pos {List_cons delta {List_nil}}); (List_match list {Maybe_none} @list.head @~ {Maybe_some list.head})
}

// List.match #List_match -(t: Type) (x: (List t)) -(p: (x: (List t)) Type) (nil: (p (List.nil t))) (cons: (head: t) (tail: (List t)) (p (List.cons t head tail))) : (p x)
fun (List_match x nil cons) {
  (List_match {List_nil} nil ~) = nil
  (List_match {List_cons head_ tail_} ~ cons) = ((cons head_) tail_)
}

// Apps.Fib.Action.get_comm #Fib_ac_gcomm (action: (U120)) : (U120)
fun (Fib_ac_gcomm action) {
  (Fib_ac_gcomm action) = (Fib_g_u120 action #12 #4)
}

// Apps.Fib.Action.get_id #Fib_ac_gid (action: (U120)) : (U120)
fun (Fib_ac_gid action) {
  (Fib_ac_gid action) = (Fib_g_u120 action #0 #12)
}

// Apps.Fib.State.create_unit #Fib_st_crtu (state: (Apps.Fib.State)) (id: (Apps.Fib.Id)) (data: (U120)) : (Apps.Fib.State)
fun (Fib_st_crtu state id data) {
  (Fib_st_crtu {Fib_st_new map tab} id data) = let spawn_pos = (Fib_st_crtuc (% data #4)); let new_player = (Pair_match spawn_pos @spawn_pos.fst @spawn_pos.snd (Fib_plr_dflt spawn_pos.fst spawn_pos.snd)); (Fib_st_pplc {Fib_st_new map tab} new_player id)
}

// Apps.Fib.State.create_unit.city #Fib_st_crtuc (data: (U120)) : (Pair (U120) (U120))
fun (Fib_st_crtuc data) {
  (Fib_st_crtuc #0) = {Pair_new #12 #12}
  (Fib_st_crtuc #1) = {Pair_new #147 #12}
  (Fib_st_crtuc #2) = {Pair_new #147 #147}
  (Fib_st_crtuc #3) = {Pair_new #12 #147}
}

// Apps.Fib.Player.default #Fib_plr_dflt (x: (U120)) (y: (U120)) : (Apps.Fib.Player)
fun (Fib_plr_dflt x y) {
  (Fib_plr_dflt x y) = let xp = #0; let hp = #100; let of = #0; let gd = #50; let cd = #0; let skills = {List_cons #1 {List_nil}}; (Fib_plr_new x y xp hp of gd cd skills)
}

// Apps.Fib.Player.new #Fib_plr_new (x: (U120)) (y: (U120)) (xp: (U120)) (hp: (U120)) (of: (U120)) (gd: (U120)) (cd: (U120)) (skills: (List (U120))) : (Apps.Fib.Player)
fun (Fib_plr_new x y xp hp of gd cd skills) {
  (Fib_plr_new x y xp hp of gd cd skills) = let player = #0; let player = (Fib_plr_p_c player @~ (+ (<< y #8) x)); let player = (Fib_plr_xp_c player @~ xp); let player = (Fib_plr_hp_c player @~ hp); let player = (Fib_plr_of_c player @~ of); let player = (Fib_plr_gd_c player @~ gd); let player = (Fib_plr_cd_c player @~ cd); let func = @skill_id @acc dup _0 _1 = acc; dup _2 _3 = _0; {Pair_new (Fib_plr_sk_c (Pair_fst _1) (Pair_snd _2) @~ skill_id) (+ (Pair_snd _3) #1)}; let pair = (List_foldl {Pair_new player #0} func skills); (Pair_fst pair)
}

// List.foldl #List_foldl -(a: Type) -(b: Type) (nil: b) (cons: (_: a) (_: b) b) (xs: (List a)) : b
fun (List_foldl nil cons xs) {
  (List_foldl nil ~ {List_nil}) = nil
  (List_foldl nil cons {List_cons x.h x.t}) = dup _0 _1 = cons; (List_foldl ((_0 x.h) nil) _1 x.t)
}

// Apps.Fib.Player.cd.change #Fib_plr_cd_c (player: (Apps.Fib.Player)) (f: (_: (U120)) (U120)) : (Apps.Fib.Player)
fun (Fib_plr_cd_c player f) {
  (Fib_plr_cd_c player f) = (Fib_m_u120 player #72 #12 f)
}

// Apps.Fib.Player.of.change #Fib_plr_of_c (player: (Apps.Fib.Player)) (f: (_: (U120)) (U120)) : (Apps.Fib.Player)
fun (Fib_plr_of_c player f) {
  (Fib_plr_of_c player f) = (Fib_m_u120 player #40 #16 f)
}

// Apps.Fib.Player.skills.change #Fib_plr_sk_c (player: (Apps.Fib.Player)) (skill_id: (U120)) (f: (_: (U120)) (U120)) : (Apps.Fib.Player)
fun (Fib_plr_sk_c player skill_id f) {
  (Fib_plr_sk_c player skill_id f) = (Fib_m_u120 player (+ #84 (* skill_id #6)) #6 f)
}

// Apps.Fib.Player.xp.change #Fib_plr_xp_c (player: (Apps.Fib.Player)) (f: (_: (U120)) (U120)) : (Apps.Fib.Player)
fun (Fib_plr_xp_c player f) {
  (Fib_plr_xp_c player f) = (Fib_m_u120 player #16 #12 f)
}

// Apps.Fib.Player.gd.change #Fib_plr_gd_c (player: (Apps.Fib.Player)) (f: (_: (U120)) (U120)) : (Apps.Fib.Player)
fun (Fib_plr_gd_c player f) {
  (Fib_plr_gd_c player f) = (Fib_m_u120 player #60 #12 f)
}

// Apps.Fib.State.player.place #Fib_st_pplc (state: (Apps.Fib.State)) (player: (Apps.Fib.Player)) (id: (Apps.Fib.Id)) : (Apps.Fib.State)
fun (Fib_st_pplc state player id) {
  (Fib_st_pplc {Fib_st_new map tab} player id) = dup _12 _13 = id; dup _14 _15 = _12; dup _8 _9 = tab; dup _10 _11 = _8; dup _4 _5 = player; dup _6 _7 = _4; dup _0 _1 = map; dup _2 _3 = _0; let x = (Fib_plr_p_gx _5); let y = (Fib_plr_p_gy _6); let pos = (Fib_pos_new x y); dup _16 _17 = pos; let map_id = (Fib_map_got _1 _16); (Pair_match map_id @map_id.fst @map_id.snd (Bool_if (U120_equal #0 map_id.snd) let tab_ent = (Fib_tbl_got _9 _13); (Pair_match tab_ent @tab_ent.fst @tab_ent.snd (Bool_if (U120_equal #0 tab_ent.snd) let tab = (Fib_tbl_set tab_ent.fst _7 _14); let map = (Fib_map_set map_id.fst _15 _17); {Fib_st_new map tab} {Fib_st_new _2 _10})) {Fib_st_new _3 _11}))
}

// Apps.Fib.Table.set #Fib_tbl_set (map: (Apps.Fib.Table)) (entity: (Apps.Fib.Entity)) (id: (Apps.Fib.Id)) : (Apps.Fib.Table)
fun (Fib_tbl_set map entity id) {
  (Fib_tbl_set map entity id) = (Bt_set (Fib_tbl_bses) (Fib_tbl_fid id) map entity)
}

fun (Bt_set0_ x0 x1 x2 x3 x4 x5) {
  (Bt_set0_ {Bt_base2} bs ks b0 b1 val) = {Bt_bin_tie (Bt_set bs ks b0 val) b1}
}

fun (Bt_set1_ x0 x1 x2 x3 x4 x5) {
  (Bt_set1_ {Bt_base2} bs ks b0 b1 val) = {Bt_bin_tie b0 (Bt_set bs ks b1 val)}
}

fun (Bt_set2_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set2_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) = {Bt_qui_tie (Bt_set bs ks b0 val) b1 b2 b3 b4}
}

fun (Bt_set3_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set3_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) = {Bt_qui_tie b0 (Bt_set bs ks b1 val) b2 b3 b4}
}

fun (Bt_set4_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set4_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) = {Bt_qui_tie b0 b1 (Bt_set bs ks b2 val) b3 b4}
}

fun (Bt_set5_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set5_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) = {Bt_qui_tie b0 b1 b2 (Bt_set bs ks b3 val) b4}
}

fun (Bt_set6_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set6_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) = {Bt_qui_tie b0 b1 b2 b3 (Bt_set bs ks b4 val)}
}

// Data.BaseTree.set #Bt_set -(v: Type) (bases: (List (Data.BaseTree.Base))) (key: (Data.BaseTree.Key bases)) (map: (Data.BaseTree bases v)) (val: v) : (Data.BaseTree bases v)
fun (Bt_set bases key map val) {
  (Bt_set {List_nil} {Unit_new} ~ val) = val
  (Bt_set {List_cons .0 bs} {Bt_base_b0 ks} {Bt_bin_tie b0 b1} val) = (Bt_set0_ .0 bs ks b0 b1 val)
  (Bt_set {List_cons .0 bs} {Bt_base_b1 ks} {Bt_bin_tie b0 b1} val) = (Bt_set1_ .0 bs ks b0 b1 val)
  (Bt_set {List_cons .0 bs} {Bt_base_q0 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) = (Bt_set2_ .0 bs ks b0 b1 b2 b3 b4 val)
  (Bt_set {List_cons .0 bs} {Bt_base_q1 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) = (Bt_set3_ .0 bs ks b0 b1 b2 b3 b4 val)
  (Bt_set {List_cons .0 bs} {Bt_base_q2 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) = (Bt_set4_ .0 bs ks b0 b1 b2 b3 b4 val)
  (Bt_set {List_cons .0 bs} {Bt_base_q3 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) = (Bt_set5_ .0 bs ks b0 b1 b2 b3 b4 val)
  (Bt_set {List_cons .0 bs} {Bt_base_q4 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) = (Bt_set6_ .0 bs ks b0 b1 b2 b3 b4 val)
}

// Apps.Fib.Action.get_data #Fib_ac_gdata (action: (U120)) : (U120)
fun (Fib_ac_gdata action) {
  (Fib_ac_gdata action) = (Fib_g_u120 action #16 #8)
}

// Demo_Act_inc #Demo_Act_inc : (Demo_Act)
ctr {Fib_Act code}

fun (Fib action) {
  (Fib {Fib_Act code}) = {TAKE @x let y = {Fib_st_upd x code}; dup _0 _1 = y; {SAVE _0 @~ {DONE _1}}}
} with {
  (Fib_st_init)
}

run {
  ask x = (Call 'Fib' {Fib_Act #0});
  (Done x)
}
