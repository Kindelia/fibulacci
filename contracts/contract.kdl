fun (Identity x) {
  (Identity x) = x
} 

// Apps.Fim.Kindelia (action: (Apps.Fim.Kindelia.Act)) : (Kindelia.IO (Apps.Fim.Kindelia.Response))
fun (Fim action) {
  (Fim {Fim_act_act code}) =
    {TAKE @state {TICK @block let pair = (Fim_kdl_supd state code block);
    dup _2 _3 = pair;
    let events = (Pair_snd _2);
    dup _0 _1 = events;
    let state = (Pair_fst _3);
    let result = (Bool_if (Data_BrauSMV _0) {Fim_res_noac} {Fim_res_acte _1});
    let result = (Identity result);
    {SAVE state @~ {DONE result}}}}
  (Fim {Fim_act_get}) =
    {TAKE @state dup _0 _1 = state;
    let result = {Fim_res_stat _0};
    let result = (Identity result);
    {SAVE _1 @~ {DONE result}}}
  (Fim {Fim_act_join subj kgt}) =
    dup _0 _1 = subj;
    {TAKE @state dup _14 _15 = state;
    dup _16 _17 = _14;
    {TICK @~ let phase = (Fim_kdl_sgph _15);
    (Fim_kdl_spma phase @phase.queue let queue = phase.queue;
    let user = {Fim_kdl_spun _0 kgt};
    let size = (U120_to_nat #10);
    dup _8 _9 = size;
    dup _10 _11 = _8;
    dup _12 _13 = _9;
    let pair = (Data_LimiXpu _10 queue user);
    dup _6 _7 = pair;
    let ~ = (Fim_kdl_spuk (Pair_fst _6));
    let queue = (Pair_snd _7);
    dup _2 _3 = queue;
    dup _4 _5 = _2;
    let cond = @x (U120_equal _1 (Fim_kdl_spuk x));
    let find = (Data_Limiik0 _11 cond _3);
    let phase = {Fim_kdl_splo _4};
    let state = (Fim_kdl_ssph _16 phase);
    {SAVE state @~ (Maybe_match find let floor = (Data_LimiwQy _12 (Data_LimiVdo _13 _5));
    let value = (Maybe_extCHU floor #0 @x (Fim_kdl_spuk x));
    let func = @x x;
    let value = (!func value);
    let result = {Fim_res_nojo value};
    let result = (Identity result);
    {DONE result} @find.value let position = find.value;
    let func = @x x;
    let position = (!func position);
    let result = {Fim_res_join position};
    let result = (Identity result);
    {DONE result})} @~ {SAVE _17 @~ {DONE {Fim_res_wrph}}})}}
  (Fim {Fim_act_strt}) =
    {TAKE @state dup _2 _3 = state;
    dup _4 _5 = _2;
    dup _6 _7 = _3;
    {TICK @tick dup _0 _1 = tick;
    (Fim_kdl_smat _4 @state.phase @state.start @~ let phase = state.phase;
    (Fim_kdl_spma phase @phase.queue let to_start = #300;
    let duration = (U120_sub_e4K _0 state.start);
    let can_start = {Bool_true};
    (Bool_if can_start let size = (U120_to_nat #10);
    let starts = (Fim_map_inpo);
    let acc = {Fim_kdl_tsne starts {PEmpty} (Fim_kdl_sgst _5) #0};
    let data = (Data_Limi57Q size acc @~ (Fim_kdl_tstf) phase.queue);
    (Fim_kdl_tsma data @~ @data.users @data.state @~ let phase = {Fim_kdl_spga data.users};
    let timer = #0;
    let state = data.state;
    let state = {Fim_kdl_snew phase timer state};
    let result = {Fim_res_star _1};
    let result = (Identity result);
    {SAVE state @~ {DONE result}}) {SAVE _6 @~ let result = {Fim_res_nost (U120_sub_e4K to_start duration)};
    let result = (Identity result);{DONE result}}) @~ {SAVE _7 @~ {DONE {Fim_r
    es_wrph}}}))}}
  (Fim {Fim_act_rst}) =
    {TAKE @state dup _0 _1 = state;
    {TICK @~ (Fim_kdl_smat _0 @state.phase @~ @~ let phase = state.phase;
    (Fim_kdl_spma phase @~ {SAVE _1 @~ {DONE {Fim_res_wrph}}} @~ let phase = (Fim_kdl_spil);
    let state = (Fim_stt_buil);
    let s_blk = #0;
    let state = {Fim_kdl_snew phase s_blk state};
    {SAVE state @~ {DONE {Fim_res_rese}}}))}}
} with {
    let map = (Fim_map_buld);
    let table = (Fim_tab_buld);
    let state = {Fim_st_new map table};
    let player = @x @y (Fim_plr_new x y #655 #1024 #0 #0 #0 #0 {List_cons #1 {List_nil}});
    dup _0 _1 = player;
    let p0 = (!(!_0 #45) #141);
    let p0_id = #1024;
    let p1 = (!(!_1 #45) #142);
    let p1_id = #1025;
    let state = (Fim_st_pplc state p0 p0_id);
    let state = (Fim_st_pplc state p1 p1_id);
    let phase = {Fim_kdl_spga {PEmpty}};
    let block = #0;
    {Fim_kdl_snew phase block state}
}
